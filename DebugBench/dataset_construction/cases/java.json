[
    {
        "slug": "shortest-path-in-a-grid-with-obstacles-elimination",
        "description": "You are given an m x n integer matrix grid where each cell is either 0 (empty) or 1 (obstacle). You can move up, down, left, or right from and to an empty cell in one step.\nReturn the minimum number of steps to walk from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1) given that you can eliminate at most k obstacles. If it is not possible to find such walk return -1.",
        "examples": [
            "Input: grid = [[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], k = 1\nOutput: 6\nExplanation: \nThe shortest path without eliminating any obstacle is 10.\nThe shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2).",
            "Input: grid = [[0,1,1],[1,1,1],[1,0,0]], k = 1\nOutput: -1\nExplanation: We need to eliminate at least two obstacles to find such a walk."
        ],
        "constrains": "m == grid.length\nn == grid[i].length\n1 <= m, n <= 40\n1 <= k <= m * n\ngrid[i][j] is either 0 or 1.\ngrid[0][0] == grid[m - 1][n - 1] == 0",
        "release_time": 1667138796,
        "oracle_code": "class Solution {\n    int [] dirs = {0, 1, 0, -1, 0};\n    public int shortestPath(int[][] grid, int k) {\n        int m = grid.length, n = grid[0].length;\n        if(k >= m+n -2) return m+n-2;\n        \n        boolean[][][] visited = new boolean [m][n][k+1];\n        Queue<int[]> q = new LinkedList<>();\n        q.offer(new int[]{0, 0, k, 0});\n        visited[0][0][k] = true;\n        \n        while(!q.isEmpty()){\n            int [] top = q.poll();\n          \n            int r = top[0], c = top[1], curk = top[2], dist = top[3];\n            \n            if(r == m-1 && c == n -1) return dist;\n            for(int i = 0; i< 4; i++){\n                int nr = r + dirs[i], nc = c + dirs[i + 1];\n                if(nr < 0 || nr == m || nc < 0 || nc == n) continue;\n                int newK = curk - grid[nr][nc];\n            \n                if(newK >= 0 && !visited[nr][nc][newK]){\n                    visited[nr][nc][newK] = true;\n                    q.offer(new int[]{nr, nc, newK, dist + 1});\n                }\n            }\n        }\n        return -1;\n    }\n}",
        "content": "```\\nclass Solution {\\n    int [] dirs = {0, 1, 0, -1, 0};\\n    public int shortestPath(int[][] grid, int k) {\\n        int m = grid.length, n = grid[0].length;\\n        if(k >= m+n -2) return m+n-2;\\n        \\n        boolean[][][] visited = new boolean [m][n][k+1];\\n        Queue<int[]> q = new LinkedList<>();\\n        q.offer(new int[]{0, 0, k, 0});\\n        visited[0][0][k] = true;\\n        \\n        while(!q.isEmpty()){\\n            int [] top = q.poll();\\n          \\n            int r = top[0], c = top[1], curk = top[2], dist = top[3];\\n            \\n            if(r == m-1 && c == n -1) return dist;\\n            for(int i = 0; i< 4; i++){\\n                int nr = r + dirs[i], nc = c + dirs[i + 1];\\n                if(nr < 0 || nr == m || nc < 0 || nc == n) continue;\\n                int newK = curk - grid[nr][nc];\\n            \\n                if(newK >= 0 && !visited[nr][nc][newK]){\\n                    visited[nr][nc][newK] = true;\\n                    q.offer(new int[]{nr, nc, newK, dist + 1});\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "number-of-different-subsequences-gcds",
        "description": "You are given an array nums that consists of positive integers.\nThe GCD of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly.\n\nFor example, the GCD of the sequence [4,6,16] is 2.\n\nA subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\n\nFor example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].\n\nReturn the number of different GCDs among all non-empty subsequences of nums.",
        "examples": [
            "Input: nums = [6,10,3]\nOutput: 5\nExplanation: The figure shows all the non-empty subsequences and their GCDs.\nThe different GCDs are 6, 10, 3, 2, and 1.",
            "Input: nums = [5,15,40,5,6]\nOutput: 7"
        ],
        "constrains": "1 <= nums.length <= 105\n1 <= nums[i] <= 2 * 105",
        "release_time": 1617547962,
        "oracle_code": "class Solution {\n    int max = 0;\n    Set<Integer> exist = new HashSet();\n    public int countDifferentSubsequenceGCDs(int[] nums) {\n        getMax(nums);\n        for(int num : nums) exist.add(num);\n        int count = 0;\n        for (int i=1;i<=max;i++) if(findGCD(i)) count++;      //  <---- findGCD\n        return count;\n    }\n    public void getMax(int[] nums){\n        for(int i : nums) max = Math.max(max, i);\n    }\n    public int gcd(int a, int b){\n        return (a == 0) ? b : gcd(b % a, a);\n    }\n\tpublic boolean findGCD(int num){\n        int val = 0;\n        for(int i = num; i <= max; i+= num)\n            if(exist.contains(i)) val = gcd(i, val);          //  <---- gcd between two number\n        return (val == num);\n    }\n}",
        "content": "**PLEASE UPVOTE IF YOU FIND THIS USEFUL**\\n\\n* Generating all subsets and finding the gcd will lead you to `TLE`\\n* We can try to build optimization around based on the constraint `1 <= nums[i] <= 2 * 10^5`\\n* The limit is `200000` and we find GCD for all the numbers available between them. we can limit to the `max` number in the input array, `nums`. \\n* We pick a number `num` and check if the GCD subsequence exists equals to the same number. If it exists then the elements of the gcd susequence will be the multiple of the same number passed. This is the reason why we increment the value by num in `findGCD`\\n* Maintaining a set `exist` for easy existence check for the number in the `nums`\\n* Increment the counter `count` if the gcd between the numbers matches\\n\\n**Time:**  N Log N (GCD worst case is logN)\\n**Space:** O(N) (usage of Set for N numbers)\\n```\\nclass Solution {\\n    int max = 0;\\n    Set<Integer> exist = new HashSet();\\n    public int countDifferentSubsequenceGCDs(int[] nums) {\\n        getMax(nums);\\n        for(int num : nums) exist.add(num);\\n        int count = 0;\\n        for (int i=1;i<=max;i++) if(findGCD(i)) count++;      //  <---- findGCD\\n        return count;\\n    }\\n    public void getMax(int[] nums){\\n        for(int i : nums) max = Math.max(max, i);\\n    }\\n    public int gcd(int a, int b){\\n        return (a == 0) ? b : gcd(b % a, a);\\n    }\\n\\tpublic boolean findGCD(int num){\\n        int val = 0;\\n        for(int i = num; i <= max; i+= num)\\n            if(exist.contains(i)) val = gcd(i, val);          //  <---- gcd between two number\\n        return (val == num);\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "populating-next-right-pointers-in-each-node",
        "description": "You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\n\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\nInitially, all next pointers are set to NULL.",
        "examples": [
            "Input: root = [1,2,3,4,5,6,7]\nOutput: [1,#,2,3,#,4,5,6,7,#]\nExplanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.",
            "Input: root = []\nOutput: []"
        ],
        "constrains": "The number of nodes in the tree is in the range [0, 212 - 1].\n-1000 <= Node.val <= 1000\n\n\u00a0\nFollow-up:\n\nYou may only use constant extra space.\nThe recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.",
        "release_time": 1674631361,
        "oracle_code": "class Solution {\n    public Node connect(Node node) {\n        Map<Integer, List<Node>> map = new HashMap<>();\n        goDFS(0, node, map);\n        for (int key : map.keySet()) {\n            List<Node> list = map.get(key);\n            for (int i = 1; i < list.size(); i++) {\n                list.get(i - 1).next = list.get(i);\n            }\n        }\n        return node;\n    }\n\n    private void goDFS(int lvl, Node node, Map<Integer, List<Node>> map) {\n        if (node == null) return;\n\n        List<Node> list = map.computeIfAbsent(lvl, k -> new ArrayList<>());\n        list.add(node);\n        lvl++;\n        goDFS(lvl, node.left, map);\n        goDFS(lvl, node.right, map);\n    }\n}",
        "content": "# Code\\n```\\nclass Solution {\\n    public Node connect(Node node) {\\n        Map<Integer, List<Node>> map = new HashMap<>();\\n        goDFS(0, node, map);\\n        for (int key : map.keySet()) {\\n            List<Node> list = map.get(key);\\n            for (int i = 1; i < list.size(); i++) {\\n                list.get(i - 1).next = list.get(i);\\n            }\\n        }\\n        return node;\\n    }\\n\\n    private void goDFS(int lvl, Node node, Map<Integer, List<Node>> map) {\\n        if (node == null) return;\\n\\n        List<Node> list = map.computeIfAbsent(lvl, k -> new ArrayList<>());\\n        list.add(node);\\n        lvl++;\\n        goDFS(lvl, node.left, map);\\n        goDFS(lvl, node.right, map);\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "three-consecutive-odds",
        "description": "Given an integer array arr, return true\u00a0if there are three consecutive odd numbers in the array. Otherwise, return\u00a0false.",
        "examples": [
            "Input: arr = [2,6,4,1]\nOutput: false\nExplanation: There are no three consecutive odds.",
            "Input: arr = [1,2,34,3,4,5,7,23,12]\nOutput: true\nExplanation: [5,7,23] are three consecutive odds."
        ],
        "constrains": "1 <= arr.length <= 1000\n1 <= arr[i] <= 1000",
        "release_time": 1670908898,
        "oracle_code": "class Solution {\n    public boolean threeConsecutiveOdds(int[] arr) {\n        for (int i = 0; i < arr.length - 2; i++) {\n            boolean isOdd1 = arr[i] % 2 == 1;\n            boolean isOdd2 = arr[i + 1] % 2 == 1;\n            boolean isOdd3 = arr[i + 2] % 2 == 1;\n            if (isOdd1 && isOdd2 && isOdd3) return true;\n        }\n        return false;\n    }\n}",
        "content": "# Code\\n```\\nclass Solution {\\n    public boolean threeConsecutiveOdds(int[] arr) {\\n        for (int i = 0; i < arr.length - 2; i++) {\\n            boolean isOdd1 = arr[i] % 2 == 1;\\n            boolean isOdd2 = arr[i + 1] % 2 == 1;\\n            boolean isOdd3 = arr[i + 2] % 2 == 1;\\n            if (isOdd1 && isOdd2 && isOdd3) return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "continuous-subarray-sum",
        "description": "Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.\nA good subarray is a subarray where:\n\nits length is at least two, and\nthe sum of the elements of the subarray is a multiple of k.\n\nNote that:\n\nA subarray is a contiguous part of the array.\nAn integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.",
        "examples": [
            "Input: nums = [23,2,4,6,7], k = 6\nOutput: true\nExplanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.",
            "Input: nums = [23,2,6,4,7], k = 6\nOutput: true\nExplanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.\n42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.",
            "Input: nums = [23,2,6,4,7], k = 13\nOutput: false"
        ],
        "constrains": "1 <= nums.length <= 105\n0 <= nums[i] <= 109\n0 <= sum(nums[i]) <= 231 - 1\n1 <= k <= 231 - 1",
        "release_time": 1683570789,
        "oracle_code": "class Solution {\n    public boolean checkSubarraySum(int[] nums, int k) {\n        HashMap<Integer,Integer> hm  = new HashMap<>();\n        hm.put(0,0);\n        \n        int sum = 0;\n        // hm.put(0,-1);\n        for( int  i = 0;i < nums.length; i++){\n            int num = nums[i];\n            sum+=num;\n      \n            if(hm.containsKey(sum%k)){\n                if(hm.get(sum%k)  < i )\n                    return true;\n            }else\n                hm.put(sum%k, i+1);\n            \n        }\n        return false;\n    }\n}",
        "content": "```\\nclass Solution {\\n    public boolean checkSubarraySum(int[] nums, int k) {\\n        HashMap<Integer,Integer> hm  = new HashMap<>();\\n        hm.put(0,0);\\n        \\n        int sum = 0;\\n        // hm.put(0,-1);\\n        for( int  i = 0;i < nums.length; i++){\\n            int num = nums[i];\\n            sum+=num;\\n      \\n            if(hm.containsKey(sum%k)){\\n                if(hm.get(sum%k)  < i )\\n                    return true;\\n            }else\\n                hm.put(sum%k, i+1);\\n            \\n        }\\n        return false;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "count-number-of-pairs-with-absolute-difference-k",
        "description": "Given an integer array nums and an integer k, return the number of pairs (i, j) where i < j such that |nums[i] - nums[j]| == k.\nThe value of |x| is defined as:\n\nx if x >= 0.\n-x if x < 0.",
        "examples": [
            "Input: nums = [1,2,2,1], k = 1\nOutput: 4\nExplanation: The pairs with an absolute difference of 1 are:\n- [1,2,2,1]\n- [1,2,2,1]\n- [1,2,2,1]\n- [1,2,2,1]",
            "Input: nums = [1,3], k = 3\nOutput: 0\nExplanation: There are no pairs with an absolute difference of 3.",
            "Input: nums = [3,2,1,5,4], k = 2\nOutput: 3\nExplanation: The pairs with an absolute difference of 2 are:\n- [3,2,1,5,4]\n- [3,2,1,5,4]\n- [3,2,1,5,4]"
        ],
        "constrains": "1 <= nums.length <= 200\n1 <= nums[i] <= 100\n1 <= k <= 99",
        "release_time": 1677159545,
        "oracle_code": "class Solution {\n    public int countKDifference(int[] nums, int k) {\n       int ans = 0;\n\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (Math.abs(nums[i] - nums[j]) == k) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}",
        "content": "\\n# Complexity\\n- Time complexity:\\nO(N^2)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int countKDifference(int[] nums, int k) {\\n       int ans = 0;\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            for (int j = i + 1; j < nums.length; j++) {\\n                if (Math.abs(nums[i] - nums[j]) == k) {\\n                    ans++;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```\\n\\nplease upvote, if u like this solution!",
        "level": "easy"
    },
    {
        "slug": "count-number-of-rectangles-containing-each-point",
        "description": "You are given a 2D integer array rectangles where rectangles[i] = [li, hi] indicates that ith rectangle has a length of li and a height of hi. You are also given a 2D integer array points where points[j] = [xj, yj] is a point with coordinates (xj, yj).\nThe ith rectangle has its bottom-left corner point at the coordinates (0, 0) and its top-right corner point at (li, hi).\nReturn an integer array count of length points.length where count[j] is the number of rectangles that contain the jth point.\nThe ith rectangle contains the jth point if 0 <= xj <= li and 0 <= yj <= hi. Note that points that lie on the edges of a rectangle are also considered to be contained by that rectangle.",
        "examples": [
            "Input: rectangles = [[1,2],[2,3],[2,5]], points = [[2,1],[1,4]]\nOutput: [2,1]\nExplanation: \nThe first rectangle contains no points.\nThe second rectangle contains only the point (2, 1).\nThe third rectangle contains the points (2, 1) and (1, 4).\nThe number of rectangles that contain the point (2, 1) is 2.\nThe number of rectangles that contain the point (1, 4) is 1.\nTherefore, we return [2, 1].",
            "Input: rectangles = [[1,1],[2,2],[3,3]], points = [[1,3],[1,1]]\nOutput: [1,3]\nExplanation:\nThe first rectangle contains only the point (1, 1).\nThe second rectangle contains only the point (1, 1).\nThe third rectangle contains the points (1, 3) and (1, 1).\nThe number of rectangles that contain the point (1, 3) is 1.\nThe number of rectangles that contain the point (1, 1) is 3.\nTherefore, we return [1, 3]."
        ],
        "constrains": "1 <= rectangles.length, points.length <= 5 * 104\nrectangles[i].length == points[j].length == 2\n1 <= li, xj <= 109\n1 <= hi, yj <= 100\nAll the rectangles are unique.\nAll the points are unique.",
        "release_time": 1650772909,
        "oracle_code": "class Solution {\n    public int[] countRectangles(int[][] rectangles, int[][] points) {\n        int max = Integer.MIN_VALUE;\n        \n        TreeMap<Integer, List<Integer>> rects = new TreeMap<>();\n        for(int[] rect : rectangles) {\n            if (!rects.containsKey(rect[1])) {\n                rects.put(rect[1], new ArrayList<Integer>());\n            }\n            \n            rects.get(rect[1]).add(rect[0]);\n            max = Math.max(max, rect[1]);\n        }\n        \n        for(int k : rects.keySet()) {\n            Collections.sort(rects.get(k));\n        }\n        \n        int[] ans = new int[points.length];\n        for(int i = 0; i < points.length; i++) {\n            if (points[i][1] > max) {\n                continue;\n            }\n\n            int count = 0;\n            \n            for(int key : rects.subMap(points[i][1], max + 1).keySet()) {\n                List<Integer> y = rects.get(key);\n                \n                count += binarySearch(y, points[i][0]);\n            }\n            \n            ans[i] = count;\n        }\n\n        return ans;\n    }\n    \n    private int binarySearch(List<Integer> vals, int val) {\n        int lo = 0;\n        int hi = vals.size() - 1;\n        int id = -1;\n        \n        while(lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            \n            if (vals.get(mid) < val) {\n                lo = mid + 1;\n            } else {\n                id = mid;\n                hi = mid - 1;\n            }\n        }\n        \n        if (id < 0) {\n            return 0;\n        }\n        \n        return vals.size() - id;\n    }\n}",
        "content": "\\nPrepare a TreeMap with key as `y` and values as list of corresponding `x` for all the rectangle.\\nNow we can get the range of `y` co-ordinagtes in `log(n)` time using TreeMap function `subMap` and \\nfor each `y` in this submap, we can get the list of `x` coordinate and run binary search (after sorting it one time) on it to find the valid `x` co-ordinate of rectangles in `log(n)` time.\\n    \\nThe key observaion here is the range of `y`. It can only go from 1 to 100.\\nIf instead of `y`, you use `x` of rectangle as the key in the TreeMap, the code will TimeOut since `x` can vary on much wider range hence you will be running binary search too many times.\\n\\n```\\nclass Solution {\\n    public int[] countRectangles(int[][] rectangles, int[][] points) {\\n        int max = Integer.MIN_VALUE;\\n        \\n        TreeMap<Integer, List<Integer>> rects = new TreeMap<>();\\n        for(int[] rect : rectangles) {\\n            if (!rects.containsKey(rect[1])) {\\n                rects.put(rect[1], new ArrayList<Integer>());\\n            }\\n            \\n            rects.get(rect[1]).add(rect[0]);\\n            max = Math.max(max, rect[1]);\\n        }\\n        \\n        for(int k : rects.keySet()) {\\n            Collections.sort(rects.get(k));\\n        }\\n        \\n        int[] ans = new int[points.length];\\n        for(int i = 0; i < points.length; i++) {\\n            if (points[i][1] > max) {\\n                continue;\\n            }\\n\\n            int count = 0;\\n            \\n            for(int key : rects.subMap(points[i][1], max + 1).keySet()) {\\n                List<Integer> y = rects.get(key);\\n                \\n                count += binarySearch(y, points[i][0]);\\n            }\\n            \\n            ans[i] = count;\\n        }\\n\\n        return ans;\\n    }\\n    \\n    private int binarySearch(List<Integer> vals, int val) {\\n        int lo = 0;\\n        int hi = vals.size() - 1;\\n        int id = -1;\\n        \\n        while(lo <= hi) {\\n            int mid = lo + (hi - lo) / 2;\\n            \\n            if (vals.get(mid) < val) {\\n                lo = mid + 1;\\n            } else {\\n                id = mid;\\n                hi = mid - 1;\\n            }\\n        }\\n        \\n        if (id < 0) {\\n            return 0;\\n        }\\n        \\n        return vals.size() - id;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "find-palindrome-with-fixed-length",
        "description": "Given an integer array queries and a positive integer intLength, return an array answer where answer[i] is either the queries[i]th smallest positive palindrome of length intLength or -1 if no such palindrome exists.\nA palindrome is a number that reads the same backwards and forwards. Palindromes cannot have leading zeros.",
        "examples": [
            "Input: queries = [1,2,3,4,5,90], intLength = 3\nOutput: [101,111,121,131,141,999]\nExplanation:\nThe first few palindromes of length 3 are:\n101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, ...\nThe 90th palindrome of length 3 is 999.",
            "Input: queries = [2,4,6], intLength = 4\nOutput: [1111,1331,1551]\nExplanation:\nThe first six palindromes of length 4 are:\n1001, 1111, 1221, 1331, 1441, and 1551."
        ],
        "constrains": "1 <= queries.length <= 5 * 104\n1 <= queries[i] <= 109\n1 <= intLength\u00a0<= 15",
        "release_time": 1690442915,
        "oracle_code": "class Solution {\n    public long[] kthPalindrome(int[] queries, int intLength) {\n        int n=queries.length;\n        long ans[]=new long[n];\n        int ans_i=0;\n        \n        \n        int palindrome_present = ( intLength+1 )/2 ;\n        \n        long l=(long)Math.pow(10,palindrome_present-1); //10\n        long r=(long)Math.pow(10,palindrome_present)-1; //99\n        for(int q:queries){\n            if(q<=(r-l+1)){\n                String left_half=Long.toString(l+q-1);\n                String right_half=(new StringBuilder(left_half)).reverse().toString();\n                ans[ans_i]=Long.parseLong( left_half+right_half.substring(intLength % 2 ) );\n                \n            }\n            else{\n                ans[ans_i]=-1;\n            }\n            \n            ans_i++;\n        }\n        \n        return ans;\n    }\n}",
        "content": "# Intuition\\n![upvote.png](https://assets.leetcode.com/users/images/82cc68e9-a96c-40f4-a46a-e7c7966a60cc_1690442908.0847147.png)\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long[] kthPalindrome(int[] queries, int intLength) {\\n        int n=queries.length;\\n        long ans[]=new long[n];\\n        int ans_i=0;\\n        \\n        \\n        int palindrome_present = ( intLength+1 )/2 ;\\n        \\n        long l=(long)Math.pow(10,palindrome_present-1); //10\\n        long r=(long)Math.pow(10,palindrome_present)-1; //99\\n        for(int q:queries){\\n            if(q<=(r-l+1)){\\n                String left_half=Long.toString(l+q-1);\\n                String right_half=(new StringBuilder(left_half)).reverse().toString();\\n                ans[ans_i]=Long.parseLong( left_half+right_half.substring(intLength % 2 ) );\\n                \\n            }\\n            else{\\n                ans[ans_i]=-1;\\n            }\\n            \\n            ans_i++;\\n        }\\n        \\n        return ans;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "diagonal-traverse-ii",
        "description": "Given a 2D integer array nums, return all elements of nums in diagonal order as shown in the below images.",
        "examples": [
            "Input: nums = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,4,2,7,5,3,8,6,9]",
            "Input: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]\nOutput: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]"
        ],
        "constrains": "1 <= nums.length <= 105\n1 <= nums[i].length <= 105\n1 <= sum(nums[i].length) <= 105\n1 <= nums[i][j] <= 105",
        "release_time": 1687196653,
        "oracle_code": "class Solution {\n    public int[] findDiagonalOrder(List<List<Integer>> nums) {\n        int m = nums.size(), maxSum = 0, size = 0, index = 0;\n        List<Integer>[] map = new ArrayList[100001];\n        for (int i = 0; i < m; i++) {\n            size += nums.get(i).size();\n            for (int j = 0; j < nums.get(i).size(); j++) {\n                int sum = i + j;\n                if (map[sum] == null) map[sum] = new ArrayList<>();\n                map[sum].add(nums.get(i).get(j));\n                maxSum = Math.max(maxSum, sum);\n            }\n        }\n        int[] res = new int[size];\n        for (int i = 0; i <= maxSum; i++) {\n            List<Integer> cur = map[i];\n            for (int j = cur.size() - 1; j >= 0; j--) {\n                res[index++] = cur.get(j);\n            }\n        }\n        return res;\n    }\n}",
        "content": "```\\nclass Solution {\\n    public int[] findDiagonalOrder(List<List<Integer>> nums) {\\n        int m = nums.size(), maxSum = 0, size = 0, index = 0;\\n        List<Integer>[] map = new ArrayList[100001];\\n        for (int i = 0; i < m; i++) {\\n            size += nums.get(i).size();\\n            for (int j = 0; j < nums.get(i).size(); j++) {\\n                int sum = i + j;\\n                if (map[sum] == null) map[sum] = new ArrayList<>();\\n                map[sum].add(nums.get(i).get(j));\\n                maxSum = Math.max(maxSum, sum);\\n            }\\n        }\\n        int[] res = new int[size];\\n        for (int i = 0; i <= maxSum; i++) {\\n            List<Integer> cur = map[i];\\n            for (int j = cur.size() - 1; j >= 0; j--) {\\n                res[index++] = cur.get(j);\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "maximum-ice-cream-bars",
        "description": "It is a sweltering summer day, and a boy wants to buy some ice cream bars.\nAt the store, there are n ice cream bars. You are given an array costs of length n, where costs[i] is the price of the ith ice cream bar in coins. The boy initially has coins coins to spend, and he wants to buy as many ice cream bars as possible.\u00a0\nNote: The boy can buy the ice cream bars in any order.\nReturn the maximum number of ice cream bars the boy can buy with coins coins.\nYou must solve the problem by counting sort.",
        "examples": [
            "Input: costs = [1,3,2,4,1], coins = 7\nOutput: 4\nExplanation: The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7.",
            "Input: costs = [10,6,8,7,7,8], coins = 5\nOutput: 0\nExplanation: The boy cannot afford any of the ice cream bars.",
            "Input: costs = [1,6,3,1,2,5], coins = 20\nOutput: 6\nExplanation: The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18."
        ],
        "constrains": "costs.length == n\n1 <= n <= 105\n1 <= costs[i] <= 105\n1 <= coins <= 108",
        "release_time": 1672980160,
        "oracle_code": "class Solution {\n    public int maxIceCream(int[] costs, int coins) {\n        int [] arr = new int [100001];\n        for(int x : costs)arr[x]++;\n        int count = 0;\n        int index = 1;\n//If coins can buy all the ice-cream at ith index.\n        while(index<100001 && coins>=index*arr[index]){\n            coins-=index*arr[index];\n            count+=arr[index];\n            index++;\n        }\n//If coins can buy onyl some of the ice-creams at ith index.\n        while(index<100001 && coins>=index){\n            coins-=index;\n            count++;\n        }\n        return count;\n    }\n}",
        "content": "# Code\\n```\\nclass Solution {\\n    public int maxIceCream(int[] costs, int coins) {\\n        int [] arr = new int [100001];\\n        for(int x : costs)arr[x]++;\\n        int count = 0;\\n        int index = 1;\\n//If coins can buy all the ice-cream at ith index.\\n        while(index<100001 && coins>=index*arr[index]){\\n            coins-=index*arr[index];\\n            count+=arr[index];\\n            index++;\\n        }\\n//If coins can buy onyl some of the ice-creams at ith index.\\n        while(index<100001 && coins>=index){\\n            coins-=index;\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```\\n\\n# Using priority Queue\\n```\\nclass Solution {\\n    public int maxIceCream(int[] costs, int coins) {\\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(Collections.reverseOrder());\\n        int sum = 0;\\n        for(int x : costs){\\n            if(sum<=coins){\\n                sum+=x;\\n                pq.add(x);\\n            }else if(pq.peek()>x){\\n                sum = sum - pq.poll() + x;\\n                pq.add(x);\\n            }\\n        }\\n        while(sum>coins){\\n            sum-=pq.poll();\\n        }\\n        return pq.size();\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "check-if-an-original-string-exists-given-two-encoded-strings",
        "description": "An original string, consisting of lowercase English letters, can be encoded by the following steps:\n\nArbitrarily split it into a sequence of some number of non-empty substrings.\nArbitrarily choose some elements (possibly none) of the sequence, and replace each with its length (as a numeric string).\nConcatenate the sequence as the encoded string.\n\nFor example, one way to encode an original string \"abcdefghijklmnop\" might be:\n\nSplit it as a sequence: [\"ab\", \"cdefghijklmn\", \"o\", \"p\"].\nChoose the second and third elements to be replaced by their lengths, respectively. The sequence becomes [\"ab\", \"12\", \"1\", \"p\"].\nConcatenate the elements of the sequence to get the encoded string: \"ab121p\".\n\nGiven two encoded strings s1 and s2, consisting of lowercase English letters and digits 1-9 (inclusive), return true if there exists an original string that could be encoded as both s1 and s2. Otherwise, return false.\nNote: The test cases are generated such that the number of consecutive digits in s1 and s2 does not exceed 3.",
        "examples": [
            "Input: s1 = \"internationalization\", s2 = \"i18n\"\nOutput: true\nExplanation: It is possible that \"internationalization\" was the original string.\n- \"internationalization\" \n  -> Split:       [\"internationalization\"]\n  -> Do not replace any element\n  -> Concatenate:  \"internationalization\", which is s1.\n- \"internationalization\"\n  -> Split:       [\"i\", \"nternationalizatio\", \"n\"]\n  -> Replace:     [\"i\", \"18\",                 \"n\"]\n  -> Concatenate:  \"i18n\", which is s2",
            "Input: s1 = \"l123e\", s2 = \"44\"\nOutput: true\nExplanation: It is possible that \"leetcode\" was the original string.\n- \"leetcode\" \n  -> Split:      [\"l\", \"e\", \"et\", \"cod\", \"e\"]\n  -> Replace:    [\"l\", \"1\", \"2\",  \"3\",   \"e\"]\n  -> Concatenate: \"l123e\", which is s1.\n- \"leetcode\" \n  -> Split:      [\"leet\", \"code\"]\n  -> Replace:    [\"4\",    \"4\"]\n  -> Concatenate: \"44\", which is s2.",
            "Input: s1 = \"a5b\", s2 = \"c5b\"\nOutput: false\nExplanation: It is impossible.\n- The original string encoded as s1 must start with the letter 'a'.\n- The original string encoded as s2 must start with the letter 'c'."
        ],
        "constrains": "1 <= s1.length, s2.length <= 40\ns1 and s2 consist of digits 1-9 (inclusive), and lowercase English letters only.\nThe number of consecutive digits in s1 and s2 does not exceed 3.",
        "release_time": 1641066929,
        "oracle_code": "/**\nCases:\n\ndiff > 0 meaning we need to pick more chars in s1\ndiff < 0 meaning we need to pick more chars in s2\n\n-1000 < diff < 1000 as there can be at most 3 digits in the string meaning largest digits are 999\n\n1. s1[i] == s2[j] and diff = 0\n    increment i+1 and j+1\n    \n2. if s1[i] is not digit and diff > 0  then increment i i+1, diff\n3. if s2[j] is not digit and diff < 0 then increment j j+1, diff\n4. if s1[i] is digit then get digit value and decrement diff val as we have covered such chars in the s1 string\n    and increment i i+1, diff-val\n5. if s2[j] is digit then get digit value and increment diff val as we need to cover such chars in the s2 string and\n    increment j, j+1, diff+val\n\n\n\n     01234\ns1 = l123e\ns2 = 44\n\ni: 0\nj: 0\ndiff: 0\n    // Wildcard matching on s2[j]\n    val = 4, diff = 0+4 j = 1\n    \n\ti: 0\n\tj: 1\n\tdiff: 4\n    // Literal matching on s1[i]\n    increment ith pointer as ith is a literal and we can move on to next char in s1 and decrement diff\n\t\n\t\ti: 1\n\t\tj: 1\n\t\tdiff: 3\n        // Wildcard matching on s1[i]\n        val = 1 diff = 3-1 = 2 increment i\n\t\t\n\t\t\ti: 2\n\t\t\tj: 1\n\t\t\tdiff: 2\n            // Wildcard matching on s1[i]\n            val = 2 diff = 2-2 = 0   increment i\n\t\t\t\n\t\t\t\ti: 3\n\t\t\t\tj: 1\n\t\t\t\tdiff: 0 \n                // Wildcard matching on s1[i]\n                val=3 diff = 0-3 = -3, increment i\n                \n\t\t\t\t\ti: 4\n\t\t\t\t\tj: 1\n\t\t\t\t\tdiff: -3\n\t\t\t\t\t// Wildcard matching on s2[j]\n                    val = 4 diff = -3+4 =1 increment j\n                    \n\t\t\t\t\t\ti: 4\n\t\t\t\t\t\tj: 2\n\t\t\t\t\t\tdiff: 1\n                         // Literal matching on s1[i]\n                         decrement i-1 and increment i\n                         \n                            i=5\n                            j=2\n                                diff==0 return true\n                        dp[4][2][1] = true    \n\t\t\t\t\t\treturn true\n\t\t\t\t    return dp[4][1][1000-3] = true\n                return dp[3][1][0] = true\n\t\t\t\n\t\t\ti: 2\n\t\t\tj: 1\n\t\t\tdiff: 2\n\t\t\treturn dp[2][1][2] = true\n\t\t\treturn true\n\t\t\t\n\t\ti: 0\n\t\tj: 1\n\t\tdiff: 4\n\t\treturn dp[0][1][4] = true  \n    return true\n*/\n\nclass Solution {\n    //112ms\n     public boolean possiblyEquals(String s1, String s2) {\n         return helper(s1.toCharArray(), s2.toCharArray(), 0, 0, 0, new Boolean[s1.length()+1][s2.length()+1][2001]);\n     }\n    \n     boolean helper(char[] s1, char[] s2, int i, int j, int diff, Boolean[][][] dp) {\n         if(i == s1.length && j == s2.length) {\n             return diff == 0;\n         }\n         \n         if(dp[i][j][diff+1000] != null)\n             return dp[i][j][diff+1000];\n         \n         // if both i and j are at the same location and chars are same then simply increment both pointers\n         if(i < s1.length && j < s2.length && diff == 0 && s1[i] == s2[j]) {\n             if(helper(s1, s2, i+1, j+1, diff, dp)) {\n                 return dp[i][j][diff+1000] = true;\n             }\n         }\n         \n         // if s1[i] is literal and diff > 0 then increment i and decrement diff by 1\n         if(i < s1.length && !Character.isDigit(s1[i]) && diff > 0 && helper(s1, s2, i+1, j, diff-1, dp)) {\n             return dp[i][j][diff+1000] = true;\n         }\n         \n         // if s2[j] is literal and diff < 0 then increment j and increment diff by 1\n         // as we are done with the current jth char\n         if(j < s2.length && !Character.isDigit(s2[j]) && diff < 0 && helper(s1, s2, i, j+1, diff+1, dp)) {\n             return dp[i][j][diff+1000] = true;\n         }\n         \n         // wildcard matching in s1\n         // if s1 contains l123\n         // then need to check with val as 1 then val as 12 and val as 123\n         for(int k = i, val = 0; k < i + 4 && k < s1.length && Character.isDigit(s1[k]); k++) {\n             val = val * 10 + s1[k] -'0';\n             if(helper(s1, s2, k+1, j, diff-val, dp)) {\n                 return dp[i][j][diff+1000] = true;\n             }\n         }\n         \n         // wildcard matching in s2\n         // if s2 contains l123\n         // then need to check with val as 1 then val as 12 and val as 123\n         for(int k = j, val = 0; k < j + 4 && k < s2.length && Character.isDigit(s2[k]); k++) {\n             val = val * 10 + s2[k] -'0';\n             if(helper(s1, s2, i, k+1, diff+val, dp)) {\n                 return dp[i][j][diff+1000] = true;\n             }\n         }\n         \n         return dp[i][j][diff+1000] = false;\n     }\n}",
        "content": "Please see the comments below.\\n\\n```\\n/**\\nCases:\\n\\ndiff > 0 meaning we need to pick more chars in s1\\ndiff < 0 meaning we need to pick more chars in s2\\n\\n-1000 < diff < 1000 as there can be at most 3 digits in the string meaning largest digits are 999\\n\\n1. s1[i] == s2[j] and diff = 0\\n    increment i+1 and j+1\\n    \\n2. if s1[i] is not digit and diff > 0  then increment i i+1, diff\\n3. if s2[j] is not digit and diff < 0 then increment j j+1, diff\\n4. if s1[i] is digit then get digit value and decrement diff val as we have covered such chars in the s1 string\\n    and increment i i+1, diff-val\\n5. if s2[j] is digit then get digit value and increment diff val as we need to cover such chars in the s2 string and\\n    increment j, j+1, diff+val\\n\\n\\n\\n     01234\\ns1 = l123e\\ns2 = 44\\n\\ni: 0\\nj: 0\\ndiff: 0\\n    // Wildcard matching on s2[j]\\n    val = 4, diff = 0+4 j = 1\\n    \\n\\ti: 0\\n\\tj: 1\\n\\tdiff: 4\\n    // Literal matching on s1[i]\\n    increment ith pointer as ith is a literal and we can move on to next char in s1 and decrement diff\\n\\t\\n\\t\\ti: 1\\n\\t\\tj: 1\\n\\t\\tdiff: 3\\n        // Wildcard matching on s1[i]\\n        val = 1 diff = 3-1 = 2 increment i\\n\\t\\t\\n\\t\\t\\ti: 2\\n\\t\\t\\tj: 1\\n\\t\\t\\tdiff: 2\\n            // Wildcard matching on s1[i]\\n            val = 2 diff = 2-2 = 0   increment i\\n\\t\\t\\t\\n\\t\\t\\t\\ti: 3\\n\\t\\t\\t\\tj: 1\\n\\t\\t\\t\\tdiff: 0 \\n                // Wildcard matching on s1[i]\\n                val=3 diff = 0-3 = -3, increment i\\n                \\n\\t\\t\\t\\t\\ti: 4\\n\\t\\t\\t\\t\\tj: 1\\n\\t\\t\\t\\t\\tdiff: -3\\n\\t\\t\\t\\t\\t// Wildcard matching on s2[j]\\n                    val = 4 diff = -3+4 =1 increment j\\n                    \\n\\t\\t\\t\\t\\t\\ti: 4\\n\\t\\t\\t\\t\\t\\tj: 2\\n\\t\\t\\t\\t\\t\\tdiff: 1\\n                         // Literal matching on s1[i]\\n                         decrement i-1 and increment i\\n                         \\n                            i=5\\n                            j=2\\n                                diff==0 return true\\n                        dp[4][2][1] = true    \\n\\t\\t\\t\\t\\t\\treturn true\\n\\t\\t\\t\\t    return dp[4][1][1000-3] = true\\n                return dp[3][1][0] = true\\n\\t\\t\\t\\n\\t\\t\\ti: 2\\n\\t\\t\\tj: 1\\n\\t\\t\\tdiff: 2\\n\\t\\t\\treturn dp[2][1][2] = true\\n\\t\\t\\treturn true\\n\\t\\t\\t\\n\\t\\ti: 0\\n\\t\\tj: 1\\n\\t\\tdiff: 4\\n\\t\\treturn dp[0][1][4] = true  \\n    return true\\n*/\\n\\nclass Solution {\\n    //112ms\\n     public boolean possiblyEquals(String s1, String s2) {\\n         return helper(s1.toCharArray(), s2.toCharArray(), 0, 0, 0, new Boolean[s1.length()+1][s2.length()+1][2001]);\\n     }\\n    \\n     boolean helper(char[] s1, char[] s2, int i, int j, int diff, Boolean[][][] dp) {\\n         if(i == s1.length && j == s2.length) {\\n             return diff == 0;\\n         }\\n         \\n         if(dp[i][j][diff+1000] != null)\\n             return dp[i][j][diff+1000];\\n         \\n         // if both i and j are at the same location and chars are same then simply increment both pointers\\n         if(i < s1.length && j < s2.length && diff == 0 && s1[i] == s2[j]) {\\n             if(helper(s1, s2, i+1, j+1, diff, dp)) {\\n                 return dp[i][j][diff+1000] = true;\\n             }\\n         }\\n         \\n         // if s1[i] is literal and diff > 0 then increment i and decrement diff by 1\\n         if(i < s1.length && !Character.isDigit(s1[i]) && diff > 0 && helper(s1, s2, i+1, j, diff-1, dp)) {\\n             return dp[i][j][diff+1000] = true;\\n         }\\n         \\n         // if s2[j] is literal and diff < 0 then increment j and increment diff by 1\\n         // as we are done with the current jth char\\n         if(j < s2.length && !Character.isDigit(s2[j]) && diff < 0 && helper(s1, s2, i, j+1, diff+1, dp)) {\\n             return dp[i][j][diff+1000] = true;\\n         }\\n         \\n         // wildcard matching in s1\\n         // if s1 contains l123\\n         // then need to check with val as 1 then val as 12 and val as 123\\n         for(int k = i, val = 0; k < i + 4 && k < s1.length && Character.isDigit(s1[k]); k++) {\\n             val = val * 10 + s1[k] -\\'0\\';\\n             if(helper(s1, s2, k+1, j, diff-val, dp)) {\\n                 return dp[i][j][diff+1000] = true;\\n             }\\n         }\\n         \\n         // wildcard matching in s2\\n         // if s2 contains l123\\n         // then need to check with val as 1 then val as 12 and val as 123\\n         for(int k = j, val = 0; k < j + 4 && k < s2.length && Character.isDigit(s2[k]); k++) {\\n             val = val * 10 + s2[k] -\\'0\\';\\n             if(helper(s1, s2, i, k+1, diff+val, dp)) {\\n                 return dp[i][j][diff+1000] = true;\\n             }\\n         }\\n         \\n         return dp[i][j][diff+1000] = false;\\n     }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "n-queens",
        "description": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.",
        "examples": [
            "Input: n = 4\nOutput: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above",
            "Input: n = 1\nOutput: [[\"Q\"]]"
        ],
        "constrains": "1 <= n <= 9",
        "release_time": 1689162852,
        "oracle_code": "class Solution {\n    public List<List<String>> solveNQueens(int n) {\n        \n        char [][] board = new char[n][n];\n        for(int i = 0; i < board.length; i++) {\n            for(int j = 0; j < board.length; j++) {\n                board[i][j] = '.';\n            }\n        }\n        \n        List<List<String>> ans = new ArrayList<>();\n        queen(board, 0, ans);\n        return ans;\n    }\n\n    static void queen(char[][] board, int row, List<List<String>> list) {\n\n        if(row == board.length) {\n\n            list.add(construct(board));\n            return;\n        }\n\n        for (int col = 0; col < board.length; col++) {\n            if(isSafe(board, row, col)) {\n                board[row][col] = 'Q';\n                queen(board, row + 1, list);\n                board[row][col] = '.';\n            }\n        }\n    }\n\n    static List<String> construct(char[][] board) {\n\n        List<String> internal = new ArrayList<>();\n        for (int i = 0; i < board.length; i++) {\n            String row = new String(board[i]);\n            internal.add(row);\n        }\n        return internal;\n    }\n\n    static boolean isSafe(char[][] board, int row, int col) {\n\n        //for checking vertical row\n        for (int i = 0; i < row; i++) {\n            if(board[i][col] == 'Q') {\n                return false;\n            }\n        }\n\n        //for checking left diagonal\n\n        int maxLeft = Math.min(row, col);\n\n        for (int i = 1; i <= maxLeft; i++) {\n            if(board[row - i][col - i] == 'Q') {\n                return false;\n            }\n        }\n\n        //for checking right diagonal\n\n        int maxRight = Math.min(row, board.length - 1 - col);\n\n        for (int i = 1; i <= maxRight; i++) {\n            if(board[row - i][col + i] == 'Q') {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}",
        "content": "# Intuition\\n<!--  -->\\nLet\\'s see the intuition behind this question.\\n\\n![WhatsApp Image 2023-07-12 at 5.11.51 PM.jpeg](https://assets.leetcode.com/users/images/d7c0148d-9d34-4e20-86a9-34da5b670c08_1689162264.640158.jpeg)\\n\\n# Approach\\n<!--  -->\\nSo, now when we know the question requires backtracking and recursion, let\\'s discuss the thought process and the approach!\\n\\n![WhatsApp Image 2023-07-12 at 5.11.52 PM.jpeg](https://assets.leetcode.com/users/images/76f56253-26ea-4299-9d02-604f8c1a88f1_1689162387.0847921.jpeg)\\n![WhatsApp Image 2023-07-12 at 5.11.53 PM.jpeg](https://assets.leetcode.com/users/images/2872576b-425c-48c9-a5c7-ee6c8b960b72_1689162414.789056.jpeg)\\n![WhatsApp Image 2023-07-12 at 5.18.32 PM.jpeg](https://assets.leetcode.com/users/images/74aa66cb-dc07-4001-a353-ae8220a3bf0d_1689162542.4049857.jpeg)\\n\\n## Please upvote if you loved it! \\n\\n![cat.jpeg](https://assets.leetcode.com/users/images/6caea43f-b90d-4e55-befe-e8963ec23424_1689162825.9038785.jpeg)\\n\\n\\n\\n# Complexity\\n- Time complexity: O(n! * n)\\n<!--  -->\\n\\n- Space complexity: O(n^2)\\n<!--  -->\\n\\n# Code\\n```\\nclass Solution {\\n    public List<List<String>> solveNQueens(int n) {\\n        \\n        char [][] board = new char[n][n];\\n        for(int i = 0; i < board.length; i++) {\\n            for(int j = 0; j < board.length; j++) {\\n                board[i][j] = \\'.\\';\\n            }\\n        }\\n        \\n        List<List<String>> ans = new ArrayList<>();\\n        queen(board, 0, ans);\\n        return ans;\\n    }\\n\\n    static void queen(char[][] board, int row, List<List<String>> list) {\\n\\n        if(row == board.length) {\\n\\n            list.add(construct(board));\\n            return;\\n        }\\n\\n        for (int col = 0; col < board.length; col++) {\\n            if(isSafe(board, row, col)) {\\n                board[row][col] = \\'Q\\';\\n                queen(board, row + 1, list);\\n                board[row][col] = \\'.\\';\\n            }\\n        }\\n    }\\n\\n    static List<String> construct(char[][] board) {\\n\\n        List<String> internal = new ArrayList<>();\\n        for (int i = 0; i < board.length; i++) {\\n            String row = new String(board[i]);\\n            internal.add(row);\\n        }\\n        return internal;\\n    }\\n\\n    static boolean isSafe(char[][] board, int row, int col) {\\n\\n        //for checking vertical row\\n        for (int i = 0; i < row; i++) {\\n            if(board[i][col] == \\'Q\\') {\\n                return false;\\n            }\\n        }\\n\\n        //for checking left diagonal\\n\\n        int maxLeft = Math.min(row, col);\\n\\n        for (int i = 1; i <= maxLeft; i++) {\\n            if(board[row - i][col - i] == \\'Q\\') {\\n                return false;\\n            }\\n        }\\n\\n        //for checking right diagonal\\n\\n        int maxRight = Math.min(row, board.length - 1 - col);\\n\\n        for (int i = 1; i <= maxRight; i++) {\\n            if(board[row - i][col + i] == \\'Q\\') {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "prime-in-diagonal",
        "description": "You are given a 0-indexed two-dimensional integer array nums.\nReturn the largest prime number that lies on at least one of the diagonals of nums. In case, no prime is present on any of the diagonals, return 0.\nNote that:\n\nAn integer is prime if it is greater than 1 and has no positive integer divisors other than 1 and itself.\nAn integer val is on one of the diagonals of nums if there exists an integer i for which nums[i][i] = val or an i for which nums[i][nums.length - i - 1] = val.\n\n\nIn the above diagram, one diagonal is [1,5,9] and another diagonal is [3,5,7].",
        "examples": [
            "Input: nums = [[1,2,3],[5,6,7],[9,10,11]]\nOutput: 11\nExplanation: The numbers 1, 3, 6, 9, and 11 are the only numbers present on at least one of the diagonals. Since 11 is the largest prime, we return 11.",
            "Input: nums = [[1,2,3],[5,17,7],[9,11,10]]\nOutput: 17\nExplanation: The numbers 1, 3, 9, 10, and 17 are all present on at least one of the diagonals. 17 is the largest prime, so we return 17."
        ],
        "constrains": "1 <= nums.length <= 300\nnums.length == numsi.length\n1 <= nums[i][j]\u00a0<= 4*106",
        "release_time": 1683757802,
        "oracle_code": "class Solution {\n    public int diagonalPrime(int[][] nums) {\n        int n = nums.length;\n        int m = nums[0].length;\n        int maxim = 0;\n        for (int i = 0; i < n; i++) {\n                if (checkPrime(nums[i][i])) {\n                    maxim = Math.max(maxim, nums[i][i]);\n                } \n                if (checkPrime(nums[n-1-i][i])) {\n                    maxim = Math.max(maxim, nums[n - i - 1][i]);\n\n                }\n            \n        }\n        return maxim;\n    }\n    public boolean checkPrime(int k) {\n\n        int count = 0;\n        if (k == 1) {\n            return false;\n        }\n        for (int i = 1; i * i <= k; i++) {\n          if (k % i == 0) {\n              count += 2;\n          }\n      }\n      if (count == 2) {\n          return true; \n      } else {\n          return false;\n      }\n      \n    }\n\n}",
        "content": "**Must read if there is any doubt feel free to ask in comments**\\n\\nSomehow beginners face difficulty to understand the concept at first, but i will try my best to breakdown the question into simpler parts so that there would be ease to understand for beginners.\\n\\n\\n\\n**first we have to check prime number on the diagnol of the matrix.**\\n\\n**Step 1** -> so we make a function to check wether the given number is prime or not\\n\\n**Note** -> there are several functions to checkPrime as a naive/beginner you apply what you have learnt in fundamentals programming but it would not work\\n\\nBut here we have to create a checkPrime no. function that would be  optimized otherwise you will get **TLE** which is **Time Limit Exceeded** error.\\n\\n\\nTo find a prime number what we do firstly? -> find factors\\n\\ne.g\\n Num - > 12\\nfactors -> \\n\\n    **i** -------- **k**\\n    1 * 12 = 12\\n    2 * 6 = 12\\n    3 * 4 = 12\\n    4 * 3 = 12\\n    6 * 2 = 12\\n    12 * 1 = 12\\n\\nwe have total 6 factors \\n\\n**Trivial method: TLE occurs for this coz it isn\\'t optimized.**\\n\\nint count = 0;\\nif (k < 2) {\\n    return false;\\n}\\nfor (int i = 1; i < k; i++) {\\n    if (k % i == 0) {\\n        count++;        \\n    }\\n}\\nif (count == 2) {\\n    return true;\\n} else {\\n    return false;\\n}\\n\\nNow what if I say we do not need to iterate till k if we focus on the pattern we see that after i = 3 same numbers are repeating such as (4,3) despite (3,4) was there already , similarly (6,2) despite (2,6) is there etc...\\n\\nnow what we do is we would iterate our loop from **i to \\u221Ak** or we can write it as **i * i to k** also **so that our i iterate in the range between [1 - 3] so we have to take the square root of k. \\ni.e \\n1 * 12, 2 * 6, 3 * 4 and we get all the 6 factors till i = 3.**\\n\\n\\ne.g\\n Num - > 12\\nfactors -> 1, 2, 3, 4, 6, 12\\n**i ------- k**\\n1 * 12 = 12\\n2 * 6 = 12\\n3 * 4 = 12\\n\\n 4 * 3 = 12\\n 6 * 2 = 12\\n12 * 1 = 12\\n\\nfor (int i = 1; i * i <= k; i++) {\\n    if (k < 2) {\\n    return false;\\n    }\\n    if (k % i == 0) {\\n        count +=2; \\n//count + 2 because 1 * 12 we grab two factors from herethen why we need to go till 12.\\n\\n}\\nif (count == 2) {\\nreturn true\\n} else {\\nreturn false;\\n}\\n}\\n\\n**Now we have converted our problem in \\u221An time complexity.**\\n\\n\\n\\n\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int diagonalPrime(int[][] nums) {\\n        int n = nums.length;\\n        int m = nums[0].length;\\n        int maxim = 0;\\n        for (int i = 0; i < n; i++) {\\n                if (checkPrime(nums[i][i])) {\\n                    maxim = Math.max(maxim, nums[i][i]);\\n                } \\n                if (checkPrime(nums[n-1-i][i])) {\\n                    maxim = Math.max(maxim, nums[n - i - 1][i]);\\n\\n                }\\n            \\n        }\\n        return maxim;\\n    }\\n    public boolean checkPrime(int k) {\\n\\n        int count = 0;\\n        if (k == 1) {\\n            return false;\\n        }\\n        for (int i = 1; i * i <= k; i++) {\\n          if (k % i == 0) {\\n              count += 2;\\n          }\\n      }\\n      if (count == 2) {\\n          return true; \\n      } else {\\n          return false;\\n      }\\n      \\n    }\\n\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "largest-element-in-an-array-after-merge-operations",
        "description": "You are given a 0-indexed array nums consisting of positive integers.\nYou can do the following operation on the array any number of times:\n\nChoose an integer i such that 0 <= i < nums.length - 1 and nums[i] <= nums[i + 1]. Replace the element nums[i + 1] with nums[i] + nums[i + 1] and delete the element nums[i] from the array.\n\nReturn the value of the largest element that you can possibly obtain in the final array.",
        "examples": [
            "Input: nums = [2,3,7,9,3]\nOutput: 21\nExplanation: We can apply the following operations on the array:\n- Choose i = 0. The resulting array will be nums = [5,7,9,3].\n- Choose i = 1. The resulting array will be nums = [5,16,3].\n- Choose i = 0. The resulting array will be nums = [21,3].\nThe largest element in the final array is 21. It can be shown that we cannot obtain a larger element.",
            "Input: nums = [5,3,3]\nOutput: 11\nExplanation: We can do the following operations on the array:\n- Choose i = 1. The resulting array will be nums = [5,6].\n- Choose i = 0. The resulting array will be nums = [11].\nThere is only one element in the final array, which is 11."
        ],
        "constrains": "1 <= nums.length <= 105\n1 <= nums[i] <= 106",
        "release_time": 1690084837,
        "oracle_code": "class Solution {\n    public long maxArrayValue(int[] nums) {\n        if(nums.length==1)\n        {\n            return (long)nums[0];\n        }\n        if(nums.length==2)\n        {\n            return nums[0] <= nums[1] ? (long)(nums[0]+nums[1]) : (long)(Math.max(nums[0],nums[1]));\n        }\n        int size=nums.length;\n        long ans=0,dat=(long)nums[size-1];\n        for(int i=size-2;i>=0;i--)\n        {\n            long val=(long)nums[i];\n            if(val<=dat)\n            {\n                dat=dat+val;\n                if(dat>ans)\n                {\n                    ans=dat;\n                }\n            }\n            else\n            {\n                if(dat>ans)\n                {\n                    ans=dat;\n                }\n                dat=val;\n            }\n        }\n        return dat;\n    }\n}",
        "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public long maxArrayValue(int[] nums) {\\n        if(nums.length==1)\\n        {\\n            return (long)nums[0];\\n        }\\n        if(nums.length==2)\\n        {\\n            return nums[0] <= nums[1] ? (long)(nums[0]+nums[1]) : (long)(Math.max(nums[0],nums[1]));\\n        }\\n        int size=nums.length;\\n        long ans=0,dat=(long)nums[size-1];\\n        for(int i=size-2;i>=0;i--)\\n        {\\n            long val=(long)nums[i];\\n            if(val<=dat)\\n            {\\n                dat=dat+val;\\n                if(dat>ans)\\n                {\\n                    ans=dat;\\n                }\\n            }\\n            else\\n            {\\n                if(dat>ans)\\n                {\\n                    ans=dat;\\n                }\\n                dat=val;\\n            }\\n        }\\n        return dat;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "sort-even-and-odd-indices-independently",
        "description": "You are given a 0-indexed integer array nums. Rearrange the values of nums according to the following rules:\n\nSort the values at odd indices of nums in non-increasing order.\n\n\t\nFor example, if nums = [4,1,2,3] before this step, it becomes [4,3,2,1] after. The values at odd indices 1 and 3 are sorted in non-increasing order.\n\n\nSort the values at even indices of nums in non-decreasing order.\n\t\nFor example, if nums = [4,1,2,3] before this step, it becomes [2,1,4,3] after. The values at even indices 0 and 2 are sorted in non-decreasing order.\n\n\n\nReturn the array formed after rearranging the values of nums.",
        "examples": [
            "Input: nums = [4,1,2,3]\nOutput: [2,3,4,1]\nExplanation: \nFirst, we sort the values present at odd indices (1 and 3) in non-increasing order.\nSo, nums changes from [4,1,2,3] to [4,3,2,1].\nNext, we sort the values present at even indices (0 and 2) in non-decreasing order.\nSo, nums changes from [4,1,2,3] to [2,3,4,1].\nThus, the array formed after rearranging the values is [2,3,4,1].",
            "Input: nums = [2,1]\nOutput: [2,1]\nExplanation: \nSince there is exactly one odd index and one even index, no rearrangement of values takes place.\nThe resultant array formed is [2,1], which is the same as the initial array."
        ],
        "constrains": "1 <= nums.length <= 100\n1 <= nums[i] <= 100",
        "release_time": 1691504783,
        "oracle_code": "class Solution {\n    public int[] sortEvenOdd(int[] nums) {\n        int n = nums.length;\n        int[] even = new int[(n + 1) / 2];\n        int[] odd = new int[n / 2];\n        int iE = 0;\n        int iO = 0;\n\n        for(int i = 0; i < n; i++) {\n            if(i % 2 == 0) {\n                even[iE++] = nums[i];\n            } else {\n                odd[iO++] = nums[i];\n            }\n        }\n\n        Arrays.sort(even);\n        Arrays.sort(odd);\n        iE = 0;\n        iO = n / 2 - 1;\n\n        for(int i = 0; i < n; i++) {\n            if(i % 2 == 0) {\n                nums[i] = even[iE++];\n            } else {\n                nums[i] = odd[iO--];\n            }\n        }\n\n        return nums;\n    }\n}",
        "content": "# Approach\\nLet\\'s break down the approach and logic used in the provided solution:\\n\\n1. **Array Splitting:**\\n   The solution begins by splitting the input array `nums` into two separate arrays: one for even indices and one for odd indices. This is done to simplify the sorting process for each set of values.\\n\\n2. **Filling Even and Odd Arrays:**\\n   The loop iterates through the `nums` array. If the current index `i` is even, the corresponding value is added to the `even` array; if `i` is odd, the value is added to the `odd` array. This way, the even values are stored in one array and the odd values in another.\\n\\n3. **Sorting Arrays:**\\n   After filling the `even` and `odd` arrays, both arrays are sorted. The `Arrays.sort()` function is used to sort the elements in ascending order.\\n\\n4. **Reconstruction of `nums` Array:**\\n   After sorting the two arrays, the solution now reconstructs the `nums` array. It uses two index pointers `iE` and `iO` for the `even` and `odd` arrays, respectively.\\n\\n   The loop iterates through the `nums` array again, and if the current index `i` is even, it assigns the value from the `even` array using the `iE` pointer. Similarly, if `i` is odd, it assigns the value from the `odd` array using the `iO` pointer.\\n\\n   Notably, the values from the `odd` array are assigned in reverse order (`iO` decreases while traversing odd indices) because we sorted the odd values in non-increasing order.\\n\\n5. **Returning the Result:**\\n   Finally, the `nums` array is fully reconstructed according to the rules specified in the problem, and this sorted array is returned as the result.\\n\\nThe key idea here is to separate even and odd indices, sort the respective values independently, and then reconstruct the original array while following the given rules for sorting even and odd indices.\\n\\n# Complexity\\n- Time complexity: $$O(n * log(n))$$\\n\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int n = nums.length;\\n        int[] even = new int[(n + 1) / 2];\\n        int[] odd = new int[n / 2];\\n        int iE = 0;\\n        int iO = 0;\\n\\n        for(int i = 0; i < n; i++) {\\n            if(i % 2 == 0) {\\n                even[iE++] = nums[i];\\n            } else {\\n                odd[iO++] = nums[i];\\n            }\\n        }\\n\\n        Arrays.sort(even);\\n        Arrays.sort(odd);\\n        iE = 0;\\n        iO = n / 2 - 1;\\n\\n        for(int i = 0; i < n; i++) {\\n            if(i % 2 == 0) {\\n                nums[i] = even[iE++];\\n            } else {\\n                nums[i] = odd[iO--];\\n            }\\n        }\\n\\n        return nums;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "remove-palindromic-subsequences",
        "description": "You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.\nReturn the minimum number of steps to make the given string empty.\nA string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.\nA string is called palindrome if is one that reads the same backward as well as forward.",
        "examples": [
            "Input: s = \"ababa\"\nOutput: 1\nExplanation: s is already a palindrome, so its entirety can be removed in a single step.",
            "Input: s = \"abb\"\nOutput: 2\nExplanation: \"abb\" -> \"bb\" -> \"\". \nRemove palindromic subsequence \"a\" then \"bb\".",
            "Input: s = \"baabb\"\nOutput: 2\nExplanation: \"baabb\" -> \"b\" -> \"\". \nRemove palindromic subsequence \"baab\" then \"b\"."
        ],
        "constrains": "1 <= s.length <= 1000\ns[i] is either 'a' or 'b'.",
        "release_time": 1682445692,
        "oracle_code": "class Solution {\n    public int removePalindromeSub(String s) {\n\tif (s.equals(new StringBuilder(s).reverse().toString())) return 1;\n\treturn 2;\n    }\n\n    \n}",
        "content": "Logic\\n\\nIt\\'s quite easy to trip over this problem since it looks like we have to do all sorts of stuff to the string to get our answer. Actually, once you identify the main trick behind this question, it\\'s really quite a simple algorithm!\\nWhat is a Subsequence?\\n\\nThis is quite important to understand. Below are the main string sub-types (literally) that could be mentioned in a question.\\n\\n    Substring: A contiguous sequence of characters in a string.\\n    Subsequence: Any sequence of characters in a string where their relative order is maintained.\\n\\nIn particular, this question is asking to remove subsequences in the string. Therefore, we don\\'t actually care where these subsequences are as long as they maintain their original relative ordering in the string. For example, a subsequence of \"leetcode\" could be \"toe\".\\nThe Major Observation:\\n\\nWhat makes a subsequence a palindrome? Well of course it\\'s when the string is the same forwards and backwards. Is \"a\" a palindrome? Yes. Is \"aa\" a palindrome? Yes. What about \"aaaaaaaaa\"? Yes!\\n\\n    The main observation here is that any string consisting of the same letters is a palindrome. Since we\\'re working with subsequences and the only characters in the string are \\'a\\' and \\'b\\', we know we can get rid of all palindromes in at most 2 steps.\\n\\nimage\\n\\nWhat other cases are there? Well when could we ever remove a palindrome in just 1 step? When the input string itself is a palindrome of course.\\nAwesome. Now we\\'re ready to start coding!\\nAlgorithm:\\n\\nIf string is a palindrome: return 1\\nElse return 2\\n\\nCode\\n\\nIf you have any questions, suggestions or improvements, feel free to let me know. Thank you for reading!\\n\\n    Solution with custom isPalindrome() function (this is the recommended choice during an interview):\\n\\npublic int removePalindromeSub(String s) {\\n\\tif (isPalindrome(s)) return 1;\\n\\treturn 2;\\n}\\n\\nprivate boolean isPalindrome(String s) {\\n\\tint i = 0, n = s.length();\\n\\twhile (i <= n/2)\\n\\t\\tif (s.charAt(i) != s.charAt(n-1-i++)) return false;\\n\\treturn true;\\n}\\n\\n    Solution with StringBuilder:\\n\\npublic int removePalindromeSub(String s) {\\n\\tif (s.equals(new StringBuilder(s).reverse().toString())) return 1;\\n\\treturn 2;\\n}\\n\\nTime Complexity: O(n) where n is the length of the string.\\nSpace Complexity: O(1) (note that the StringBuilder solution takes O(n) space).\\n\\n# Code\\n```\\nclass Solution {\\n    public int removePalindromeSub(String s) {\\n\\tif (s.equals(new StringBuilder(s).reverse().toString())) return 1;\\n\\treturn 2;\\n    }\\n\\n    \\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "probability-of-a-two-boxes-having-the-same-number-of-distinct-balls",
        "description": "Given 2n balls of k distinct colors. You will be given an integer array balls of size k where balls[i] is the number of balls of color i.\nAll the balls will be shuffled uniformly at random, then we will distribute the first n balls to the first box and the remaining n balls to the other box (Please read the explanation of the second example carefully).\nPlease note that the two boxes are considered different. For example, if we have two balls of colors a and b, and two boxes [] and (), then the distribution [a] (b) is considered different than the distribution [b] (a) (Please read the explanation of the first example carefully).\nReturn the probability that the two boxes have the same number of distinct balls. Answers within 10-5 of the actual value will be accepted as correct.",
        "examples": [
            "Input: balls = [1,1]\nOutput: 1.00000\nExplanation: Only 2 ways to divide the balls equally:\n- A ball of color 1 to box 1 and a ball of color 2 to box 2\n- A ball of color 2 to box 1 and a ball of color 1 to box 2\nIn both ways, the number of distinct colors in each box is equal. The probability is 2/2 = 1",
            "Input: balls = [2,1,1]\nOutput: 0.66667\nExplanation: We have the set of balls [1, 1, 2, 3]\nThis set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equal probability (i.e. 1/12):\n[1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]\nAfter that, we add the first two balls to the first box and the second two balls to the second box.\nWe can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box.\nProbability is 8/12 = 0.66667",
            "Input: balls = [1,2,1,2]\nOutput: 0.60000\nExplanation: The set of balls is [1, 2, 2, 3, 4, 4]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box.\nProbability = 108 / 180 = 0.6"
        ],
        "constrains": "1 <= balls.length <= 8\n1 <= balls[i] <= 6\nsum(balls) is even.",
        "release_time": 1689418968,
        "oracle_code": "class Solution {\n    double possible = 0.0;\n    double valid = 0.0;\n    \n    public double getProbability(int[] balls) {\n        int[] first = new int[balls.length];\n        int[] second = new int[balls.length];\n        dfs(balls, first, second, 0, 0, 0);\n        return valid / possible;\n    }\n    \n    private void dfs(int[] balls, int[] first, int[] second, int num1, int num2, int idx) {\n        // finish all colors, check if this's a possible/valid distribution\n        if (idx == balls.length) {\n            // find one possible distribution\n            if (num1 == num2) {\n                // compute fake permutation\n                double distrib = permFake(first) * permFake(second);\n                possible += distrib;\n                \n                // find one valid distribution\n                if (unique(first) == unique(second)) {\n                    valid += distrib;\n                }\n            }\n            return;\n        }\n        \n        // distribute balls in current color to two bins\n        for (int b = 0; b <= balls[idx]; b++) {\n            first[idx] = b;\n            second[idx] = balls[idx] - b;\n            dfs (balls, first, second, num1 + first[idx], num2 + second[idx], idx + 1);\n        }\n    }\n    \n    // unique colors in \n    private int unique(int[] balls) {\n        int unique = 0;\n        for (int b: balls)\n            unique += b > 0 ? 1 : 0;\n        return unique;\n    }\n    \n    // return 1 / (b1!b2!b3!...bn!) \n    private double permFake(int[] balls) {\n        double ret = 1.0;\n        for (int b: balls)\n            ret /= factorial(b);\n        return ret;\n    }\n    \n    private int factorial(int n){\n        int ret = 1;\n        while (n > 0) {\n            ret *= n;\n            n--;\n        }\n        return ret;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    double possible = 0.0;\\n    double valid = 0.0;\\n    \\n    public double getProbability(int[] balls) {\\n        int[] first = new int[balls.length];\\n        int[] second = new int[balls.length];\\n        dfs(balls, first, second, 0, 0, 0);\\n        return valid / possible;\\n    }\\n    \\n    private void dfs(int[] balls, int[] first, int[] second, int num1, int num2, int idx) {\\n        // finish all colors, check if this\\'s a possible/valid distribution\\n        if (idx == balls.length) {\\n            // find one possible distribution\\n            if (num1 == num2) {\\n                // compute fake permutation\\n                double distrib = permFake(first) * permFake(second);\\n                possible += distrib;\\n                \\n                // find one valid distribution\\n                if (unique(first) == unique(second)) {\\n                    valid += distrib;\\n                }\\n            }\\n            return;\\n        }\\n        \\n        // distribute balls in current color to two bins\\n        for (int b = 0; b <= balls[idx]; b++) {\\n            first[idx] = b;\\n            second[idx] = balls[idx] - b;\\n            dfs (balls, first, second, num1 + first[idx], num2 + second[idx], idx + 1);\\n        }\\n    }\\n    \\n    // unique colors in \\n    private int unique(int[] balls) {\\n        int unique = 0;\\n        for (int b: balls)\\n            unique += b > 0 ? 1 : 0;\\n        return unique;\\n    }\\n    \\n    // return 1 / (b1!b2!b3!...bn!) \\n    private double permFake(int[] balls) {\\n        double ret = 1.0;\\n        for (int b: balls)\\n            ret /= factorial(b);\\n        return ret;\\n    }\\n    \\n    private int factorial(int n){\\n        int ret = 1;\\n        while (n > 0) {\\n            ret *= n;\\n            n--;\\n        }\\n        return ret;\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "minimum-adjacent-swaps-for-k-consecutive-ones",
        "description": "You are given an integer array, nums, and an integer k. nums comprises of only 0's and 1's. In one move, you can choose two adjacent indices and swap their values.\nReturn the minimum number of moves required so that nums has k consecutive 1's.",
        "examples": [
            "Input: nums = [1,0,0,1,0,1], k = 2\nOutput: 1\nExplanation: In 1 move, nums could be [1,0,0,0,1,1] and have 2 consecutive 1's.",
            "Input: nums = [1,0,0,0,0,0,1,1], k = 3\nOutput: 5\nExplanation: In 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,1,1,1].",
            "Input: nums = [1,1,0,1], k = 2\nOutput: 0\nExplanation: nums already has 2 consecutive 1's."
        ],
        "constrains": "1 <= nums.length <= 105\nnums[i] is 0 or 1.\n1 <= k <= sum(nums)",
        "release_time": 1609051531,
        "oracle_code": "class Solution {\n    public int minMoves(int[] a, int k) {\n\t\tint n = a.length;\n\t\tArrayList<Integer> oneInd = new ArrayList<>();\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tif (a[i] == 1)\n\t\t\t\toneInd.add(i);\n\t\tint prfsm[] = new int[oneInd.size()];\n\t\tfor (int i = 0; i < oneInd.size(); i++)\n\t\t\tprfsm[i] += oneInd.get(i) + (i == 0 ? 0 : prfsm[i - 1]);\n\t\tint ans = Integer.MAX_VALUE;\n\t\tint left = 0, right = k - 1;\n\t\twhile (right < oneInd.size()) {\n\t\t\tif (k % 2 == 1) {\n\t\t\t\tint medianInd = left + (k + 1) / 2 - 1;\n\t\t\t\tint rad = medianInd - left;\n\t\t\t\tint res = (prfsm[right] - prfsm[medianInd])\n\t\t\t\t\t\t- ((medianInd == 0 ? 0 : prfsm[medianInd - 1]) - (left == 0 ? 0 : prfsm[left - 1])) - rad * (rad + 1);\n\t\t\t\tans = Math.min(ans, res);\n\t\t\t} else {\n\t\t\t\tint medianInd = left + (k + 1) / 2 - 1;\n\t\t\t\tint rad = medianInd - left;\n\t\t\t\tint res = (prfsm[right] - prfsm[medianInd])\n\t\t\t\t\t\t- ((medianInd == 0 ? 0 : prfsm[medianInd - 1]) - (left == 0 ? 0 : prfsm[left - 1]))\n\t\t\t\t\t\t- oneInd.get(medianInd) - rad * (rad + 1) - (rad + 1);\n\t\t\t\tans = Math.min(ans, res);\n\t\t\t}\n\t\t\tleft++;\n\t\t\tright++;\n\t\t}\n\t\treturn ans;\n\t}\n}",
        "content": "Explaination with pictures: https://leetcode.com/problems/minimum-adjacent-swaps-for-k-consecutive-ones/discuss/987607/O(n)-explanation-with-picture\\n\\n```\\nclass Solution {\\n    public int minMoves(int[] a, int k) {\\n\\t\\tint n = a.length;\\n\\t\\tArrayList<Integer> oneInd = new ArrayList<>();\\n\\t\\tfor (int i = 0; i < n; i++)\\n\\t\\t\\tif (a[i] == 1)\\n\\t\\t\\t\\toneInd.add(i);\\n\\t\\tint prfsm[] = new int[oneInd.size()];\\n\\t\\tfor (int i = 0; i < oneInd.size(); i++)\\n\\t\\t\\tprfsm[i] += oneInd.get(i) + (i == 0 ? 0 : prfsm[i - 1]);\\n\\t\\tint ans = Integer.MAX_VALUE;\\n\\t\\tint left = 0, right = k - 1;\\n\\t\\twhile (right < oneInd.size()) {\\n\\t\\t\\tif (k % 2 == 1) {\\n\\t\\t\\t\\tint medianInd = left + (k + 1) / 2 - 1;\\n\\t\\t\\t\\tint rad = medianInd - left;\\n\\t\\t\\t\\tint res = (prfsm[right] - prfsm[medianInd])\\n\\t\\t\\t\\t\\t\\t- ((medianInd == 0 ? 0 : prfsm[medianInd - 1]) - (left == 0 ? 0 : prfsm[left - 1])) - rad * (rad + 1);\\n\\t\\t\\t\\tans = Math.min(ans, res);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tint medianInd = left + (k + 1) / 2 - 1;\\n\\t\\t\\t\\tint rad = medianInd - left;\\n\\t\\t\\t\\tint res = (prfsm[right] - prfsm[medianInd])\\n\\t\\t\\t\\t\\t\\t- ((medianInd == 0 ? 0 : prfsm[medianInd - 1]) - (left == 0 ? 0 : prfsm[left - 1]))\\n\\t\\t\\t\\t\\t\\t- oneInd.get(medianInd) - rad * (rad + 1) - (rad + 1);\\n\\t\\t\\t\\tans = Math.min(ans, res);\\n\\t\\t\\t}\\n\\t\\t\\tleft++;\\n\\t\\t\\tright++;\\n\\t\\t}\\n\\t\\treturn ans;\\n\\t}\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "find-greatest-common-divisor-of-array",
        "description": "Given an integer array nums, return the greatest common divisor of the smallest number and largest number in nums.\nThe greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.",
        "examples": [
            "Input: nums = [2,5,6,9,10]\nOutput: 2\nExplanation:\nThe smallest number in nums is 2.\nThe largest number in nums is 10.\nThe greatest common divisor of 2 and 10 is 2.",
            "Input: nums = [7,5,6,8,3]\nOutput: 1\nExplanation:\nThe smallest number in nums is 3.\nThe largest number in nums is 8.\nThe greatest common divisor of 3 and 8 is 1.",
            "Input: nums = [3,3]\nOutput: 3\nExplanation:\nThe smallest number in nums is 3.\nThe largest number in nums is 3.\nThe greatest common divisor of 3 and 3 is 3."
        ],
        "constrains": "2 <= nums.length <= 1000\n1 <= nums[i] <= 1000",
        "release_time": 1684308599,
        "oracle_code": "class Solution {\n    public int findGCD(int[] nums) {\n        Arrays.sort(nums);\n        int GCD = 1;\n        for(int i = 1; i <= nums[0]; i++) {\n            if(nums[0] % i == 0 && nums[nums.length - 1] % i == 0) {\n                GCD = i;\n            }\n        }\n        return GCD;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findGCD(int[] nums) {\\n        Arrays.sort(nums);\\n        int GCD = 1;\\n        for(int i = 1; i <= nums[0]; i++) {\\n            if(nums[0] % i == 0 && nums[nums.length - 1] % i == 0) {\\n                GCD = i;\\n            }\\n        }\\n        return GCD;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "continuous-subarray-sum",
        "description": "Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.\nA good subarray is a subarray where:\n\nits length is at least two, and\nthe sum of the elements of the subarray is a multiple of k.\n\nNote that:\n\nA subarray is a contiguous part of the array.\nAn integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.",
        "examples": [
            "Input: nums = [23,2,4,6,7], k = 6\nOutput: true\nExplanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.",
            "Input: nums = [23,2,6,4,7], k = 6\nOutput: true\nExplanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.\n42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.",
            "Input: nums = [23,2,6,4,7], k = 13\nOutput: false"
        ],
        "constrains": "1 <= nums.length <= 105\n0 <= nums[i] <= 109\n0 <= sum(nums[i]) <= 231 - 1\n1 <= k <= 231 - 1",
        "release_time": 1666813455,
        "oracle_code": "class Solution {\n    public boolean checkSubarraySum(int[] nums, int k) {      \n        Map<Integer, Integer> map = new HashMap<>();\n        int sum = 0;\n        for (int i = 0; i < nums.length; i++) {\n            sum += nums[i];\n            sum %= k; \n            if (sum == 0 && i > 0) return true;\n            if (map.containsKey(sum) && i - map.get(sum) > 1) return true;\n            \n            if(!map.containsKey(sum))map.put(sum, i); \n                        \n        }\n        return false;\n    }\n}",
        "content": "```\\nclass Solution {\\n    public boolean checkSubarraySum(int[] nums, int k) {      \\n        Map<Integer, Integer> map = new HashMap<>();\\n        int sum = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            sum += nums[i];\\n            sum %= k; \\n            if (sum == 0 && i > 0) return true;\\n            if (map.containsKey(sum) && i - map.get(sum) > 1) return true;\\n            \\n            if(!map.containsKey(sum))map.put(sum, i); \\n                        \\n        }\\n        return false;\\n    }\\n}\\n\\n\\n\\n```",
        "level": "medium"
    },
    {
        "slug": "reduction-operations-to-make-the-array-elements-equal",
        "description": "Given an integer array nums, your goal is to make all elements in nums equal. To complete one operation, follow these steps:\n\nFind the largest value in nums. Let its index be i (0-indexed) and its value be largest. If there are multiple elements with the largest value, pick the smallest i.\nFind the next largest value in nums strictly smaller than largest. Let its value be nextLargest.\nReduce nums[i] to nextLargest.\n\nReturn the number of operations to make all elements in nums equal.",
        "examples": [
            "Input: nums = [5,1,3]\nOutput: 3\nExplanation:\u00a0It takes 3 operations to make all elements in nums equal:\n1. largest = 5 at index 0. nextLargest = 3. Reduce nums[0] to 3. nums = [3,1,3].\n2. largest = 3 at index 0. nextLargest = 1. Reduce nums[0] to 1. nums = [1,1,3].\n3. largest = 3 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1].",
            "Input: nums = [1,1,1]\nOutput: 0\nExplanation:\u00a0All elements in nums are already equal.",
            "Input: nums = [1,1,2,2,3]\nOutput: 4\nExplanation:\u00a0It takes 4 operations to make all elements in nums equal:\n1. largest = 3 at index 4. nextLargest = 2. Reduce nums[4] to 2. nums = [1,1,2,2,2].\n2. largest = 2 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1,2,2].\n3. largest = 2 at index 3. nextLargest = 1. Reduce nums[3] to 1. nums = [1,1,1,1,2].\n4. largest = 2 at index 4. nextLargest = 1. Reduce nums[4] to 1. nums = [1,1,1,1,1]."
        ],
        "constrains": "1 <= nums.length <= 5 * 104\n1 <= nums[i] <= 5 * 104",
        "release_time": 1679145144,
        "oracle_code": "class Solution {\n    public int reductionOperations(int[] nums) {\n        Arrays.sort(nums);\n        HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();\n        int x = 0;\n        for(Integer num : nums){\n            if(map.containsKey(num)){\n                continue;\n            }\n            map.put(num,x++);\n        }\n        \n        int count = 0;\n        for(int i = 1;i<nums.length;i++){\n            if(nums[i]>nums[0]){\n                count+=map.get(nums[i]);\n            }\n        }\n        return count;\n    }\n}",
        "content": "Please **UPVOTE** if you like my solution!\\n\\n```\\nclass Solution {\\n    public int reductionOperations(int[] nums) {\\n        Arrays.sort(nums);\\n        HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();\\n        int x = 0;\\n        for(Integer num : nums){\\n            if(map.containsKey(num)){\\n                continue;\\n            }\\n            map.put(num,x++);\\n        }\\n        \\n        int count = 0;\\n        for(int i = 1;i<nums.length;i++){\\n            if(nums[i]>nums[0]){\\n                count+=map.get(nums[i]);\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "count-odd-numbers-in-an-interval-range",
        "description": "Given two non-negative integers low and high. Return the count of odd numbers between low and high\u00a0(inclusive).",
        "examples": [
            "Input: low = 3, high = 7\r\nOutput: 3\r\nExplanation: The odd numbers between 3 and 7 are [3,5,7].",
            "Input: low = 8, high = 10\r\nOutput: 1\r\nExplanation: The odd numbers between 8 and 10 are [9]."
        ],
        "constrains": "0 <= low <= high\u00a0<= 10^9",
        "release_time": 1683277667,
        "oracle_code": "class Solution {\n    public int countOdds(int low, int high) {\n        if(low%2==0 && high%2==0)\n            return (high-low)/2;\n        else\n            return (high-low)/2+1;\n    }\n}",
        "content": "# Intuition\\nAt first i thought to execute it with using loops.\\n\\n# Approach\\nThere are four possible ways to get no.of odd numbers from low and high limits.\\nWhen both numbers are even print half of its difference else by adding one to it.\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int countOdds(int low, int high) {\\n        if(low%2==0 && high%2==0)\\n            return (high-low)/2;\\n        else\\n            return (high-low)/2+1;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "longest-valid-parentheses",
        "description": "Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.",
        "examples": [
            "Input: s = \"(()\"\nOutput: 2\nExplanation: The longest valid parentheses substring is \"()\".",
            "Input: s = \")()())\"\nOutput: 4\nExplanation: The longest valid parentheses substring is \"()()\".",
            "Input: s = \"\"\nOutput: 0"
        ],
        "constrains": "0 <= s.length <= 3 * 104\ns[i] is '(', or ')'.",
        "release_time": 1688495250,
        "oracle_code": "class Solution {\n    public int longestValidParentheses(String s) {\n        Stack<Integer> st = new Stack<>();\n        st.push(-1);\n        int n = 0;\n        for(int i = 0; i < s.length(); i++)\n        {\n            if(s.charAt(i) == '(')\n                st.push(i);\n            else if(s.charAt(i) == ')')\n            {\n                st.pop();\n                if(st.empty())\n                    st.push(i);\n                else\n                    n = Math.max(n, i - st.peek());\n            }\n        }\n        return n;\n    }\n}",
        "content": "\\n# Code\\n```\\nclass Solution {\\n    public int longestValidParentheses(String s) {\\n        Stack<Integer> st = new Stack<>();\\n        st.push(-1);\\n        int n = 0;\\n        for(int i = 0; i < s.length(); i++)\\n        {\\n            if(s.charAt(i) == \\'(\\')\\n                st.push(i);\\n            else if(s.charAt(i) == \\')\\')\\n            {\\n                st.pop();\\n                if(st.empty())\\n                    st.push(i);\\n                else\\n                    n = Math.max(n, i - st.peek());\\n            }\\n        }\\n        return n;\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "word-search",
        "description": "Given an m x n grid of characters board and a string word, return true if word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.",
        "examples": [
            "Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\nOutput: true",
            "Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\nOutput: true",
            "Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\nOutput: false"
        ],
        "constrains": "m == board.length\nn = board[i].length\n1 <= m, n <= 6\n1 <= word.length <= 15\nboard and word consists of only lowercase and uppercase English letters.",
        "release_time": 1689140219,
        "oracle_code": "class Solution {\n    private boolean visited[][];\n    public boolean exist(char[][] board, String word) {\n        int m=board.length, n=board[0].length;\n        visited=new boolean[m][n];\n        for(int i=0;i<m;i++){\n            for(int j=0;j<n;j++){\n                if(board[i][j]==word.charAt(0)&&dfs(board,i,j,0,word)) return true;\n            }\n        }\n        return false;\n\n        \n    }\n    public boolean dfs(char[][] board,int i,int j,int index,String word){\n        if(index==word.length()) return true;\n        if(i<0||j<0||i>=board.length||j>=board[0].length||board[i][j]!=word.charAt(index)||visited[i][j]){\n            return false;\n        }\n        visited[i][j]=true;\n        boolean found= dfs(board,i+1,j,index+1,word)||dfs(board,i-1,j,index+1,word)||dfs(board,i,j+1,index+1,word)||dfs(board,i,j-1,index+1,word);\n        visited[i][j]  = false;\n        return found;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(m*n)\\n- Space complexity:\\nO(m*n)\\n# Code\\n```\\nclass Solution {\\n    private boolean visited[][];\\n    public boolean exist(char[][] board, String word) {\\n        int m=board.length, n=board[0].length;\\n        visited=new boolean[m][n];\\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n;j++){\\n                if(board[i][j]==word.charAt(0)&&dfs(board,i,j,0,word)) return true;\\n            }\\n        }\\n        return false;\\n\\n        \\n    }\\n    public boolean dfs(char[][] board,int i,int j,int index,String word){\\n        if(index==word.length()) return true;\\n        if(i<0||j<0||i>=board.length||j>=board[0].length||board[i][j]!=word.charAt(index)||visited[i][j]){\\n            return false;\\n        }\\n        visited[i][j]=true;\\n        boolean found= dfs(board,i+1,j,index+1,word)||dfs(board,i-1,j,index+1,word)||dfs(board,i,j+1,index+1,word)||dfs(board,i,j-1,index+1,word);\\n        visited[i][j]  = false;\\n        return found;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "gas-station",
        "description": "There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\nYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.\nGiven two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique",
        "examples": [
            "Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\nOutput: 3\nExplanation:\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore, return 3 as the starting index.",
            "Input: gas = [2,3,4], cost = [3,4,3]\nOutput: -1\nExplanation:\nYou can't start at station 0 or 1, as there is not enough gas to travel to the next station.\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\nTherefore, you can't travel around the circuit once no matter where you start."
        ],
        "constrains": "n == gas.length == cost.length\n1 <= n <= 105\n0 <= gas[i], cost[i] <= 104",
        "release_time": 1688419594,
        "oracle_code": "class Solution {\n    public int canCompleteCircuit(int[] gas, int[] cost) {\n        int extraFuel=0, reqiuredFuel=0,start=0;\n        for(int i=0;i<gas.length;i++){\n            extraFuel+=(gas[i]-cost[i]);\n            if(extraFuel<0){\n                start=i+1;\n                reqiuredFuel+=extraFuel;\n                extraFuel=0;\n            }\n        }\n        if(reqiuredFuel+extraFuel>=0){\n            return start;\n        }\n        return -1;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int canCompleteCircuit(int[] gas, int[] cost) {\\n        int extraFuel=0, reqiuredFuel=0,start=0;\\n        for(int i=0;i<gas.length;i++){\\n            extraFuel+=(gas[i]-cost[i]);\\n            if(extraFuel<0){\\n                start=i+1;\\n                reqiuredFuel+=extraFuel;\\n                extraFuel=0;\\n            }\\n        }\\n        if(reqiuredFuel+extraFuel>=0){\\n            return start;\\n        }\\n        return -1;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "number-of-unequal-triplets-in-array",
        "description": "You are given a 0-indexed array of positive integers nums. Find the number of triplets (i, j, k) that meet the following conditions:\n\n0 <= i < j < k < nums.length\nnums[i], nums[j], and nums[k] are pairwise distinct.\n\t\nIn other words, nums[i] != nums[j], nums[i] != nums[k], and nums[j] != nums[k].\n\n\n\nReturn the number of triplets that meet the conditions.",
        "examples": [
            "Input: nums = [4,4,2,4,3]\nOutput: 3\nExplanation: The following triplets meet the conditions:\n- (0, 2, 4) because 4 != 2 != 3\n- (1, 2, 4) because 4 != 2 != 3\n- (2, 3, 4) because 2 != 4 != 3\nSince there are 3 triplets, we return 3.\nNote that (2, 0, 4) is not a valid triplet because 2 > 0.",
            "Input: nums = [1,1,1,1,1]\nOutput: 0\nExplanation: No triplets meet the conditions so we return 0."
        ],
        "constrains": "3 <= nums.length <= 100\n1 <= nums[i] <= 1000",
        "release_time": 1668916901,
        "oracle_code": "class Solution {\n    public int unequalTriplets(int[] nums) {\n        int ans=0;\n        for(int i=0; i < nums.length; i++)\n            for(int j=i+1; j < nums.length; j++)\n                for(int k=j+1; k < nums.length; k++)\n                    if(nums[i] != nums[j] && nums[i] != nums[k] && nums[j] != nums[k])\n                        ans++;\n        return ans;\n    }\n}",
        "content": "* *Time Complexity :* **O(n^3)**\\n* *Space Complexity :* **O(1)**\\n##### Java\\n```\\nclass Solution {\\n    public int unequalTriplets(int[] nums) {\\n        int ans=0;\\n        for(int i=0; i < nums.length; i++)\\n            for(int j=i+1; j < nums.length; j++)\\n                for(int k=j+1; k < nums.length; k++)\\n                    if(nums[i] != nums[j] && nums[i] != nums[k] && nums[j] != nums[k])\\n                        ans++;\\n        return ans;\\n    }\\n}\\n```\\n##### C++\\n```\\nclass Solution {\\npublic:\\n    int unequalTriplets(vector<int>& nums) {\\n        int ans = 0;\\n        for(int i = 0; i < nums.size(); i++)\\n            for(int j = i + 1; j < nums.size(); j++)\\n                for(int k = j + 1; k < nums.size(); k++)\\n                    if(nums[i] != nums[j] && nums[i] != nums[k] && nums[j] != nums[k]) \\n\\t\\t\\t\\t\\t\\tans++;\\n        return ans;\\n    }\\n};\\n```\\n##### Python\\n```\\nclass Solution(object):\\n    def unequalTriplets(self, nums):\\n        ans = 0\\n        for i in range(len(nums)):\\n            for j in range(i+1, len(nums)):\\n                for k in range(j+1, len(nums)):\\n                    if nums[i] != nums[j] and nums[i] != nums[k] and nums[j] != nums[k]:\\n                        ans += 1\\n        return ans\\n```",
        "level": "easy"
    },
    {
        "slug": "delete-columns-to-make-sorted",
        "description": "You are given an array of n strings strs, all of the same length.\nThe strings can be arranged such that there is one on each line, making a grid.\n\nFor example, strs = [\"abc\", \"bce\", \"cae\"] can be arranged as follows:\n\n\nabc\nbce\ncae\n\nYou want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 ('a', 'b', 'c') and 2 ('c', 'e', 'e') are sorted, while column 1 ('b', 'c', 'a') is not, so you would delete column 1.\nReturn the number of columns that you will delete.",
        "examples": [
            "Input: strs = [\"cba\",\"daf\",\"ghi\"]\nOutput: 1\nExplanation: The grid looks as follows:\n  cba\n  daf\n  ghi\nColumns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.",
            "Input: strs = [\"a\",\"b\"]\nOutput: 0\nExplanation: The grid looks as follows:\n  a\n  b\nColumn 0 is the only column and is sorted, so you will not delete any columns.",
            "Input: strs = [\"zyx\",\"wvu\",\"tsr\"]\nOutput: 3\nExplanation: The grid looks as follows:\n  zyx\n  wvu\n  tsr\nAll 3 columns are not sorted, so you will delete all 3."
        ],
        "constrains": "n == strs.length\n1 <= n <= 100\n1 <= strs[i].length <= 1000\nstrs[i] consists of lowercase English letters.",
        "release_time": 1672726665,
        "oracle_code": "class Solution {\n    public int minDeletionSize(String[] strs) {\n        int count = 0;\n        for(int i=0;i<strs[0].length();i++) {\n        \tint temp = 0;\n        \tfor(int j=0;j<strs.length;j++) {\n        \t\tint a = strs[j].charAt(i);\n        \t\tif(a>=temp) {\n        \t\t\ttemp = a;\n        \t\t}else {\n        \t\t\tcount++;\n        \t\t\tbreak;\n        \t\t}\n        \t}\n        }\n        return count;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nBased on the Aschii values we can justify wether it is sorted or not.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nHere i have created a count varibale for storing the answer value and a for loop for each coloum and then declared a temp variable which stores the temperory value of previous aschi value of the character, with this \\'temp\\' i have chechked whether the present character value is greater then the previous one. In case of failure the loop is terminated and the count value is increased.\\n# Complexity\\n- Time complexity: 5 ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 42.8MB\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0;\\n        for(int i=0;i<strs[0].length();i++) {\\n        \\tint temp = 0;\\n        \\tfor(int j=0;j<strs.length;j++) {\\n        \\t\\tint a = strs[j].charAt(i);\\n        \\t\\tif(a>=temp) {\\n        \\t\\t\\ttemp = a;\\n        \\t\\t}else {\\n        \\t\\t\\tcount++;\\n        \\t\\t\\tbreak;\\n        \\t\\t}\\n        \\t}\\n        }\\n        return count;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "employee-importance",
        "description": "You have a data structure of employee information, including the employee's unique ID, importance value, and direct subordinates' IDs.\nYou are given an array of employees employees where:\n\nemployees[i].id is the ID of the ith employee.\nemployees[i].importance is the importance value of the ith employee.\nemployees[i].subordinates is a list of the IDs of the direct subordinates of the ith employee.\n\nGiven an integer id that represents an employee's ID, return the total importance value of this employee and all their direct and indirect subordinates.",
        "examples": [
            "Input: employees = [[1,5,[2,3]],[2,3,[]],[3,3,[]]], id = 1\nOutput: 11\nExplanation: Employee 1 has an importance value of 5 and has two direct subordinates: employee 2 and employee 3.\nThey both have an importance value of 3.\nThus, the total importance value of employee 1 is 5 + 3 + 3 = 11.",
            "Input: employees = [[1,2,[5]],[5,-3,[]]], id = 5\nOutput: -3\nExplanation: Employee 5 has an importance value of -3 and has no direct subordinates.\nThus, the total importance value of employee 5 is -3."
        ],
        "constrains": "1 <= employees.length <= 2000\n1 <= employees[i].id <= 2000\nAll employees[i].id are unique.\n-100 <= employees[i].importance <= 100\nOne employee has at most one direct leader and may have several subordinates.\nThe IDs in employees[i].subordinates are valid IDs.",
        "release_time": 1655279531,
        "oracle_code": "class Solution {\n    public int getImportance(List<Employee> employees, int id) {\n        Map<Integer, Employee> inputMap = new HashMap<>();\n\t\t// Construct HashMap as getting the employee from id is difficult in a list\n\t\tfor(Employee e : employees) {\n\t\t\tinputMap.put(e.id, e);\n\t\t}\n\t\treturn helper(inputMap, id);\n\t}\n\n\tprivate static int helper(Map<Integer, Employee> inputMap, int id) {\n\t\t//Get the importance of the employee\n\t\tint imp = inputMap.get(id).importance;\n\t\t\n\t\t//Add importance of subordinates to employee importance\n\t\tfor(int subId : inputMap.get(id).subordinates) {\n\t\t\timp += helper(inputMap, subId);\n\t\t}\n\t\t\n\t\treturn imp;\n\t}\n}",
        "content": "```\\nclass Solution {\\n    public int getImportance(List<Employee> employees, int id) {\\n        Map<Integer, Employee> inputMap = new HashMap<>();\\n\\t\\t// Construct HashMap as getting the employee from id is difficult in a list\\n\\t\\tfor(Employee e : employees) {\\n\\t\\t\\tinputMap.put(e.id, e);\\n\\t\\t}\\n\\t\\treturn helper(inputMap, id);\\n\\t}\\n\\n\\tprivate static int helper(Map<Integer, Employee> inputMap, int id) {\\n\\t\\t//Get the importance of the employee\\n\\t\\tint imp = inputMap.get(id).importance;\\n\\t\\t\\n\\t\\t//Add importance of subordinates to employee importance\\n\\t\\tfor(int subId : inputMap.get(id).subordinates) {\\n\\t\\t\\timp += helper(inputMap, subId);\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn imp;\\n\\t}\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "remove-k-digits",
        "description": "Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.",
        "examples": [
            "Input: num = \"1432219\", k = 3\nOutput: \"1219\"\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.",
            "Input: num = \"10200\", k = 1\nOutput: \"200\"\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.",
            "Input: num = \"10\", k = 2\nOutput: \"0\"\nExplanation: Remove all the digits from the number and it is left with nothing which is 0."
        ],
        "constrains": "1 <= k <= num.length <= 105\nnum consists of only digits.\nnum does not have any leading zeros except for the zero itself.",
        "release_time": 1680704468,
        "oracle_code": "class Solution {\n    public String removeKdigits(String num, int k) {\n        Stack<Character> st = new Stack<>();\n        for(Character ch : num.toCharArray()) {\n            while(!st.isEmpty() && k > 0 && ch < st.peek()) {\n                st.pop();\n                k--;\n            }\n\n            if(!st.isEmpty() || ch != '0') {\n                st.push(ch);\n            }\n        }\n\n        // This is a special edge case --> 1 2 3 4\n        while(!st.isEmpty() && k-- > 0) {\n            st.pop();\n        }\n        if(st.isEmpty()) return \"0\";\n        \n\n        // Store the ans -->\n        String ans = \"\";\n        while(!st.isEmpty()) {\n            ans = st.peek() + ans;\n            st.pop();\n        }\n        return ans;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n# Code\\n```\\nclass Solution {\\n    public String removeKdigits(String num, int k) {\\n        Stack<Character> st = new Stack<>();\\n        for(Character ch : num.toCharArray()) {\\n            while(!st.isEmpty() && k > 0 && ch < st.peek()) {\\n                st.pop();\\n                k--;\\n            }\\n\\n            if(!st.isEmpty() || ch != \\'0\\') {\\n                st.push(ch);\\n            }\\n        }\\n\\n        // This is a special edge case --> 1 2 3 4\\n        while(!st.isEmpty() && k-- > 0) {\\n            st.pop();\\n        }\\n        if(st.isEmpty()) return \"0\";\\n        \\n\\n        // Store the ans -->\\n        String ans = \"\";\\n        while(!st.isEmpty()) {\\n            ans = st.peek() + ans;\\n            st.pop();\\n        }\\n        return ans;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "longest-string-chain",
        "description": "You are given an array of words where each word consists of lowercase English letters.\nwordA is a predecessor of wordB if and only if we can insert exactly one letter anywhere in wordA without changing the order of the other characters to make it equal to wordB.\n\nFor example, \"abc\" is a predecessor of \"abac\", while \"cba\" is not a predecessor of \"bcad\".\n\nA word chain is a sequence of words [word1, word2, ..., wordk] with k >= 1, where word1 is a predecessor of word2, word2 is a predecessor of word3, and so on. A single word is trivially a word chain with k == 1.\nReturn the length of the longest possible word chain with words chosen from the given list of words.",
        "examples": [
            "Input: words = [\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]\nOutput: 4\nExplanation: One of the longest word chains is [\"a\",\"ba\",\"bda\",\"bdca\"].",
            "Input: words = [\"xbc\",\"pcxbcf\",\"xb\",\"cxbc\",\"pcxbc\"]\nOutput: 5\nExplanation: All the words can be put in a word chain [\"xb\", \"xbc\", \"cxbc\", \"pcxbc\", \"pcxbcf\"].",
            "Input: words = [\"abcd\",\"dbqca\"]\nOutput: 1\nExplanation: The trivial word chain [\"abcd\"] is one of the longest word chains.\n[\"abcd\",\"dbqca\"] is not a valid word chain because the ordering of the letters is changed."
        ],
        "constrains": "1 <= words.length <= 1000\n1 <= words[i].length <= 16\nwords[i] only consists of lowercase English letters.",
        "release_time": 1682338998,
        "oracle_code": "class Solution {\n    public int longestStrChain(String[] words) {\n        // Sort the array in increasing order of word length\n        Arrays.sort(words, (a, b) -> a.length() - b.length());\n        \n        // Create a map to store the longest chain ending at each word\n        Map<String, Integer> dp = new HashMap<>();\n        int maxChainLength = 1;\n        \n        // Iterate through each word in the array\n        for (String word : words) {\n            // Initialize the longest chain for the current word as 1\n            int longestChain = 1;\n            // Generate all possible predecessor words of the current word\n            for (int i = 0; i < word.length(); i++) {\n                StringBuilder sb = new StringBuilder(word);\n                sb.deleteCharAt(i);\n                String predecessor = sb.toString();\n                // If the predecessor word is in the map, update the longest chain for the current word\n                if (dp.containsKey(predecessor)) {\n                    longestChain = Math.max(longestChain, dp.get(predecessor) + 1);\n                }\n            }\n            // Update the map with the longest chain ending at the current word\n            dp.put(word, longestChain);\n            // Update the maximum chain length seen so far\n            maxChainLength = Math.max(maxChainLength, longestChain);\n        }\n        \n        return maxChainLength;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nProblem involves finding the longest chain of words such that each word is the predecessor of the next one. A word is considered to be a predecessor of another word if a single character can be inserted into it to obtain the other word. One way to solve the problem is to use dynamic programming. We can sort the words in ascending order of length and for each word, we can find all the predecessors that have already been processed and update the length of the longest chain that ends with the current word.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Sort the words in increasing order of length.\\n2. Create a HashMap to store the length of the longest chain ending with each word.\\n3. For each word, iterate over all the possible predecessors and update the length of the\\nlongest chain ending with the current word.\\n4. Return the maximum length of any chain.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the solution is O(n * L^2) where n is the number of words in the list and L is the maximum length of a word. This is because for each word, we need to iterate over all its possible predecessors and the length of the predecessors can be at most L.\\n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of the solution is O(n) because we need to store the length of the longest chain ending with each word in a HashMap.\\n# Code\\n```\\nclass Solution {\\n    public int longestStrChain(String[] words) {\\n        // Sort the array in increasing order of word length\\n        Arrays.sort(words, (a, b) -> a.length() - b.length());\\n        \\n        // Create a map to store the longest chain ending at each word\\n        Map<String, Integer> dp = new HashMap<>();\\n        int maxChainLength = 1;\\n        \\n        // Iterate through each word in the array\\n        for (String word : words) {\\n            // Initialize the longest chain for the current word as 1\\n            int longestChain = 1;\\n            // Generate all possible predecessor words of the current word\\n            for (int i = 0; i < word.length(); i++) {\\n                StringBuilder sb = new StringBuilder(word);\\n                sb.deleteCharAt(i);\\n                String predecessor = sb.toString();\\n                // If the predecessor word is in the map, update the longest chain for the current word\\n                if (dp.containsKey(predecessor)) {\\n                    longestChain = Math.max(longestChain, dp.get(predecessor) + 1);\\n                }\\n            }\\n            // Update the map with the longest chain ending at the current word\\n            dp.put(word, longestChain);\\n            // Update the maximum chain length seen so far\\n            maxChainLength = Math.max(maxChainLength, longestChain);\\n        }\\n        \\n        return maxChainLength;\\n    }\\n}\\n\\n```",
        "level": "medium"
    },
    {
        "slug": "maximum-product-difference-between-two-pairs",
        "description": "The product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d).\n\nFor example, the product difference between (5, 6) and (2, 7) is (5 * 6) - (2 * 7) = 16.\n\nGiven an integer array nums, choose four distinct indices w, x, y, and z such that the product difference between pairs (nums[w], nums[x]) and (nums[y], nums[z]) is maximized.\nReturn the maximum such product difference.",
        "examples": [
            "Input: nums = [5,6,2,7,4]\r\nOutput: 34\r\nExplanation: We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4).\r\nThe product difference is (6 * 7) - (2 * 4) = 34.",
            "Input: nums = [4,2,5,9,7,4,8]\r\nOutput: 64\r\nExplanation: We can choose indices 3 and 6 for the first pair (9, 8) and indices 1 and 5 for the second pair (2, 4).\r\nThe product difference is (9 * 8) - (2 * 4) = 64."
        ],
        "constrains": "4 <= nums.length <= 104\n1 <= nums[i] <= 104",
        "release_time": 1683517149,
        "oracle_code": "class Solution {\n    public int maxProductDifference(int[] nums) {\n        Arrays.sort(nums);\n        int n =nums.length;\n    return nums[n-1]*nums[n-2]-nums[0]*nums[1];\n    }\n}",
        "content": "\\n\\n#  Superb Logic in java\\n```\\nclass Solution {\\n    public int maxProductDifference(int[] nums) {\\n        Arrays.sort(nums);\\n        int n =nums.length;\\n    return nums[n-1]*nums[n-2]-nums[0]*nums[1];\\n    }\\n}\\n```\\n# please upvote me it would encourages me so much",
        "level": "easy"
    },
    {
        "slug": "check-if-binary-string-has-at-most-one-segment-of-ones",
        "description": "Given a binary string s \u200b\u200b\u200b\u200b\u200bwithout leading zeros, return true\u200b\u200b\u200b if s contains at most one contiguous segment of ones. Otherwise, return false.",
        "examples": [
            "Input: s = \"1001\"\nOutput: false\nExplanation: The ones do not form a contiguous segment.",
            "Input: s = \"110\"\nOutput: true"
        ],
        "constrains": "1 <= s.length <= 100\ns[i]\u200b\u200b\u200b\u200b is either '0' or '1'.\ns[0] is\u00a0'1'.",
        "release_time": 1691762677,
        "oracle_code": "class Solution {\n    public boolean checkOnesSegment(String s) {\n        int count=0;\n       int pos=0;\n       while(s.charAt(pos)!='1'){\n              pos++;\n            if(pos==s.length()){\n                return true;\n            }\n          }\n       \n       for(int i=pos;i<s.length();i++){\n          if(s.charAt(i)=='0'){\n              count++;\n          }\n          else if(count>0&&s.charAt(i)=='1'){\n              return false;\n          }\n       } \n       return true;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean checkOnesSegment(String s) {\\n        int count=0;\\n       int pos=0;\\n       while(s.charAt(pos)!=\\'1\\'){\\n              pos++;\\n            if(pos==s.length()){\\n                return true;\\n            }\\n          }\\n       \\n       for(int i=pos;i<s.length();i++){\\n          if(s.charAt(i)==\\'0\\'){\\n              count++;\\n          }\\n          else if(count>0&&s.charAt(i)==\\'1\\'){\\n              return false;\\n          }\\n       } \\n       return true;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "construct-binary-tree-from-inorder-and-postorder-traversal",
        "description": "Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.",
        "examples": [
            "Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\nOutput: [3,9,20,null,null,15,7]",
            "Input: inorder = [-1], postorder = [-1]\nOutput: [-1]"
        ],
        "constrains": "1 <= inorder.length <= 3000\npostorder.length == inorder.length\n-3000 <= inorder[i], postorder[i] <= 3000\ninorder and postorder consist of unique values.\nEach value of postorder also appears in inorder.\ninorder is guaranteed to be the inorder traversal of the tree.\npostorder is guaranteed to be the postorder traversal of the tree.",
        "release_time": 1689531937,
        "oracle_code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int index;\n    public TreeNode buildTree(int[] inorder, int[] postorder) {\n        Map<Integer, Integer> m = new HashMap<>();\n\n        for(int i = 0; i < inorder.length; i++) {\n            m.put(inorder[i], i);\n        }\n        index = postorder.length - 1;\n        return buildTree(0, postorder.length - 1, postorder, m);\n    }\n\n    private TreeNode buildTree(int l, int r, int postorder[] , Map<Integer, Integer> m) {\n        if(l > r) return null;\n\n        int val = postorder[index];\n        index--;\n\n        TreeNode root = new TreeNode(val);\n        if(l == r) return root;\n\n        int in = m.get(val);\n\n        root.right = buildTree(in + 1, r, postorder, m);\n        root.left = buildTree(l, in - 1, postorder, m);\n\n        return root;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    int index;\\n    public TreeNode buildTree(int[] inorder, int[] postorder) {\\n        Map<Integer, Integer> m = new HashMap<>();\\n\\n        for(int i = 0; i < inorder.length; i++) {\\n            m.put(inorder[i], i);\\n        }\\n        index = postorder.length - 1;\\n        return buildTree(0, postorder.length - 1, postorder, m);\\n    }\\n\\n    private TreeNode buildTree(int l, int r, int postorder[] , Map<Integer, Integer> m) {\\n        if(l > r) return null;\\n\\n        int val = postorder[index];\\n        index--;\\n\\n        TreeNode root = new TreeNode(val);\\n        if(l == r) return root;\\n\\n        int in = m.get(val);\\n\\n        root.right = buildTree(in + 1, r, postorder, m);\\n        root.left = buildTree(l, in - 1, postorder, m);\\n\\n        return root;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "design-a-stack-with-increment-operation",
        "description": "Design a stack that supports increment operations on its elements.\nImplement the CustomStack class:\n\nCustomStack(int maxSize) Initializes the object with maxSize which is the maximum number of elements in the stack.\nvoid push(int x) Adds x to the top of the stack if the stack has not reached the maxSize.\nint pop() Pops and returns the top of the stack or -1 if the stack is empty.\nvoid inc(int k, int val) Increments the bottom k elements of the stack by val. If there are less than k elements in the stack, increment all the elements in the stack.",
        "examples": [
            "Input\n[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]\nOutput\n[null,null,null,2,null,null,null,null,null,103,202,201,-1]\nExplanation\nCustomStack stk = new CustomStack(3); // Stack is Empty []\nstk.push(1);                          // stack becomes [1]\nstk.push(2);                          // stack becomes [1, 2]\nstk.pop();                            // return 2 --> Return top of the stack 2, stack becomes [1]\nstk.push(2);                          // stack becomes [1, 2]\nstk.push(3);                          // stack becomes [1, 2, 3]\nstk.push(4);                          // stack still [1, 2, 3], Do not add another elements as size is 4\nstk.increment(5, 100);                // stack becomes [101, 102, 103]\nstk.increment(2, 100);                // stack becomes [201, 202, 103]\nstk.pop();                            // return 103 --> Return top of the stack 103, stack becomes [201, 202]\nstk.pop();                            // return 202 --> Return top of the stack 202, stack becomes [201]\nstk.pop();                            // return 201 --> Return top of the stack 201, stack becomes []\nstk.pop();                            // return -1 --> Stack is empty return -1."
        ],
        "constrains": "1 <= maxSize, x, k <= 1000\n0 <= val <= 100\nAt most 1000 calls will be made to each method of increment, push and pop each separately.",
        "release_time": 1674461680,
        "oracle_code": "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.arr = []\n        self.m = maxSize\n        self.top = -1\n\n    def push(self, x: int) -> None:\n        if self.top < self.m - 1:\n            self.arr.append(x)\n            self.top += 1\n\n    def pop(self) -> int:\n        if self.top == -1: return -1\n        self.top -= 1\n        return(self.arr.pop(-1))\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(min(k, self.top + 1)): self.arr[i] += val",
        "content": "# Upvote it :)\\n```\\nclass CustomStack:\\n\\n    def __init__(self, maxSize: int):\\n        self.arr = []\\n        self.m = maxSize\\n        self.top = -1\\n\\n    def push(self, x: int) -> None:\\n        if self.top < self.m - 1:\\n            self.arr.append(x)\\n            self.top += 1\\n\\n    def pop(self) -> int:\\n        if self.top == -1: return -1\\n        self.top -= 1\\n        return(self.arr.pop(-1))\\n\\n    def increment(self, k: int, val: int) -> None:\\n        for i in range(min(k, self.top + 1)): self.arr[i] += val\\n```",
        "level": "medium"
    },
    {
        "slug": "tuple-with-same-product",
        "description": "Given an array nums of distinct positive integers, return the number of tuples (a, b, c, d) such that a * b = c * d where a, b, c, and d are elements of nums, and a != b != c != d.",
        "examples": [
            "Input: nums = [2,3,4,6]\nOutput: 8\nExplanation: There are 8 valid tuples:\n(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)\n(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)",
            "Input: nums = [1,2,4,5,10]\nOutput: 16\nExplanation: There are 16 valid tuples:\n(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)\n(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)\n(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,5,4)\n(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)"
        ],
        "constrains": "1 <= nums.length <= 1000\n1 <= nums[i] <= 104\nAll elements in nums are distinct.",
        "release_time": 1661554822,
        "oracle_code": "class Solution {\n    public int tupleSameProduct(int[] nums) {\n        int m = nums.length;\n        int factor = 0;\n        HashMap<Integer, Integer> hm = new HashMap<>();\n        for(int i = 0; i < m - 1; i ++) {\n            for(int j = i + 1; j < m; j ++) {\n                int curNumber = nums[i] * nums[j];\n                int curNumberCount = (hm.containsKey(curNumber)) ? hm.get(curNumber) + 1 : 1;\n                hm.put(curNumber, curNumberCount);\n            }\n        }\n        \n\t\t// check the qty of number, and we can get n * (n - 1) / 2 compositions\n\t\t\n        for(Integer key: hm.keySet()) {\n            int count = hm.get(key);\n            if(count == 1) continue;\n            factor += count * (count - 1) / 2;\n        }\n        return factor * 8;\n    }\n}",
        "content": "```\\nclass Solution {\\n    public int tupleSameProduct(int[] nums) {\\n        int m = nums.length;\\n        int factor = 0;\\n        HashMap<Integer, Integer> hm = new HashMap<>();\\n        for(int i = 0; i < m - 1; i ++) {\\n            for(int j = i + 1; j < m; j ++) {\\n                int curNumber = nums[i] * nums[j];\\n                int curNumberCount = (hm.containsKey(curNumber)) ? hm.get(curNumber) + 1 : 1;\\n                hm.put(curNumber, curNumberCount);\\n            }\\n        }\\n        \\n\\t\\t// check the qty of number, and we can get n * (n - 1) / 2 compositions\\n\\t\\t\\n        for(Integer key: hm.keySet()) {\\n            int count = hm.get(key);\\n            if(count == 1) continue;\\n            factor += count * (count - 1) / 2;\\n        }\\n        return factor * 8;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "corporate-flight-bookings",
        "description": "There are n flights that are labeled from 1 to n.\nYou are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range.\nReturn an array answer of length n, where answer[i] is the total number of seats reserved for flight i.",
        "examples": [
            "Input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5\nOutput: [10,55,45,25,25]\nExplanation:\nFlight labels:        1   2   3   4   5\nBooking 1 reserved:  10  10\nBooking 2 reserved:      20  20\nBooking 3 reserved:      25  25  25  25\nTotal seats:         10  55  45  25  25\nHence, answer = [10,55,45,25,25]",
            "Input: bookings = [[1,2,10],[2,2,15]], n = 2\nOutput: [10,25]\nExplanation:\nFlight labels:        1   2\nBooking 1 reserved:  10  10\nBooking 2 reserved:      15\nTotal seats:         10  25\nHence, answer = [10,25]"
        ],
        "constrains": "1 <= n <= 2 * 104\n1 <= bookings.length <= 2 * 104\nbookings[i].length == 3\n1 <= firsti <= lasti <= n\n1 <= seatsi <= 104",
        "release_time": 1673235303,
        "oracle_code": "class Solution:\n    def increment(self, arr, start, end, val):\n        arr[start] += val\n        if end + 1 < len(arr):\n            arr[end+1] -= val\n        \n\n    def corpFlightBookings(self, bookings: List[List[int]], n: int) -> List[int]:\n        arr = [0 for _ in range(n)]\n        for book in bookings:\n            start, end ,seat = book\n            self.increment(arr, start-1, end-1, seat)\n            # print(arr)\n        res = [0 for _ in range(n)]\n        res[0] = arr[0]\n        for i in range(1, n):\n            res[i] = res[i-1] + arr[i]\n        # print(res)\n        return res",
        "content": "# Intuition\\nThis is the same problem as range addition. For any booking, we essentially add a number of seats to the specified range. \\n\\n# Approach\\nThere are `n` days in total. So we can create an array with length `n`, representing the difference array (ith entry represents the difference of ith and the (i-1)th entry of the original array). Then, for each booking, we add the `seat` to `arr[start]` and minus `seat` to `arr[end+1]`, so we are adding the number of seat to the days from `start` to `end`. \\n\\n# Complexity\\n- Time complexity:\\nFor each entry, we modify the array two times. So it\\'s $$O(N)$$.\\n\\n- Space complexity:\\nThe `arr` takes $$O(N)$$.\\n\\n# Code\\n```\\nclass Solution:\\n    def increment(self, arr, start, end, val):\\n        arr[start] += val\\n        if end + 1 < len(arr):\\n            arr[end+1] -= val\\n        \\n\\n    def corpFlightBookings(self, bookings: List[List[int]], n: int) -> List[int]:\\n        arr = [0 for _ in range(n)]\\n        for book in bookings:\\n            start, end ,seat = book\\n            self.increment(arr, start-1, end-1, seat)\\n            # print(arr)\\n        res = [0 for _ in range(n)]\\n        res[0] = arr[0]\\n        for i in range(1, n):\\n            res[i] = res[i-1] + arr[i]\\n        # print(res)\\n        return res\\n\\n\\n```",
        "level": "medium"
    },
    {
        "slug": "valid-triangle-number",
        "description": "Given an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.",
        "examples": [
            "Input: nums = [2,2,3,4]\nOutput: 3\nExplanation: Valid combinations are: \n2,3,4 (using the first 2)\n2,3,4 (using the second 2)\n2,2,3",
            "Input: nums = [4,2,3,4]\nOutput: 4"
        ],
        "constrains": "1 <= nums.length <= 1000\n0 <= nums[i] <= 1000",
        "release_time": 1689855211,
        "oracle_code": "class Solution {\n    public int triangleNumber(int[] nums) {\n        int n=nums.length;\n        Arrays.sort(nums);\n        int count=0;\n        for(int c=n-1;c>=2;c--){\n            int a=0;\n            int b=c-1;\n            while(a<b){\n                if(nums[a]+nums[b]>nums[c]){\n                    count+=(b-a);\n                    b--;\n                }\n                else{\n                    a++;\n                }\n            }\n        }\n        return count;\n        \n    }\n}",
        "content": "# Intuition\\nFor right angled triangle, it should satisfy following 3 conditions (a,b and c are sides of triangle)\\na+b>c\\na+c>b\\nb+c>a\\n\\nSuppose c>a+b then 2nd and 3rd condition is going to satisfy automatically so always keep the c at index with value greater than a and b\\n\\n# Approach\\nSteps:\\n1.Sort the array in increasing order\\n2.After sorting ,initially c as n-1 (intially as loop will be going for c from n-1 to 2 as at last c can be at 2nd, b at 1st and a at 0th index. \\n  b=c-1 , a=0\\n  (Keeping c at fixed index, we will be moving a and b in order to satisfy the condition a+b>c) .\\n3.while(a<b) \\n  check the nums[a] + nums[b] > nums[c] , \\n  if this exists then \\n    -for all the values after the nums[left],the condition nums[a] + nums[b] > nums[c] is going to satisfy, store (b-a) count in ans\\n    -decrement b\\n  else\\n    -increment a as we need to maximize sum so that it becoms greater than nums[c]\\n4.return ans\\n\\n\\n# Complexity\\n- Time complexity: O(N2)\\n- Space complexity:O(1)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int triangleNumber(int[] nums) {\\n        int n=nums.length;\\n        Arrays.sort(nums);\\n        int count=0;\\n        for(int c=n-1;c>=2;c--){\\n            int a=0;\\n            int b=c-1;\\n            while(a<b){\\n                if(nums[a]+nums[b]>nums[c]){\\n                    count+=(b-a);\\n                    b--;\\n                }\\n                else{\\n                    a++;\\n                }\\n            }\\n        }\\n        return count;\\n        \\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "move-zeroes",
        "description": "Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\nNote that you must do this in-place without making a copy of the array.",
        "examples": [
            "Input: nums = [0,1,0,3,12]\nOutput: [1,3,12,0,0]",
            "Input: nums = [0]\nOutput: [0]"
        ],
        "constrains": "1 <= nums.length <= 104\n-231 <= nums[i] <= 231 - 1",
        "release_time": 1688630198,
        "oracle_code": "class Solution {\n    public void moveZeroes(int[] arr) {\n    int n = arr.length;\n    if(n<=1) return;\n    int s=0;\n    int e=1;\n    while(e<n){\n        if(arr[s]==0 && arr[e]!=0){\n            int temp = arr[s];\n            arr[s] = arr[e];\n            arr[e] = temp;\n            s++;\n            e++;\n        }else if(arr[s]==0 && arr[e]==0){\n            e++;\n        }else{\n            s++;\n            e++;\n        }\n    }\n    }\n}",
        "content": "# Intuition: Keep two pointer start and end at index 0 and 1 and follow three steps:\\n-> If element at start is 0 and end is non zero then swap them and move both pointers.\\n-> If element at both start and end is zero then move end pointer.\\n-> If both are non zeros then just move both pointers ahead till end reaches array length.   \\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach: Two Pointer\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public void moveZeroes(int[] arr) {\\n    int n = arr.length;\\n    if(n<=1) return;\\n    int s=0;\\n    int e=1;\\n    while(e<n){\\n        if(arr[s]==0 && arr[e]!=0){\\n            int temp = arr[s];\\n            arr[s] = arr[e];\\n            arr[e] = temp;\\n            s++;\\n            e++;\\n        }else if(arr[s]==0 && arr[e]==0){\\n            e++;\\n        }else{\\n            s++;\\n            e++;\\n        }\\n    }\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "remove-element",
        "description": "Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.\nConsider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:\n\nChange the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.\nReturn k.\n\nCustom Judge:\nThe judge will test your solution with the following code:\n\nint[] nums = [...]; // Input array\nint val = ...; // Value to remove\nint[] expectedNums = [...]; // The expected answer with correct length.\n                            // It is sorted with no values equaling val.\n\nint k = removeElement(nums, val); // Calls your implementation\n\nassert k == expectedNums.length;\nsort(nums, 0, k); // Sort the first k elements of nums\nfor (int i = 0; i < actualLength; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\nIf all assertions pass, then your solution will be accepted.",
        "examples": [
            "Input: nums = [3,2,2,3], val = 3\nOutput: 2, nums = [2,2,_,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores).",
            "Input: nums = [0,1,2,2,3,0,4,2], val = 2\nOutput: 5, nums = [0,1,4,0,3,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
        ],
        "constrains": "0 <= nums.length <= 100\n0 <= nums[i] <= 50\n0 <= val <= 100",
        "release_time": 1674758451,
        "oracle_code": "class Solution {\n    public int removeElement(int[] nums, int val) {\n        int i = 0;\n        for (int j = 0; j < nums.length; j++) {\n            if (nums[j] != val) {\n                int temp = nums[i];\n                nums[i] = nums[j];\n                nums[j] = temp;\n                i++;\n            }\n        }\n        return i;\n    }\n}",
        "content": "# Approach\\n- I am using Two pointers method\\n- After shifting the val to the right side of the array.\\n- Just return the value of k which is length of array excluding val.\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int removeElement(int[] nums, int val) {\\n        int i = 0;\\n        for (int j = 0; j < nums.length; j++) {\\n            if (nums[j] != val) {\\n                int temp = nums[i];\\n                nums[i] = nums[j];\\n                nums[j] = temp;\\n                i++;\\n            }\\n        }\\n        return i;\\n    }\\n}\\n```\\n![please-upvote-and.jpg](https://assets.leetcode.com/users/images/e78315ef-8a9d-492b-9908-e3917f23eb31_1674946036.087042.jpeg)\\n",
        "level": "easy"
    },
    {
        "slug": "word-ladder",
        "description": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\n\nEvery adjacent pair of words differs by a single letter.\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\nsk == endWord\n\nGiven two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.",
        "examples": [
            "Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\nOutput: 5\nExplanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.",
            "Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\nOutput: 0\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence."
        ],
        "constrains": "1 <= beginWord.length <= 10\nendWord.length == beginWord.length\n1 <= wordList.length <= 5000\nwordList[i].length == beginWord.length\nbeginWord, endWord, and wordList[i] consist of lowercase English letters.\nbeginWord != endWord\nAll the words in wordList are unique.",
        "release_time": 1689448575,
        "oracle_code": "class Pair{\n    String first;\n    int second;\n    Pair(String first,int second){\n        this.first=first;\n        this.second=second;\n    }\n}\nclass Solution {\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        Queue<Pair> q=new ArrayDeque<>();\n        //initially adding beginword and sequence length 1 into queue\n        q.add(new Pair(beginWord,1));\n        //adding all words in HashSet \n        HashSet<String> set=new HashSet<>();\n        for(int i=0;i<wordList.size();i++){\n            set.add(wordList.get(i));\n        }\n        set.remove(beginWord);\n        while(!q.isEmpty()){\n            String rem=q.peek().first;\n            int steps=q.peek().second;\n            q.remove();\n            if(rem.equals(endWord))return steps;\n            \n            //TC:N * rem.length * 26 *  0(1){hashset}\n            //SC: 0(N) hashSet\n\n            //for every character doing a change,so traverse to all the characters\n            for(int i=0;i<rem.length();i++){\n                for(char ch='a';ch<='z';ch++){\n                    char replacedcharArray[]=rem.toCharArray();\n                    replacedcharArray[i]=ch;\n                    String replacedword=new String(replacedcharArray);\n                    //exist in the set?\n                    if(set.contains(replacedword)){\n                        set.remove(replacedword);\n                        q.add(new Pair(replacedword,steps+1));\n                    }\n                }\n            }\n\n        }\n        return 0;\n\n    }\n}",
        "content": "# Approach\\nBFS\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:N * rem.length * 26 *  0(1){hashset}\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:0(N) hashSet\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Pair{\\n    String first;\\n    int second;\\n    Pair(String first,int second){\\n        this.first=first;\\n        this.second=second;\\n    }\\n}\\nclass Solution {\\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\\n        Queue<Pair> q=new ArrayDeque<>();\\n        //initially adding beginword and sequence length 1 into queue\\n        q.add(new Pair(beginWord,1));\\n        //adding all words in HashSet \\n        HashSet<String> set=new HashSet<>();\\n        for(int i=0;i<wordList.size();i++){\\n            set.add(wordList.get(i));\\n        }\\n        set.remove(beginWord);\\n        while(!q.isEmpty()){\\n            String rem=q.peek().first;\\n            int steps=q.peek().second;\\n            q.remove();\\n            if(rem.equals(endWord))return steps;\\n            \\n            //TC:N * rem.length * 26 *  0(1){hashset}\\n            //SC: 0(N) hashSet\\n\\n            //for every character doing a change,so traverse to all the characters\\n            for(int i=0;i<rem.length();i++){\\n                for(char ch=\\'a\\';ch<=\\'z\\';ch++){\\n                    char replacedcharArray[]=rem.toCharArray();\\n                    replacedcharArray[i]=ch;\\n                    String replacedword=new String(replacedcharArray);\\n                    //exist in the set?\\n                    if(set.contains(replacedword)){\\n                        set.remove(replacedword);\\n                        q.add(new Pair(replacedword,steps+1));\\n                    }\\n                }\\n            }\\n\\n        }\\n        return 0;\\n\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "remove-duplicates-from-sorted-array-ii",
        "description": "Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums\u00a0should hold the final result. It does not matter what you leave beyond the first\u00a0k\u00a0elements.\nReturn k after placing the final result in the first k slots of nums.\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\nCustom Judge:\nThe judge will test your solution with the following code:\n\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\nIf all assertions pass, then your solution will be accepted.",
        "examples": [
            "Input: nums = [1,1,1,2,2,3]\nOutput: 5, nums = [1,1,2,2,3,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).",
            "Input: nums = [0,0,1,1,1,1,2,3,3]\nOutput: 7, nums = [0,0,1,1,2,3,3,_,_]\nExplanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
        ],
        "constrains": "1 <= nums.length <= 3 * 104\n-104 <= nums[i] <= 104\nnums is sorted in non-decreasing order.",
        "release_time": 1680527006,
        "oracle_code": "class Solution {\n    public int removeDuplicates(int[] nums) {\n     int   index = 1;\n      int  count = 0;\n        for(int i = 1;i<nums.length;i++){\n            if(nums[i] == nums[i-1]){\n                count++;\n            }\n            else{\n                count = 0;\n            }\n\n            if(count <= 1){\n                nums[index] = nums[i];\n                index++;\n            }\n        }\n        return index;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int removeDuplicates(int[] nums) {\\n     int   index = 1;\\n      int  count = 0;\\n        for(int i = 1;i<nums.length;i++){\\n            if(nums[i] == nums[i-1]){\\n                count++;\\n            }\\n            else{\\n                count = 0;\\n            }\\n\\n            if(count <= 1){\\n                nums[index] = nums[i];\\n                index++;\\n            }\\n        }\\n        return index;\\n    }\\n}\\n```\\n# If this solution helped you, give it an up-vote to help others**Bold**\\n![download.jfif](https://assets.leetcode.com/users/images/e1f75de3-02bf-44d0-bb86-208e5309d274_1680526945.9427269.jpeg)",
        "level": "medium"
    },
    {
        "slug": "max-sum-of-rectangle-no-larger-than-k",
        "description": "Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.\nIt is guaranteed that there will be a rectangle with a sum no larger than k.",
        "examples": [
            "Input: matrix = [[1,0,1],[0,-2,3]], k = 2\nOutput: 2\nExplanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).",
            "Input: matrix = [[2,2,-1]], k = 3\nOutput: 3"
        ],
        "constrains": "m == matrix.length\nn == matrix[i].length\n1 <= m, n <= 100\n-100 <= matrix[i][j] <= 100\n-105 <= k <= 105",
        "release_time": 1661575112,
        "oracle_code": "//Kadane's Algorithm Approach\n//600ms+  explained in video\n\nclass Solution {\n    public int maxSumSubmatrix(int[][] matrix, int k) {\n        int result = Integer.MIN_VALUE;\n        \n        for(int left =0 ;left<matrix[0].length; left++){\n            \n            int[] rSum = new int[matrix.length];\n            \n            for(int right = left;right<matrix[0].length;right++){\n                for(int row=0; row < matrix.length; row++)\n                    rSum[row] += matrix[row][right];\n\t\t\t\t\t\n\t\t\t\t\t//explanation of these 3 loops starts from 02:00 in Video\n                \n                TreeSet<Integer> set = new TreeSet<>();\n                \n                set.add(0);\n                int cs = 0;\n                \n                for(int a: rSum){\n                    cs += a;\n\t\t\t\t\t\n                    //if you don't understand what exactly is going on here\n\t\t\t\t\t// then watch the video from 12:27\n\t\t\t\t\t\n                    Integer target = set.ceiling(cs-k);\n                    \n                    if(target !=null)\n                        result = Math.max(result,cs-target);\n                    set.add(cs);\n                }\n            }\n        }\n        return result;\n    }\n}",
        "content": "*Please **Upvote** if you find this explanation helpful*\\n\\n**Video Explanation**\\n[Max Sum of Rectangle No Larger Than K | YouTube](https://www.youtube.com/watch?v=rztZyG5kpvM&feature=youtu.be)\\n\\n**Java Solution**\\n\\n```\\n//Kadane\\'s Algorithm Approach\\n//600ms+  explained in video\\n\\nclass Solution {\\n    public int maxSumSubmatrix(int[][] matrix, int k) {\\n        int result = Integer.MIN_VALUE;\\n        \\n        for(int left =0 ;left<matrix[0].length; left++){\\n            \\n            int[] rSum = new int[matrix.length];\\n            \\n            for(int right = left;right<matrix[0].length;right++){\\n                for(int row=0; row < matrix.length; row++)\\n                    rSum[row] += matrix[row][right];\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t//explanation of these 3 loops starts from 02:00 in Video\\n                \\n                TreeSet<Integer> set = new TreeSet<>();\\n                \\n                set.add(0);\\n                int cs = 0;\\n                \\n                for(int a: rSum){\\n                    cs += a;\\n\\t\\t\\t\\t\\t\\n                    //if you don\\'t understand what exactly is going on here\\n\\t\\t\\t\\t\\t// then watch the video from 12:27\\n\\t\\t\\t\\t\\t\\n                    Integer target = set.ceiling(cs-k);\\n                    \\n                    if(target !=null)\\n                        result = Math.max(result,cs-target);\\n                    set.add(cs);\\n                }\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```\\n\\n**Faster Approach**\\n```\\n//32ms - faster than 100%\\n\\nclass Solution {\\n    public int maxSumSubmatrix(int[][] matrix, int k) {\\n        for (int i = 0; i < matrix.length; i++) {\\n            for (int j = 0; j < matrix[0].length; j++) {\\n                if (i > 0) {\\n                    matrix[i][j] += matrix[i - 1][j];\\n                }\\n                if (j > 0) {\\n                    matrix[i][j] += matrix[i][j - 1];\\n                }\\n                if (i > 0 && j > 0) {\\n                    matrix[i][j] -= matrix[i - 1][j - 1];\\n                }\\n            }\\n        }\\n        int result = Integer.MIN_VALUE;\\n        \\n        int[][] dpHigh = new int[matrix.length][matrix.length + 1];\\n        int[][] dpLow = new int[matrix.length][matrix.length + 1];\\n        \\n        for (int i = matrix.length - 1; i >= 0; i--) {\\n            for (int h = 1; h <= matrix.length - i; h++) {\\n                int theValue = getSum(matrix, i, matrix[0].length - 1, h, 1);\\n                dpLow[i][h] = theValue;\\n                dpHigh[i][h] = theValue;\\n                if (theValue == k) {\\n                    return theValue;\\n                }\\n                if (theValue < k) {\\n                    result = Math.max(result, theValue);\\n                }\\n            }\\n        }\\n        \\n        for (int i = matrix.length - 1; i >= 0; i--) {\\n            for (int j = matrix[0].length - 2; j >= 0; j--) {\\n                for (int h = 1; h <= matrix.length - i; h++) {\\n                    int newSum = getSum(matrix, i, j, h, 1);\\n                    if (dpLow[i][h] > 0) {\\n                        dpHigh[i][h] += newSum;\\n                        dpLow[i][h] = newSum;\\n                    } else if (dpHigh[i][h] < 0) {\\n                        dpLow[i][h] += newSum;\\n                        dpHigh[i][h] = newSum;\\n                    } else {\\n                        dpHigh[i][h] += newSum;\\n                        dpLow[i][h] += newSum;\\n                    }\\n                    if (dpHigh[i][h] >= result && dpLow[i][h] <= k) {\\n                        for (int w = 1; w <= matrix[0].length - j; w++) {\\n                            int sum = getSum(matrix, i, j, h, w);\\n                            if (sum == k) {\\n                                return sum;\\n                            } else if (sum < k) {\\n                                result = Math.max(result, sum);\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return result;\\n    }\\n    \\n    private int getSum(int[][] matrix, int i, int j, int h, int w) {\\n        int sum = matrix[i + h - 1][j + w - 1];\\n        if (i > 0) {\\n            sum -= matrix[i - 1][j + w - 1];\\n        }\\n        if (j > 0) {\\n            sum -= matrix[i + h - 1][j - 1];\\n        }\\n        if (i > 0 && j > 0) {\\n            sum += matrix[i - 1][j - 1];\\n        }\\n        return sum;\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "check-if-point-is-reachable",
        "description": "There exists an infinitely large grid. You are currently at point (1, 1), and you need to reach the point (targetX, targetY) using a finite number of steps.\nIn one step, you can move from point (x, y) to any one of the following points:\n\n(x, y - x)\n(x - y, y)\n(2 * x, y)\n(x, 2 * y)\n\nGiven two integers targetX and targetY representing the X-coordinate and Y-coordinate of your final position, return true if you can reach the point from (1, 1) using some number of steps, and false otherwise.",
        "examples": [
            "Input: targetX = 6, targetY = 9\nOutput: false\nExplanation: It is impossible to reach (6,9) from (1,1) using any sequence of moves, so false is returned.",
            "Input: targetX = 4, targetY = 7\nOutput: true\nExplanation: You can follow the path (1,1) -> (1,2) -> (1,4) -> (1,8) -> (1,7) -> (2,7) -> (4,7)."
        ],
        "constrains": "1 <= targetX, targetY\u00a0<= 109",
        "release_time": 1674362091,
        "oracle_code": "class Solution {\n    public boolean isReachable(int targetX, int targetY) {\n        if (targetX > targetY)\n            return isReachable(targetY, targetX);\n        if (targetX % 2 == 0)\n            return isReachable(targetX / 2, targetY);\n        if (targetY % 2 == 0)\n            return isReachable(targetX, targetY / 2);\n            \n        if (targetX == 1) \n            return true;\n        \n        if (targetY == targetX)\n            return false;\n\n        return isReachable(targetX, (targetX + targetY) / 2);\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFirst, if x,y is reachable, then y,x is reachable. So only take care the case x <= y.>\\nThe end point, if x = 1, then it surely is true, since you can use 1,1 and x,y -> x, 2y to reach 1,k until k is not smaller than y, then use x,y -> x, y-x to reach the final value.\\nif x = y and x is odd number and not 1, then it is a false case. since x, x and only come from x,0 and x,2x. And x,2x can only get from x,0 and x,3x. With go into a loop and none of them can go from 1,1.\\nSo when target x or y is even, divide it until odd. Then check if it fit the end points.\\nIf not, then x,y can go from x,x+y. Since x+y is even, so it can go to x,(x + y) / 2.\\nIn this case, for x,y, since (x+y)/2 is smaller then y, and it is possibly to be even again and keep divide 2. So finally it will either go to end with x = y case or it will go to x = 1 case.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isReachable(int targetX, int targetY) {\\n        if (targetX > targetY)\\n            return isReachable(targetY, targetX);\\n        if (targetX % 2 == 0)\\n            return isReachable(targetX / 2, targetY);\\n        if (targetY % 2 == 0)\\n            return isReachable(targetX, targetY / 2);\\n            \\n        if (targetX == 1) \\n            return true;\\n        \\n        if (targetY == targetX)\\n            return false;\\n\\n        return isReachable(targetX, (targetX + targetY) / 2);\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "sign-of-the-product-of-an-array",
        "description": "There is a function signFunc(x) that returns:\n\n1 if x is positive.\n-1 if x is negative.\n0 if x is equal to 0.\n\nYou are given an integer array nums. Let product be the product of all values in the array nums.\nReturn signFunc(product).",
        "examples": [
            "Input: nums = [-1,-2,-3,-4,3,2,1]\nOutput: 1\nExplanation: The product of all values in the array is 144, and signFunc(144) = 1",
            "Input: nums = [1,5,0,2,-3]\nOutput: 0\nExplanation: The product of all values in the array is 0, and signFunc(0) = 0",
            "Input: nums = [-1,1,-1,1,-1]\nOutput: -1\nExplanation: The product of all values in the array is -1, and signFunc(-1) = -1"
        ],
        "constrains": "1 <= nums.length <= 1000\n-100 <= nums[i] <= 100",
        "release_time": 1682989041,
        "oracle_code": "class Solution { // Vezzz\n  public int arraySign(int[] nums) {\n    int z = 0;\n    for (int v : nums)\n      if (v == 0)\n        return 0;\n      else\n        z ^= v;\n    return z >> 31 | 1;\n  }\n}",
        "content": "# Intuition\\nOnly the sign bit matter.\\n\\n# Approach\\n- 2 negative sign bit cancel each other using xor.\\n- Early exit on `0`.\\n- Drag the sign bit over the whole int and set last bit.\\n\\n# Complexity\\n- Time complexity: *`O(n)`*\\n- Space complexity: *`O(1)`*\\n\\n# Code\\n```\\nclass Solution { // Vezzz\\n  public int arraySign(int[] nums) {\\n    int z = 0;\\n    for (int v : nums)\\n      if (v == 0)\\n        return 0;\\n      else\\n        z ^= v;\\n    return z >> 31 | 1;\\n  }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "minimum-time-to-visit-a-cell-in-a-grid",
        "description": "You are given a m x n matrix grid consisting of non-negative integers where grid[row][col] represents the minimum time required to be able to visit the cell (row, col), which means you can visit the cell (row, col) only when the time you visit it is greater than or equal to grid[row][col].\nYou are standing in the top-left cell of the matrix in the 0th second, and you must move to any adjacent cell in the four directions: up, down, left, and right. Each move you make takes 1 second.\nReturn the minimum time required in which you can visit the bottom-right cell of the matrix. If you cannot visit the bottom-right cell, then return -1.",
        "examples": [
            "Input: grid = [[0,1,3,2],[5,1,2,5],[4,3,8,6]]\nOutput: 7\nExplanation: One of the paths that we can take is the following:\n- at t = 0, we are on the cell (0,0).\n- at t = 1, we move to the cell (0,1). It is possible because grid[0][1] <= 1.\n- at t = 2, we move to the cell (1,1). It is possible because grid[1][1] <= 2.\n- at t = 3, we move to the cell (1,2). It is possible because grid[1][2] <= 3.\n- at t = 4, we move to the cell (1,1). It is possible because grid[1][1] <= 4.\n- at t = 5, we move to the cell (1,2). It is possible because grid[1][2] <= 5.\n- at t = 6, we move to the cell (1,3). It is possible because grid[1][3] <= 6.\n- at t = 7, we move to the cell (2,3). It is possible because grid[2][3] <= 7.\nThe final time is 7. It can be shown that it is the minimum time possible.",
            "Input: grid = [[0,2,4],[3,2,1],[1,0,4]]\nOutput: -1\nExplanation: There is no path from the top left to the bottom-right cell."
        ],
        "constrains": "m == grid.length\nn == grid[i].length\n2 <= m, n <= 1000\n4 <= m * n <= 105\n0 <= grid[i][j] <= 105\ngrid[0][0] == 0",
        "release_time": 1677384057,
        "oracle_code": "class Solution {\n    private static final int[][] DIRS = new int[][] { { 1, 0 }, { -1, 0}, { 0, 1 }, { 0, -1 } };\n    public int minimumTime(int[][] grid) {\n        if (grid[0][1] > 1 && grid[1][0] > 1) {\n            return -1;\n        }\n        \n        int m = grid.length;\n        int n = grid[0].length;\n        \n        PriorityQueue<int[]> heap = new PriorityQueue<>((a, b) -> a[2] - b[2]);\n        heap.offer(new int[] { 0, 0, 0 }); // row, col, time\n        \n        boolean[][] visited = new boolean[m][n];\n        \n        while (!heap.isEmpty()) {\n            int[] entry = heap.poll();\n            int row = entry[0];\n            int col = entry[1];\n            int time = entry[2];\n            if (row == m - 1 && col == n - 1) {\n                return time;\n            }\n            if (visited[row][col]) {\n                continue;\n            }\n            visited[row][col] = true;\n                \n            for (int[] dir : DIRS) {\n                int r = row + dir[0];\n                int c = col + dir[1];\n                if (r < 0 || r == m || c < 0 || c == n || visited[r][c]) {\n                    continue;\n                }\n                \n                if (grid[r][c] <= time + 1) {\n                    // if it is possible to move to neighbor, do it\n                    heap.offer(new int[] { r, c, time + 1 });\n                } else {\n                    // If we cant move to neighbor yet, we can hop to the previous cell\n                    // and back to current cell as many times as we need to until\n                    // sufficient time has passed.\n                    // The trick here is that if the difference between the current time\n                    // and the time we need is even, we will arrive back at the current cell\n                    // 1 second \"late\" and so we will move to the neighbor 1 second after\n                    // the minimum neighbor time.\n                    int diff = grid[r][c] - time;\n                    if (diff % 2 == 1) {\n                        heap.offer(new int[] { r, c, grid[r][c] });\n                    } else {\n                        heap.offer(new int[] { r, c, grid[r][c] + 1 });\n                    }\n                }\n            }\n        }\n        return -1; // will never reach here\n    }\n}",
        "content": "```\\nclass Solution {\\n    private static final int[][] DIRS = new int[][] { { 1, 0 }, { -1, 0}, { 0, 1 }, { 0, -1 } };\\n    public int minimumTime(int[][] grid) {\\n        if (grid[0][1] > 1 && grid[1][0] > 1) {\\n            return -1;\\n        }\\n        \\n        int m = grid.length;\\n        int n = grid[0].length;\\n        \\n        PriorityQueue<int[]> heap = new PriorityQueue<>((a, b) -> a[2] - b[2]);\\n        heap.offer(new int[] { 0, 0, 0 }); // row, col, time\\n        \\n        boolean[][] visited = new boolean[m][n];\\n        \\n        while (!heap.isEmpty()) {\\n            int[] entry = heap.poll();\\n            int row = entry[0];\\n            int col = entry[1];\\n            int time = entry[2];\\n            if (row == m - 1 && col == n - 1) {\\n                return time;\\n            }\\n            if (visited[row][col]) {\\n                continue;\\n            }\\n            visited[row][col] = true;\\n                \\n            for (int[] dir : DIRS) {\\n                int r = row + dir[0];\\n                int c = col + dir[1];\\n                if (r < 0 || r == m || c < 0 || c == n || visited[r][c]) {\\n                    continue;\\n                }\\n                \\n                if (grid[r][c] <= time + 1) {\\n                    // if it is possible to move to neighbor, do it\\n                    heap.offer(new int[] { r, c, time + 1 });\\n                } else {\\n                    // If we cant move to neighbor yet, we can hop to the previous cell\\n                    // and back to current cell as many times as we need to until\\n                    // sufficient time has passed.\\n                    // The trick here is that if the difference between the current time\\n                    // and the time we need is even, we will arrive back at the current cell\\n                    // 1 second \"late\" and so we will move to the neighbor 1 second after\\n                    // the minimum neighbor time.\\n                    int diff = grid[r][c] - time;\\n                    if (diff % 2 == 1) {\\n                        heap.offer(new int[] { r, c, grid[r][c] });\\n                    } else {\\n                        heap.offer(new int[] { r, c, grid[r][c] + 1 });\\n                    }\\n                }\\n            }\\n        }\\n        return -1; // will never reach here\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "how-many-numbers-are-smaller-than-the-current-number",
        "description": "Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's\u00a0such that\u00a0j != i and nums[j] < nums[i].\nReturn the answer in an array.",
        "examples": [
            "Input: nums = [8,1,2,2,3]\nOutput: [4,0,1,1,3]\nExplanation: \nFor nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). \nFor nums[1]=1 does not exist any smaller number than it.\nFor nums[2]=2 there exist one smaller number than it (1). \nFor nums[3]=2 there exist one smaller number than it (1). \nFor nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).",
            "Input: nums = [6,5,4,8]\nOutput: [2,1,0,3]",
            "Input: nums = [7,7,7,7]\nOutput: [0,0,0,0]"
        ],
        "constrains": "2 <= nums.length <= 500\n0 <= nums[i] <= 100",
        "release_time": 1691043692,
        "oracle_code": "class Solution {\n    public int[] smallerNumbersThanCurrent(int[] nums) {\n        int c=0;\n        int res[]=new int[nums.length],k=0;\n        for(int i=0;i<nums.length;i++){\n         for(int j=0;j<nums.length;j++){\n             if(nums[j]<nums[i]){\n                 c+=1;\n                    }\n                 }\n                res[i]=c;\n               c=0;\n              }\n      return res;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n^2)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] smallerNumbersThanCurrent(int[] nums) {\\n        int c=0;\\n        int res[]=new int[nums.length],k=0;\\n        for(int i=0;i<nums.length;i++){\\n         for(int j=0;j<nums.length;j++){\\n             if(nums[j]<nums[i]){\\n                 c+=1;\\n                    }\\n                 }\\n                res[i]=c;\\n               c=0;\\n              }\\n      return res;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "subtract-the-product-and-sum-of-digits-of-an-integer",
        "description": "Given an integer number n, return the difference between the product of its digits and the sum of its digits.",
        "examples": [
            "Input: n = 234\nOutput: 15 \nExplanation: \nProduct of digits = 2 * 3 * 4 = 24 \nSum of digits = 2 + 3 + 4 = 9 \nResult = 24 - 9 = 15",
            "Input: n = 4421\nOutput: 21\nExplanation: \nProduct of digits = 4 * 4 * 2 * 1 = 32 \nSum of digits = 4 + 4 + 2 + 1 = 11 \nResult = 32 - 11 = 21"
        ],
        "constrains": "1 <= n <= 10^5",
        "release_time": 1683098100,
        "oracle_code": "class Solution {\n    public int subtractProductAndSum(int n) {\n        \n        int multi=1, sum=0;\n        while(n!=0){\n            int rem=n%10; //take last digit of n\n            sum+=rem;\n            multi*=rem;\n            n=n/10; // dropping last digit of n\n        }\n        // System.out.println(multi+\" \"+sum);\n        return multi - sum;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int subtractProductAndSum(int n) {\\n        \\n        int multi=1, sum=0;\\n        while(n!=0){\\n            int rem=n%10; //take last digit of n\\n            sum+=rem;\\n            multi*=rem;\\n            n=n/10; // dropping last digit of n\\n        }\\n        // System.out.println(multi+\" \"+sum);\\n        return multi - sum;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "add-binary",
        "description": "Given two binary strings a and b, return their sum as a binary string.",
        "examples": [
            "Input: a = \"11\", b = \"1\"\nOutput: \"100\"",
            "Input: a = \"1010\", b = \"1011\"\nOutput: \"10101\""
        ],
        "constrains": "1 <= a.length, b.length <= 104\na and b consist\u00a0only of '0' or '1' characters.\nEach string does not contain leading zeros except for the zero itself.",
        "release_time": 1692196406,
        "oracle_code": "import java.math.BigInteger;\nclass Solution {\n    public String addBinary(String a, String b) {\n        BigInteger A=new BigInteger(a,2);\n        BigInteger B=new BigInteger(b,2);\n        BigInteger c=A.add(B);\n        return c.toString(2);\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n![image.png](https://assets.leetcode.com/users/images/a4479753-912f-41ab-abdb-8c757f98bd03_1692196384.1712396.png)\\n\\n\\n# Code\\n```\\nimport java.math.BigInteger;\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger A=new BigInteger(a,2);\\n        BigInteger B=new BigInteger(b,2);\\n        BigInteger c=A.add(B);\\n        return c.toString(2);\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "count-largest-group",
        "description": "You are given an integer n.\nEach number from 1 to n is grouped according to the sum of its digits.\nReturn the number of groups that have the largest size.",
        "examples": [
            "Input: n = 13\nOutput: 4\nExplanation: There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:\n[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9].\nThere are 4 groups with largest size.",
            "Input: n = 2\nOutput: 2\nExplanation: There are 2 groups [1], [2] of size 1."
        ],
        "constrains": "1 <= n <= 104",
        "release_time": 1655802809,
        "oracle_code": "class Solution {\n    \n    int countDigits(int n) {\n        if(n == 0) return 0;\n        return n%10 + countDigits(n/10);\n    }\n    \n    public int countLargestGroup(int n) {\n        \n        ArrayList<Integer> list = new ArrayList(Collections.nCopies(37, 0));\n        \n        for(int i=1;i<=n;i++) {\n            int cd = countDigits(i); // count digits\n            list.set(cd, list.get(cd)+1); // update count\n        }\n        \n        return Collections.frequency(list, Collections.max(list));\n    }\n}",
        "content": "```\\nclass Solution {\\n    \\n    int countDigits(int n) {\\n        if(n == 0) return 0;\\n        return n%10 + countDigits(n/10);\\n    }\\n    \\n    public int countLargestGroup(int n) {\\n        \\n        ArrayList<Integer> list = new ArrayList(Collections.nCopies(37, 0));\\n        \\n        for(int i=1;i<=n;i++) {\\n            int cd = countDigits(i); // count digits\\n            list.set(cd, list.get(cd)+1); // update count\\n        }\\n        \\n        return Collections.frequency(list, Collections.max(list));\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "lowest-common-ancestor-of-a-binary-search-tree",
        "description": "Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.\nAccording to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\u201d",
        "examples": [
            "Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\nOutput: 6\nExplanation: The LCA of nodes 2 and 8 is 6.",
            "Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\nOutput: 2\nExplanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.",
            "Input: root = [2,1], p = 2, q = 1\nOutput: 2"
        ],
        "constrains": "The number of nodes in the tree is in the range [2, 105].\n-109 <= Node.val <= 109\nAll Node.val are unique.\np != q\np and q will exist in the BST.",
        "release_time": 1681332056,
        "oracle_code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        if(root == null || root == p || root == q)return root;\n\n        TreeNode left = lowestCommonAncestor(root.left, p , q);\n        TreeNode right = lowestCommonAncestor(root.right, p ,q);\n\n        if(left == null)return right;\n        if(right == null)return left;\n        else{\n            return root;\n        }\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\n\\nclass Solution {\\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\\n        if(root == null || root == p || root == q)return root;\\n\\n        TreeNode left = lowestCommonAncestor(root.left, p , q);\\n        TreeNode right = lowestCommonAncestor(root.right, p ,q);\\n\\n        if(left == null)return right;\\n        if(right == null)return left;\\n        else{\\n            return root;\\n        }\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "lexicographically-smallest-equivalent-string",
        "description": "You are given two strings of the same length s1 and s2 and a string baseStr.\nWe say s1[i] and s2[i] are equivalent characters.\n\nFor example, if s1 = \"abc\" and s2 = \"cde\", then we have 'a' == 'c', 'b' == 'd', and 'c' == 'e'.\n\nEquivalent characters follow the usual rules of any equivalence relation:\n\nReflexivity: 'a' == 'a'.\nSymmetry: 'a' == 'b' implies 'b' == 'a'.\nTransitivity: 'a' == 'b' and 'b' == 'c' implies 'a' == 'c'.\n\nFor example, given the equivalency information from s1 = \"abc\" and s2 = \"cde\", \"acd\" and \"aab\" are equivalent strings of baseStr = \"eed\", and \"aab\" is the lexicographically smallest equivalent string of baseStr.\nReturn the lexicographically smallest equivalent string of baseStr by using the equivalency information from s1 and s2.",
        "examples": [
            "Input: s1 = \"parker\", s2 = \"morris\", baseStr = \"parser\"\nOutput: \"makkek\"\nExplanation: Based on the equivalency information in s1 and s2, we can group their characters as [m,p], [a,o], [k,r,s], [e,i].\nThe characters in each group are equivalent and sorted in lexicographical order.\nSo the answer is \"makkek\".",
            "Input: s1 = \"hello\", s2 = \"world\", baseStr = \"hold\"\nOutput: \"hdld\"\nExplanation: Based on the equivalency information in s1 and s2, we can group their characters as [h,w], [d,e,o], [l,r].\nSo only the second letter 'o' in baseStr is changed to 'd', the answer is \"hdld\".",
            "Input: s1 = \"leetcode\", s2 = \"programs\", baseStr = \"sourcecode\"\nOutput: \"aauaaaaada\"\nExplanation: We group the equivalent characters in s1 and s2 as [a,o,e,r,s,c], [l,p], [g,t] and [d,m], thus all letters in baseStr except 'u' and 'd' are transformed to 'a', the answer is \"aauaaaaada\"."
        ],
        "constrains": "1 <= s1.length, s2.length, baseStr <= 1000\ns1.length == s2.length\ns1, s2, and baseStr consist of lowercase English letters.",
        "release_time": 1673736567,
        "oracle_code": "class Solution {\n    public String smallestEquivalentString(String s1, String s2, String baseStr) {\n        \n        UFDS dsu = new UFDS(26);\n        for(int i = 0; i < s1.length(); i++){\n            dsu.union(s1.charAt(i)-97,s2.charAt(i)-97);\n        }\n\n        StringBuilder sb = new StringBuilder(); \n\n        for(int i = 0; i < baseStr.length(); i++){\n            int root = dsu.root(baseStr.charAt(i) - 97);\n            sb.append((char)(dsu.min[root] + 97));\n\n        }\n        return sb.toString();\n    }\n    \n    class UFDS{\n        \n        int[] id;\n        int[] size;\n        int[] min;\n        \n        public UFDS(int N){\n            \n            id = new int[N];\n            size = new int[N];\n            min = new int[N];\n            for(int i = 0; i < N; i++){\n                id[i] = i;\n                size[i] = 1;\n                min[i] = i;\n            }\n        }\n        \n        private int root(int i){\n            while (i != id[i]){\n                id[i] = id[id[i]];\n                i = id[i];\n            }\n            return i;\n        }\n        \n        public void union(int p, int q){\n            \n            int i = root(p);\n            int j = root(q);\n            if(i == j)return;\n            if(size[i] < size[j]){\n                id[i] = id[j];\n                size[j] += size[i];\n                min[j] = Math.min(min[i],min[j]);\n            }\n            else{\n                id[j] = id[i];\n                size[i] += size[j];\n                min[i] = Math.min(min[i],min[j]);\n            }\n        }\n\n    }   \n}",
        "content": "# Intuition\\nThis is as straight forward of a DSU/UFDS problem as they come. One could think of equivalent characters as elements belonging to the same set. If a certain character of one set is found to be equivalent to be the character of some other set, a union of those two sets has to be performed. Also, the smallest character in each set has to be tracked so as to finally construct our answer.\\n\\n# Approach\\nStart by initialsing a UFDS class with 26 elements (elements being the characters of a set). Take union of two equivalent characters a/c to String S1 and S2, while taking union, keep tracking the minimum element of the sets involved using an extra \\'min\\' array. To finally construct the answer, find the min character for each set a character of the baseStr String belongs to. \\n\\n\\n# Code\\n```\\nclass Solution {\\n    public String smallestEquivalentString(String s1, String s2, String baseStr) {\\n        \\n        UFDS dsu = new UFDS(26);\\n        for(int i = 0; i < s1.length(); i++){\\n            dsu.union(s1.charAt(i)-97,s2.charAt(i)-97);\\n        }\\n\\n        StringBuilder sb = new StringBuilder(); \\n\\n        for(int i = 0; i < baseStr.length(); i++){\\n            int root = dsu.root(baseStr.charAt(i) - 97);\\n            sb.append((char)(dsu.min[root] + 97));\\n\\n        }\\n        return sb.toString();\\n    }\\n    \\n    class UFDS{\\n        \\n        int[] id;\\n        int[] size;\\n        int[] min;\\n        \\n        public UFDS(int N){\\n            \\n            id = new int[N];\\n            size = new int[N];\\n            min = new int[N];\\n            for(int i = 0; i < N; i++){\\n                id[i] = i;\\n                size[i] = 1;\\n                min[i] = i;\\n            }\\n        }\\n        \\n        private int root(int i){\\n            while (i != id[i]){\\n                id[i] = id[id[i]];\\n                i = id[i];\\n            }\\n            return i;\\n        }\\n        \\n        public void union(int p, int q){\\n            \\n            int i = root(p);\\n            int j = root(q);\\n            if(i == j)return;\\n            if(size[i] < size[j]){\\n                id[i] = id[j];\\n                size[j] += size[i];\\n                min[j] = Math.min(min[i],min[j]);\\n            }\\n            else{\\n                id[j] = id[i];\\n                size[i] += size[j];\\n                min[i] = Math.min(min[i],min[j]);\\n            }\\n        }\\n\\n    }   \\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "maximum-average-pass-ratio",
        "description": "There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array classes, where classes[i] = [passi, totali]. You know beforehand that in the ith class, there are totali total students, but only passi number of students will pass the exam.\nYou are also given an integer extraStudents. There are another extraStudents brilliant students that are guaranteed to pass the exam of any class they are assigned to. You want to assign each of the extraStudents students to a class in a way that maximizes the average pass ratio across all the classes.\nThe pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes.\nReturn the maximum possible average pass ratio after assigning the extraStudents students. Answers within 10-5 of the actual answer will be accepted.",
        "examples": [
            "Input: classes = [[1,2],[3,5],[2,2]], extraStudents = 2\nOutput: 0.78333\nExplanation: You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333.",
            "Input: classes = [[2,4],[3,9],[4,5],[2,10]], extraStudents = 4\nOutput: 0.53485"
        ],
        "constrains": "1 <= classes.length <= 105\nclasses[i].length == 2\n1 <= passi <= totali <= 105\n1 <= extraStudents <= 105",
        "release_time": 1675841173,
        "oracle_code": "class Solution {\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\n        PriorityQueue<Class> pq = new PriorityQueue<>(new Compare());\n        for(int[] cl : classes){\n            pq.add(new Class(cl));\n        }\n        while(extraStudents > 0){\n            Class c = pq.remove();\n            c.addExtraStudent();\n            extraStudents--;\n            pq.add(c);\n        }\n        double sum = 0;\n        while(!pq.isEmpty()){\n            Class c = pq.remove();\n            sum += c.pass / c.total;\n        }\n        return sum / classes.length;\n    }\n}\nclass Class{\n    double pass;\n    double total;\n    double inc;\n    public Class(int[] cl){\n        pass = cl[0];\n        total = cl[1];\n        inc = (pass + 1) / (total + 1) - pass / total;\n    }\n    public void addExtraStudent(){\n        pass += 1;\n        total += 1;\n        inc = (pass + 1) / (total + 1) - pass / total;\n    }\n}\nclass Compare implements Comparator<Class>{\n    public int compare(Class c1, Class c2){\n        if(c1.inc < c2.inc){\n            return 1;\n        }else if(c1.inc > c2.inc){\n            return -1;\n        }else{\n            return 0;\n        }\n    }\n}",
        "content": "\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<Class> pq = new PriorityQueue<>(new Compare());\\n        for(int[] cl : classes){\\n            pq.add(new Class(cl));\\n        }\\n        while(extraStudents > 0){\\n            Class c = pq.remove();\\n            c.addExtraStudent();\\n            extraStudents--;\\n            pq.add(c);\\n        }\\n        double sum = 0;\\n        while(!pq.isEmpty()){\\n            Class c = pq.remove();\\n            sum += c.pass / c.total;\\n        }\\n        return sum / classes.length;\\n    }\\n}\\nclass Class{\\n    double pass;\\n    double total;\\n    double inc;\\n    public Class(int[] cl){\\n        pass = cl[0];\\n        total = cl[1];\\n        inc = (pass + 1) / (total + 1) - pass / total;\\n    }\\n    public void addExtraStudent(){\\n        pass += 1;\\n        total += 1;\\n        inc = (pass + 1) / (total + 1) - pass / total;\\n    }\\n}\\nclass Compare implements Comparator<Class>{\\n    public int compare(Class c1, Class c2){\\n        if(c1.inc < c2.inc){\\n            return 1;\\n        }else if(c1.inc > c2.inc){\\n            return -1;\\n        }else{\\n            return 0;\\n        }\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "find-target-indices-after-sorting-array",
        "description": "You are given a 0-indexed integer array nums and a target element target.\nA target index is an index i such that nums[i] == target.\nReturn a list of the target indices of nums after sorting nums in non-decreasing order. If there are no target indices, return an empty list. The returned list must be sorted in increasing order.",
        "examples": [
            "Input: nums = [1,2,5,2,3], target = 2\nOutput: [1,2]\nExplanation: After sorting, nums is [1,2,2,3,5].\nThe indices where nums[i] == 2 are 1 and 2.",
            "Input: nums = [1,2,5,2,3], target = 3\nOutput: [3]\nExplanation: After sorting, nums is [1,2,2,3,5].\nThe index where nums[i] == 3 is 3.",
            "Input: nums = [1,2,5,2,3], target = 5\nOutput: [4]\nExplanation: After sorting, nums is [1,2,2,3,5].\nThe index where nums[i] == 5 is 4."
        ],
        "constrains": "1 <= nums.length <= 100\n1 <= nums[i], target <= 100",
        "release_time": 1688380939,
        "oracle_code": "class Solution {\n    public List<Integer> targetIndices(int[] nums, int target) {\n        ArrayList <Integer> arr = new ArrayList<>();\n        Arrays.sort(nums);\n        for(int i=0; i<nums.length; i++){\n            if(nums[i] == target){\n                arr.add(i);\n            }\n        }\n        return arr;\n    }\n}",
        "content": "# Code\\n```\\nclass Solution {\\n    public List<Integer> targetIndices(int[] nums, int target) {\\n        ArrayList <Integer> arr = new ArrayList<>();\\n        Arrays.sort(nums);\\n        for(int i=0; i<nums.length; i++){\\n            if(nums[i] == target){\\n                arr.add(i);\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "airplane-seat-assignment-probability",
        "description": "n passengers board an airplane with exactly n seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of the passengers will:\n\nTake their own seat if it is still available, and\nPick other seats randomly when they find their seat occupied\n\nReturn the probability that the nth person gets his own seat.",
        "examples": [
            "Input: n = 1\nOutput: 1.00000\nExplanation: The first person can only get the first seat.",
            "Input: n = 2\nOutput: 0.50000\nExplanation: The second person has a probability of 0.5 to get the second seat (when first person gets the first seat)."
        ],
        "constrains": "1 <= n <= 105",
        "release_time": 1672300543,
        "oracle_code": "class Solution {\n    public double nthPersonGetsNthSeat(int n) {\n        if(n==1)\n        return 1.00000;\n        return 0.50000;\n    }\n}",
        "content": "\\n```\\nclass Solution {\\n    public double nthPersonGetsNthSeat(int n) {\\n        if(n==1)\\n        return 1.00000;\\n        return 0.50000;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "valid-anagram",
        "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
        "examples": [
            "Input: s = \"anagram\", t = \"nagaram\"\nOutput: true",
            "Input: s = \"rat\", t = \"car\"\nOutput: false"
        ],
        "constrains": "1 <= s.length, t.length <= 5 * 104\ns and t consist of lowercase English letters.",
        "release_time": 1692021593,
        "oracle_code": "class Solution {\n    public boolean isAnagram(String s, String t) {\n        if(s.length()!=t.length())return false;\n        HashMap<Character,Integer> map=new HashMap<Character,Integer>();\n        for(int i=0;i<s.length();i++){\n            map.put(s.charAt(i),map.getOrDefault(s.charAt(i),0)+1);\n            map.put(t.charAt(i),map.getOrDefault(t.charAt(i),0)-1);\n        }\n        \n        for(int i=0;i<s.length();i++){\n            if(map.get(s.charAt(i))!=0)\n            return false;\n        }\n        return true;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n\\n- Space complexity:O(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isAnagram(String s, String t) {\\n        if(s.length()!=t.length())return false;\\n        HashMap<Character,Integer> map=new HashMap<Character,Integer>();\\n        for(int i=0;i<s.length();i++){\\n            map.put(s.charAt(i),map.getOrDefault(s.charAt(i),0)+1);\\n            map.put(t.charAt(i),map.getOrDefault(t.charAt(i),0)-1);\\n        }\\n        \\n        for(int i=0;i<s.length();i++){\\n            if(map.get(s.charAt(i))!=0)\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "maximum-number-of-fish-in-a-grid",
        "description": "You are given a 0-indexed 2D matrix grid of size m x n, where (r, c) represents:\n\nA land cell if grid[r][c] = 0, or\nA water cell containing grid[r][c] fish, if grid[r][c] > 0.\n\nA fisher can start at any water cell (r, c) and can do the following operations any number of times:\n\nCatch all the fish at cell (r, c), or\nMove to any adjacent water cell.\n\nReturn the maximum number of fish the fisher can catch if he chooses his starting cell optimally, or 0 if no water cell exists.\nAn adjacent cell of the cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) or (r - 1, c) if it exists.",
        "examples": [
            "Input: grid = [[0,2,1,0],[4,0,0,3],[1,0,0,4],[0,3,2,0]]\nOutput: 7\nExplanation: The fisher can start at cell (1,3) and collect 3 fish, then move to cell (2,3)\u00a0and collect 4 fish.",
            "Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,1]]\nOutput: 1\nExplanation: The fisher can start at cells (0,0) or (3,3) and collect a single fish."
        ],
        "constrains": "m == grid.length\nn == grid[i].length\n1 <= m, n <= 10\n0 <= grid[i][j] <= 10",
        "release_time": 1682784060,
        "oracle_code": "class Solution {\n    public int findMaxFish(int[][] grid) {\n        int sum=0;\n        for(int i=0;i<grid.length;i++)\n        {\n            for(int j=0;j<grid[0].length;j++)\n            {\n                if(grid[i][j]!=0)\n                {\n                    int a[]=new int[1];\n                    task(grid,i,j,a);\n                    sum=Math.max(sum,a[0]);\n                }\n            }\n        }\n        return sum;\n    }\n    public void task(int grid[][], int i, int j, int a[])\n    {\n        if(i<0 || j<0 || i>=grid.length || j>=grid[0].length || grid[i][j]==0)\n        {\n            return;\n        }\n        a[0]+=grid[i][j];\n        grid[i][j]=0;\n        task(grid,i+1,j,a);\n        task(grid,i-1,j,a);\n        task(grid,i,j+1,a);\n        task(grid,i,j-1,a);\n    }\n}",
        "content": "# Complexity\\n- Time complexity: $$O(m*n)$$\\n\\n- Space complexity: $$O(m*n)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int findMaxFish(int[][] grid) {\\n        int sum=0;\\n        for(int i=0;i<grid.length;i++)\\n        {\\n            for(int j=0;j<grid[0].length;j++)\\n            {\\n                if(grid[i][j]!=0)\\n                {\\n                    int a[]=new int[1];\\n                    task(grid,i,j,a);\\n                    sum=Math.max(sum,a[0]);\\n                }\\n            }\\n        }\\n        return sum;\\n    }\\n    public void task(int grid[][], int i, int j, int a[])\\n    {\\n        if(i<0 || j<0 || i>=grid.length || j>=grid[0].length || grid[i][j]==0)\\n        {\\n            return;\\n        }\\n        a[0]+=grid[i][j];\\n        grid[i][j]=0;\\n        task(grid,i+1,j,a);\\n        task(grid,i-1,j,a);\\n        task(grid,i,j+1,a);\\n        task(grid,i,j-1,a);\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "neighboring-bitwise-xor",
        "description": "A 0-indexed array derived with length n is derived by computing the bitwise XOR\u00a0(\u2295) of adjacent values in a binary array original of length n.\nSpecifically, for each index i in the range [0, n - 1]:\n\nIf i = n - 1, then derived[i] = original[i] \u2295 original[0].\nOtherwise, derived[i] = original[i] \u2295 original[i + 1].\n\nGiven an array derived, your task is to determine whether there exists a valid binary array original that could have formed derived.\nReturn true if such an array exists or false otherwise.\n\nA binary array is an array containing only 0's and 1's",
        "examples": [
            "Input: derived = [1,1,0]\nOutput: true\nExplanation: A valid original array that gives derived is [0,1,0].\nderived[0] = original[0] \u2295 original[1] = 0 \u2295 1 = 1 \nderived[1] = original[1] \u2295 original[2] = 1 \u2295 0 = 1\nderived[2] = original[2] \u2295 original[0] = 0 \u2295 0 = 0",
            "Input: derived = [1,1]\nOutput: true\nExplanation: A valid original array that gives derived is [0,1].\nderived[0] = original[0] \u2295 original[1] = 1\nderived[1] = original[1] \u2295 original[0] = 1",
            "Input: derived = [1,0]\nOutput: false\nExplanation: There is no valid original array that gives derived."
        ],
        "constrains": "n == derived.length\n1 <= n\u00a0<= 105\nThe values in derived\u00a0are either 0's or 1's",
        "release_time": 1684037017,
        "oracle_code": "class Solution {\n    public boolean doesValidArrayExist(int[] de) {\n        int ans=0;\n        for(int a:de){\n            if(a==1)\n                ans++;\n        }\n        return (ans%2==0);\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean doesValidArrayExist(int[] de) {\\n        int ans=0;\\n        for(int a:de){\\n            if(a==1)\\n                ans++;\\n        }\\n        return (ans%2==0);\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "cinema-seat-allocation",
        "description": "A cinema\u00a0has n\u00a0rows of seats, numbered from 1 to n\u00a0and there are ten\u00a0seats in each row, labelled from 1\u00a0to 10\u00a0as shown in the figure above.\nGiven the array reservedSeats containing the numbers of seats already reserved, for example, reservedSeats[i] = [3,8]\u00a0means the seat located in row 3 and labelled with 8\u00a0is already reserved.\nReturn the maximum number of four-person groups\u00a0you can assign on the cinema\u00a0seats. A four-person group\u00a0occupies four\u00a0adjacent seats in one single row. Seats across an aisle (such as [3,3]\u00a0and [3,4]) are not considered to be adjacent, but there is an exceptional case\u00a0on which an aisle split\u00a0a four-person group, in that case, the aisle split\u00a0a four-person group in the middle,\u00a0which means to have two people on each side.",
        "examples": [
            "Input: n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]\nOutput: 4\nExplanation: The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group.",
            "Input: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]\nOutput: 2",
            "Input: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]\nOutput: 4"
        ],
        "constrains": "1 <= n <= 10^9\n1 <=\u00a0reservedSeats.length <= min(10*n, 10^4)\nreservedSeats[i].length == 2\n1\u00a0<=\u00a0reservedSeats[i][0] <= n\n1 <=\u00a0reservedSeats[i][1] <= 10\nAll reservedSeats[i] are distinct.",
        "release_time": 1644478675,
        "oracle_code": "class Solution {\n    public int maxNumberOfFamilies(int n, int[][] reservedSeats) {\n        Map<Integer,List<Integer>> map = new HashMap<>();\n        \n        \n        for(int[] i : reservedSeats){\n            map.putIfAbsent(i[0],new ArrayList<>());\n            map.get(i[0]).add(i[1]);\n        }\n        \n        \n        int ans = 2*(n - map.size());\n        \n        for(Map.Entry<Integer,List<Integer>> entry : map.entrySet()){\n            List<Integer> seats = entry.getValue();\n            \n            boolean isLeftAisle = false, isRightAisle = false, isMiddle = false;\n            \n            for(int seat : seats){\n                \n                if(seat >= 2 && seat <= 5)\n                    isLeftAisle = true;\n                if(seat >= 6 && seat <= 9)\n                    isRightAisle = true;\n                if(seat >=4 && seat <= 7)\n                    isMiddle = true;\n                    \n                if(isLeftAisle && isRightAisle && isMiddle){\n                    break;\n                }\n            }\n            \n            if(!isLeftAisle)\n                ans += 1;\n            if(!isRightAisle)\n                ans += 1;\n            if(isLeftAisle && isRightAisle && !isMiddle)\n                ans += 1;\n            \n        }\n       \n        return ans;\n        \n    }\n}",
        "content": "I have solved this question using HashMap and Simple If-Else.\\n\\nFirst try to understand at max how many such group of 4 persons you can allow in a row if all seats are available? The answer is 2. How? \\nAs per the question, we know that there are 3 sections -\\n1. Left Aisle -> starts from column 2 and ends at column 5\\n2. Middle -> starts from column 4 and ends at column 7\\n3. Right Aisle -> starts from column 6 and ends at column 9\\n\\nColumn 1 & 10 doesnt have any importance.\\n\\nNow, Let\\'s say I take the middle (4-7) to allow group of 4 person, then I wont be able to use either of the aisle. In this case I allowed 1 group.\\n\\nNow, Let\\'s say, I take both the aisles instead of middle i.e., I put 1 group of 4 people in left aisle and another 1 group of 4 people in right aisle, then I wont be able to use middle. In this case I allowed 2 groups.\\n\\nHence I can say that if column from 2-9 is available then I will greedily choose the two aisles instead of middle and thus allowing max groups in a particular row. \\n\\nWhat if either of the aisle is blocked? \\n\\nWhenever an aisle is blocked there can be two scenarios -\\n\\n1. Only left half (2-3 column) of left aisle is blocked and not the right half of left aisle which lies in middle(4-5 column). Similarly, only right half (8-9 column) of right aisle is blocked and not the left half of right aisle which lies in middle(6-7 column) or both.\\n\\t\\t\\ta. I can use the middle if both the aisles are blocked. Then I can allow max of 1 group which is in the middle.\\n\\t\\t\\tb. I can use either middle or any one of the aisle which is free. Then I can allow max of 1 group which can be in the middle or either of the free aisle.\\n\\t\\t\\t\\nHence in this scenario, I can allow a max of 1 group.\\n\\n2. Right Half of Left Aisle (4-5 columns) or Left Half of Right Aisle (6-7 columns) or both is blocked which lies in middle (4-7 columns).\\n\\t\\t\\ta. I can use either of the free aisle. Then I can allow max of 1 group which is in either of the free aisle.\\n\\t\\t\\tb. I cannot allow group because if both aisle blocked based in above columns placement, then it blocks all the section. Then 0 groups allowed.\\n\\t\\t\\t\\nHence in this scenario, I can allow a max of 1 group if either of the aisle is free else 0.\\n\\nWhat if middle is blocked?\\n\\nWhenever middle is blocked there can be 1 scenario -\\n\\n1. Only left half (4-5 column) of middle and right half(4-5) of left aisle is blocked. Similarly, only right half (6-7 column) of middle and left half of right aisle is blocked or both.\\n\\t\\t\\ta. I can use either of the free aisle which is free. Then I can allow max of 1 group which can be in the middle or either of the free aisle or else 0 if both aisle blocked.\\n\\t\\t\\t\\nHence in this scenario, I can allow a max of 1 group if either of the aisle is free or else 0 group.\\n\\nNow that I am clear on positioning and accordingly allocationg, I need to form the conditions based on which I will keep on adding the max groups that I can allow in every row.\\n\\nOne catch here -> Let\\'s say there are **n** rows. In the **reservedSeats** array, it will have only those row information for which certain seats/columns are blocked. This means that the rows for which all seats are available can be easily taken into consideration without any checks. Based on the above explanations, I can confidently say that, if any row has all seats available, then I can allow max of 2 groups. Then I can say\\n\\t ****Initial ans = 2(TotalNoOfRows-noOfRowsNotHavingAllSeatsAvailable)**** \\n\\n\\nSteps :\\n\\n1. Create a Hashmap to store row to columns/seats mapping. For each row what all columns/seats are blocked. Row is key and value is List of columns/seats blocked in that row.\\n2. **n** is the total no of rows. Size of HashMap will give the no of rows not having all seats available.\\n3. Take initial ans =  2*(n-size of hashmap)\\n4.  Run for loop to loop through hashmap.\\n\\t\\ta. For each row, store the list of columns(seats) in a List.\\n\\t\\tb. Initialize 3 boolean variable -> leftaisle : false, rightfalse : false, middle : false. Here false means it is not blocked.\\n\\t\\tb. Loop through the above list\\n\\t\\t\\t\\t\\t\\ti. Check if the column(seat) lies in left aisle. If yes, then make leftaisle : true\\n\\t\\t\\t\\t\\t\\tii. Check if the column(seat) lies in right aisle. If yes, then make rightaisle : true\\n\\t\\t\\t\\t\\t\\tiii. Check if the column(seat) lies in middle. If yes, then make middle : true\\n\\t\\t\\t\\t\\t\\tiv. Check if all the three boolean variables(three sections) are blocked i.e., having true as values, then terminate the loop. This step is to avoid further checks as it doesn\\'t make any sense to keep on checking if at any point I found that I cannot use any of the sections.\\n\\t\\tc. Check if leftaisle is false which means its free, then add 1 to ans.\\n\\t\\td. Check if rightaisle is false which means its free, then add 1 to ans.\\n\\t\\te. Check if middle is false which means its free but both the aisles are true which means its blocked, then add 1 to ans;\\n5. Return ans;\\t\\n\\n\\n```\\nclass Solution {\\n    public int maxNumberOfFamilies(int n, int[][] reservedSeats) {\\n        Map<Integer,List<Integer>> map = new HashMap<>();\\n        \\n        \\n        for(int[] i : reservedSeats){\\n            map.putIfAbsent(i[0],new ArrayList<>());\\n            map.get(i[0]).add(i[1]);\\n        }\\n        \\n        \\n        int ans = 2*(n - map.size());\\n        \\n        for(Map.Entry<Integer,List<Integer>> entry : map.entrySet()){\\n            List<Integer> seats = entry.getValue();\\n            \\n            boolean isLeftAisle = false, isRightAisle = false, isMiddle = false;\\n            \\n            for(int seat : seats){\\n                \\n                if(seat >= 2 && seat <= 5)\\n                    isLeftAisle = true;\\n                if(seat >= 6 && seat <= 9)\\n                    isRightAisle = true;\\n                if(seat >=4 && seat <= 7)\\n                    isMiddle = true;\\n                    \\n                if(isLeftAisle && isRightAisle && isMiddle){\\n                    break;\\n                }\\n            }\\n            \\n            if(!isLeftAisle)\\n                ans += 1;\\n            if(!isRightAisle)\\n                ans += 1;\\n            if(isLeftAisle && isRightAisle && !isMiddle)\\n                ans += 1;\\n            \\n        }\\n       \\n        return ans;\\n        \\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "minimum-operations-to-make-array-equal",
        "description": "You have an array arr of length n where arr[i] = (2 * i) + 1 for all valid values of i (i.e.,\u00a00 <= i < n).\nIn one operation, you can select two indices x and y where 0 <= x, y < n and subtract 1 from arr[x] and add 1 to arr[y] (i.e., perform arr[x] -=1 and arr[y] += 1). The goal is to make all the elements of the array equal. It is guaranteed that all the elements of the array can be made equal using some operations.\nGiven an integer n, the length of the array, return the minimum number of operations needed to make all the elements of arr equal.",
        "examples": [
            "Input: n = 3\nOutput: 2\nExplanation: arr = [1, 3, 5]\nFirst operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]\nIn the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].",
            "Input: n = 6\nOutput: 9"
        ],
        "constrains": "1 <= n <= 104",
        "release_time": 1691588994,
        "oracle_code": "class Solution {\n    public int minOperations(int n) {\n        int result = 0;\n        \n        if (n % 2 == 0) {\n            result = (n / 2) * (n / 2);\n        } else {\n            result = ((n - 1) / 2) * ((n + 1) / 2);\n        }\n        \n        return result;\n    }\n}",
        "content": "# Intuition\\njust observe the pattern\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\no(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minOperations(int n) {\\n        int result = 0;\\n        \\n        if (n % 2 == 0) {\\n            result = (n / 2) * (n / 2);\\n        } else {\\n            result = ((n - 1) / 2) * ((n + 1) / 2);\\n        }\\n        \\n        return result;\\n    }\\n}\\n\\n```",
        "level": "medium"
    },
    {
        "slug": "same-tree",
        "description": "Given the roots of two binary trees p and q, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.",
        "examples": [
            "Input: p = [1,2,3], q = [1,2,3]\nOutput: true",
            "Input: p = [1,2], q = [1,null,2]\nOutput: false",
            "Input: p = [1,2,1], q = [1,1,2]\nOutput: false"
        ],
        "constrains": "The number of nodes in both trees is in the range [0, 100].\n-104 <= Node.val <= 104",
        "release_time": 1691573493,
        "oracle_code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n   \n    public boolean isSameTree(TreeNode p, TreeNode q) {\n     if (p == null && q == null) {\n            return true;\n        }\n        \n        if (p == null || q == null) {\n            return false;\n        }\n        \n        if (p.val != q.val) {\n            return false;\n        }\n        \n        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n\n        \n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n   \\n    public boolean isSameTree(TreeNode p, TreeNode q) {\\n     if (p == null && q == null) {\\n            return true;\\n        }\\n        \\n        if (p == null || q == null) {\\n            return false;\\n        }\\n        \\n        if (p.val != q.val) {\\n            return false;\\n        }\\n        \\n        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\\n\\n        \\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "determine-the-winner-of-a-bowling-game",
        "description": "You are given two 0-indexed integer arrays player1 and player2, that represent the number of pins that player 1 and player 2 hit in a bowling game, respectively.\nThe bowling game consists of n turns, and the number of pins in each turn is exactly 10.\nAssume a player hit xi pins in the ith turn. The value of the ith turn for the player is:\n\n2xi if the player hit 10 pins in any of the previous two turns.\nOtherwise, It is xi.\n\nThe score of the player is the sum of the values of their n turns.\nReturn\n\n1 if the score of player 1 is more than the score of player 2,\n2 if the score of player 2 is more than the score of player 1, and\n0 in case of a draw.",
        "examples": [
            "Input: player1 = [4,10,7,9], player2 = [6,5,2,3]\nOutput: 1\nExplanation: The score of player1 is 4 + 10 + 2*7 + 2*9 = 46.\nThe score of player2 is 6 + 5 + 2 + 3 = 16.\nScore of player1 is more than the score of player2, so, player1 is the winner, and the answer is 1.",
            "Input: player1 = [3,5,7,6], player2 = [8,10,10,2]\nOutput: 2\nExplanation: The score of player1 is 3 + 5 + 7 + 6 = 21.\nThe score of player2 is 8 + 10 + 2*10 + 2*2 = 42.\nScore of player2 is more than the score of player1, so, player2 is the winner, and the answer is 2.",
            "Input: player1 = [2,3], player2 = [4,1]\nOutput: 0\nExplanation: The score of player1 is 2 + 3 = 5\nThe score of player2 is 4 + 1 = 5\nThe score of player1 equals to the score of player2, so, there is a draw, and the answer is 0."
        ],
        "constrains": "n == player1.length == player2.length\n1 <= n <= 1000\n0 <= player1[i], player2[i] <= 10",
        "release_time": 1690174250,
        "oracle_code": "class Solution {\n    public int isWinner(int[] player1, int[] player2) {\n        int i=1,j=i-1,k=i-2;\n        int p1=player1[0],p2=player2[0];\n        while(i<player1.length){\n            if((j>=0 && player1[j]==10 ) || (k>=0 && player1[k]==10)){\n                p1+=2*player1[i];\n            }\n            else{\n                p1+=player1[i];\n            }\n            i++;\n            j++;\n            k++;\n        }\n        int l=1,m=l-1,n=l-2;\n        while(l<player2.length){\n            if((m>=0 && player2[m]==10 ) || (n>=0 && player2[n]==10)){\n                p2+=2*player2[l];\n            }\n            else{\n                p2+=player2[l];\n            }\n            l++;\n            m++;\n            n++;\n        }\n        if(p1>p2) return 1;\n        else if(p1==p2) return 0;\n        else return 2;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int isWinner(int[] player1, int[] player2) {\\n        int i=1,j=i-1,k=i-2;\\n        int p1=player1[0],p2=player2[0];\\n        while(i<player1.length){\\n            if((j>=0 && player1[j]==10 ) || (k>=0 && player1[k]==10)){\\n                p1+=2*player1[i];\\n            }\\n            else{\\n                p1+=player1[i];\\n            }\\n            i++;\\n            j++;\\n            k++;\\n        }\\n        int l=1,m=l-1,n=l-2;\\n        while(l<player2.length){\\n            if((m>=0 && player2[m]==10 ) || (n>=0 && player2[n]==10)){\\n                p2+=2*player2[l];\\n            }\\n            else{\\n                p2+=player2[l];\\n            }\\n            l++;\\n            m++;\\n            n++;\\n        }\\n        if(p1>p2) return 1;\\n        else if(p1==p2) return 0;\\n        else return 2;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "matrix-block-sum",
        "description": "Given a m x n matrix mat and an integer k, return a matrix answer where each answer[i][j] is the sum of all elements mat[r][c] for:\n\ni - k <= r <= i + k,\nj - k <= c <= j + k, and\n(r, c) is a valid position in the matrix.",
        "examples": [
            "Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1\nOutput: [[12,21,16],[27,45,33],[24,39,28]]",
            "Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2\nOutput: [[45,45,45],[45,45,45],[45,45,45]]"
        ],
        "constrains": "m ==\u00a0mat.length\nn ==\u00a0mat[i].length\n1 <= m, n, k <= 100\n1 <= mat[i][j] <= 100",
        "release_time": 1682501669,
        "oracle_code": "class Solution {\n    public int[][] matrixBlockSum(int[][] mat, int k) {\n        int[][] answer = new int[mat.length][mat[0].length];\n\n        for(int i = 0; i < mat.length; i++) {\n            for(int j = 0; j < mat[0].length; j++) {\n                int rowStart = i-k;\n                int rowEnd = i+k;\n                int colStart = j-k;\n                int colEnd = j+k;\n\n                if(rowStart < 0) {\n                    rowStart = 0;\n                }\n\n                if(rowEnd >= mat.length) {\n                    rowEnd = mat.length - 1;\n                }\n\n                if(colStart < 0) {\n                    colStart = 0;\n                }\n\n                if(colEnd >= mat[0].length) {\n                    colEnd = mat[0].length - 1;\n                }\n\n                answer[i][j] = blockSum(mat, rowStart, rowEnd, colStart, colEnd);\n            }\n        }\n\n        return answer;\n    }\n\n    private int blockSum(int[][] mat, int rowStart, int rowEnd, int colStart, int colEnd) {\n        int sum = 0;\n\n        for(int i = rowStart; i <= rowEnd; i++) {\n            for(int j = colStart; j <= colEnd; j++) {\n                sum += mat[i][j];\n            }\n        }\n        return sum;\n    }\n}",
        "content": "# Code\\n```\\nclass Solution {\\n    public int[][] matrixBlockSum(int[][] mat, int k) {\\n        int[][] answer = new int[mat.length][mat[0].length];\\n\\n        for(int i = 0; i < mat.length; i++) {\\n            for(int j = 0; j < mat[0].length; j++) {\\n                int rowStart = i-k;\\n                int rowEnd = i+k;\\n                int colStart = j-k;\\n                int colEnd = j+k;\\n\\n                if(rowStart < 0) {\\n                    rowStart = 0;\\n                }\\n\\n                if(rowEnd >= mat.length) {\\n                    rowEnd = mat.length - 1;\\n                }\\n\\n                if(colStart < 0) {\\n                    colStart = 0;\\n                }\\n\\n                if(colEnd >= mat[0].length) {\\n                    colEnd = mat[0].length - 1;\\n                }\\n\\n                answer[i][j] = blockSum(mat, rowStart, rowEnd, colStart, colEnd);\\n            }\\n        }\\n\\n        return answer;\\n    }\\n\\n    private int blockSum(int[][] mat, int rowStart, int rowEnd, int colStart, int colEnd) {\\n        int sum = 0;\\n\\n        for(int i = rowStart; i <= rowEnd; i++) {\\n            for(int j = colStart; j <= colEnd; j++) {\\n                sum += mat[i][j];\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "first-completely-painted-row-or-column",
        "description": "You are given a 0-indexed integer array arr, and an m x n integer matrix mat. arr and mat both contain all the integers in the range [1, m * n].\nGo through each index i in arr starting from index 0 and paint the cell in mat containing the integer arr[i].\nReturn the smallest index i at which either a row or a column will be completely painted in mat.",
        "examples": [
            "Input: arr = [1,3,4,2], mat = [[1,4],[2,3]]\nOutput: 2\nExplanation: The moves are shown in order, and both the first row and second column of the matrix become fully painted at arr[2].",
            "Input: arr = [2,8,7,4,1,3,5,6,9], mat = [[3,2,5],[1,4,6],[8,7,9]]\nOutput: 3\nExplanation: The second column becomes fully painted at arr[3]."
        ],
        "constrains": "m == mat.length\nn = mat[i].length\narr.length == m * n\n1 <= m, n <= 105\n1 <= m * n <= 105\n1 <= arr[i], mat[r][c] <= m * n\nAll the integers of arr are unique.\nAll the integers of mat are unique.",
        "release_time": 1682933570,
        "oracle_code": "class Solution {\n    public int firstCompleteIndex(int[] arr, int[][] mat) {\n        int ind=0;\n        int m=mat.length,n=mat[0].length;\n        int row[]=new int[m];\n        int col[]=new int[n];\n        boolean flag=true;;\n        while(flag){\n            int i=0;\n            for(i=0;i<m;i++){\n                int j=0;\n                for(j=0;j<n;j++){\n                    if(mat[i][j]==arr[ind]){\n                        ind++;\n                        row[i]++;\n                        col[j]++;\n                    }\n                    if(row[i]==n || col[j]==m){\n                        flag=false;\n                        break;\n                    }\n                }\n                if(!flag)   break;\n            }\n        }\n       return ind-1;\n    }\n}",
        "content": "\\nUnoptimized but still works\\n# Complexity\\n- Time complexity:O(k*m*n)\\n- Where k is the number of operation required to make one wall to be colored\\n- m is number of rows\\n- n is number of columns\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(m)+O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n# Code\\n```\\nclass Solution {\\n    public int firstCompleteIndex(int[] arr, int[][] mat) {\\n        int ind=0;\\n        int m=mat.length,n=mat[0].length;\\n        int row[]=new int[m];\\n        int col[]=new int[n];\\n        boolean flag=true;;\\n        while(flag){\\n            int i=0;\\n            for(i=0;i<m;i++){\\n                int j=0;\\n                for(j=0;j<n;j++){\\n                    if(mat[i][j]==arr[ind]){\\n                        ind++;\\n                        row[i]++;\\n                        col[j]++;\\n                    }\\n                    if(row[i]==n || col[j]==m){\\n                        flag=false;\\n                        break;\\n                    }\\n                }\\n                if(!flag)   break;\\n            }\\n        }\\n       return ind-1;\\n    }\\n}\\n```\\nOptimized Version of the same:\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n- m is number of rows\\n- n is number of columns\\n- Space complexity:O(m)+O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n# Code\\n```\\nclass Solution {\\n    public int firstCompleteIndex(int[] arr, int[][] mat) {\\n        HashMap<Integer,int[]>hm=new HashMap<>();\\n        for(int i=0;i<mat.length;i++){\\n            for(int j=0;j<mat[0].length;j++){\\n                hm.put(mat[i][j],new int[]{i,j});\\n            }\\n        }\\n        int row[]=new int[mat.length];\\n        int col[]=new int[mat[0].length];\\n        int i=0;\\n        for(i=0;i<arr.length;i++){\\n            int curr[]=hm.get(arr[i]);\\n            row[curr[0]]++;\\n            col[curr[1]]++;\\n            if(row[curr[0]]==mat[0].length ||\\n                col[curr[1]]==mat.length){\\n                    break;\\n            }\\n        }\\n        return i;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "minimum-number-of-swaps-to-make-the-string-balanced",
        "description": "You are given a 0-indexed string s of even length n. The string consists of exactly n / 2 opening brackets '[' and n / 2 closing brackets ']'.\nA string is called balanced if and only if:\n\nIt is the empty string, or\nIt can be written as AB, where both A and B are balanced strings, or\nIt can be written as [C], where C is a balanced string.\n\nYou may swap the brackets at any two indices any number of times.\nReturn the minimum number of swaps to make s balanced.",
        "examples": [
            "Input: s = \"][][\"\nOutput: 1\nExplanation: You can make the string balanced by swapping index 0 with index 3.\nThe resulting string is \"[[]]\".",
            "Input: s = \"]]][[[\"\nOutput: 2\nExplanation: You can do the following to make the string balanced:\n- Swap index 0 with index 4. s = \"[]][][\".\n- Swap index 1 with index 5. s = \"[[][]]\".\nThe resulting string is \"[[][]]\".",
            "Input: s = \"[]\"\nOutput: 0\nExplanation: The string is already balanced."
        ],
        "constrains": "n == s.length\n2 <= n <= 106\nn is even.\ns[i] is either '[' or ']'.\nThe number of opening brackets '[' equals n / 2, and the number of closing brackets ']' equals n / 2.",
        "release_time": 1686334819,
        "oracle_code": "class Solution {\n    public int minSwaps(String s) {\n        return util1(s);\n    }\n    public int util1(String str) {\n        Stack<Character> s = new Stack<>();\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) == '[') {\n                s.push(str.charAt(i));\n            } else {\n                if (s.isEmpty() == false && s.peek() == '[') {\n                    s.pop();\n                } else {\n                    s.push(str.charAt(i));\n                }\n            }\n        }\n        double pairs = s.size() / 2;\n        double a = pairs / 2.0;\n        int ans = (int) Math.ceil(a);\n        return ans;\n    }\n}",
        "content": "the trick behind is fairly easy\\n\\nfor the number of pairs which are not correct, the amount of swaps required to make them correct is Math.ceil(a), where a is the number of pairs which are not correct.\\n\\nfor eg\\nfor 5 incorrect pairs, we need 3 swaps\\nfor 3 incorrect pairs, we need 2 swaps\\nfor 2 incorrect pairs, we need 1 swap\\n\\nso simply, \\nwe need to firstly write code to remove all the valid pairs, that ways only the pairs which are incorrect will be in the stack\\nthen we simply do the calculations.\\n\\nrest the code should be self explanatory.\\n\\n# Code\\n```\\nclass Solution {\\n    public int minSwaps(String s) {\\n        return util1(s);\\n    }\\n    public int util1(String str) {\\n        Stack<Character> s = new Stack<>();\\n        for (int i = 0; i < str.length(); i++) {\\n            if (str.charAt(i) == \\'[\\') {\\n                s.push(str.charAt(i));\\n            } else {\\n                if (s.isEmpty() == false && s.peek() == \\'[\\') {\\n                    s.pop();\\n                } else {\\n                    s.push(str.charAt(i));\\n                }\\n            }\\n        }\\n        double pairs = s.size() / 2;\\n        double a = pairs / 2.0;\\n        int ans = (int) Math.ceil(a);\\n        return ans;\\n    }\\n}\\n```\\nyou can check out my github repository where i am uploading famous interview questions topic wise with solutions.\\nlink-- https://github.com/Abhaydutt2003/DataStructureAndAlgoPractice \\nkindly upvote if you like my solution. you can ask doubts below.\\n    \\n",
        "level": "medium"
    },
    {
        "slug": "design-graph-with-shortest-path-calculator",
        "description": "There is a directed weighted graph that consists of n nodes numbered from 0 to n - 1. The edges of the graph are initially represented by the given array edges where edges[i] = [fromi, toi, edgeCosti] meaning that there is an edge from fromi to toi with the cost edgeCosti.\nImplement the Graph class:\n\nGraph(int n, int[][] edges) initializes the object with n nodes and the given edges.\naddEdge(int[] edge) adds an edge to the list of edges where edge = [from, to, edgeCost]. It is guaranteed that there is no edge between the two nodes before adding this one.\nint shortestPath(int node1, int node2) returns the minimum cost of a path from node1 to node2. If no path exists, return -1. The cost of a path is the sum of the costs of the edges in the path.",
        "examples": [
            "Input\n[\"Graph\", \"shortestPath\", \"shortestPath\", \"addEdge\", \"shortestPath\"]\n[[4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]], [3, 2], [0, 3], [[1, 3, 4]], [0, 3]]\nOutput\n[null, 6, -1, null, 6]\n\nExplanation\nGraph g = new Graph(4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]);\ng.shortestPath(3, 2); // return 6. The shortest path from 3 to 2 in the first diagram above is 3 -> 0 -> 1 -> 2 with a total cost of 3 + 2 + 1 = 6.\ng.shortestPath(0, 3); // return -1. There is no path from 0 to 3.\ng.addEdge([1, 3, 4]); // We add an edge from node 1 to node 3, and we get the second diagram above.\ng.shortestPath(0, 3); // return 6. The shortest path from 0 to 3 now is 0 -> 1 -> 3 with a total cost of 2 + 4 = 6."
        ],
        "constrains": "1 <= n <= 100\n0 <= edges.length <= n * (n - 1)\nedges[i].length == edge.length == 3\n0 <= fromi, toi, from, to, node1, node2 <= n - 1\n1 <= edgeCosti, edgeCost <= 106\nThere are no repeated edges and no self-loops in the graph at any point.\nAt most 100 calls will be made for addEdge.\nAt most 100 calls will be made for shortestPath.",
        "release_time": 1681574555,
        "oracle_code": "class Graph {\n    List<List<int[]>> adj=new ArrayList<>();\n    int n;\n    public Graph(int n, int[][] edges) {\n        for(int i=0;i<n;i++){\n            adj.add(new ArrayList<>());\n        }\n        this.n=n;\n        for(int edge[]: edges){\n            adj.get(edge[0]).add(new int[]{edge[1],edge[2]});\n        }\n    }\n    \n    public void addEdge(int[] edge) {\n        adj.get(edge[0]).add(new int[]{edge[1],edge[2]});\n    }\n    \n    public int shortestPath(int node1, int node2) {\n        int dist[]=new int[n+1];\n        Arrays.fill(dist,Integer.MAX_VALUE);\n        dist[node1]=0;\n        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)->a[1]-b[1]);\n        pq.add(new int[]{node1,0});\n        while(!pq.isEmpty()){\n            int u=pq.poll()[0];\n            for(int p[]: adj.get(u)){\n                int v=p[0];\n                int w=p[1];\n                if(dist[v]>dist[u]+w){\n                    dist[v]=dist[u]+w;\n                    pq.add(new int[]{v,dist[v]});\n                }\n            }\n        }\n        if(dist[node2]==Integer.MAX_VALUE){\n                return -1;\n        }\n        return dist[node2];\n    }\n    \n}\n\n/**\n * Your Graph object will be instantiated and called as such:\n * Graph obj = new Graph(n, edges);\n * obj.addEdge(edge);\n * int param_2 = obj.shortestPath(node1,node2);\n */",
        "content": "\\n\\n# Code\\n```\\nclass Graph {\\n    List<List<int[]>> adj=new ArrayList<>();\\n    int n;\\n    public Graph(int n, int[][] edges) {\\n        for(int i=0;i<n;i++){\\n            adj.add(new ArrayList<>());\\n        }\\n        this.n=n;\\n        for(int edge[]: edges){\\n            adj.get(edge[0]).add(new int[]{edge[1],edge[2]});\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        adj.get(edge[0]).add(new int[]{edge[1],edge[2]});\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        int dist[]=new int[n+1];\\n        Arrays.fill(dist,Integer.MAX_VALUE);\\n        dist[node1]=0;\\n        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)->a[1]-b[1]);\\n        pq.add(new int[]{node1,0});\\n        while(!pq.isEmpty()){\\n            int u=pq.poll()[0];\\n            for(int p[]: adj.get(u)){\\n                int v=p[0];\\n                int w=p[1];\\n                if(dist[v]>dist[u]+w){\\n                    dist[v]=dist[u]+w;\\n                    pq.add(new int[]{v,dist[v]});\\n                }\\n            }\\n        }\\n        if(dist[node2]==Integer.MAX_VALUE){\\n                return -1;\\n        }\\n        return dist[node2];\\n    }\\n    \\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */",
        "level": "hard"
    },
    {
        "slug": "number-of-arithmetic-triplets",
        "description": "You are given a 0-indexed, strictly increasing integer array nums and a positive integer diff. A triplet (i, j, k) is an arithmetic triplet if the following conditions are met:\n\ni < j < k,\nnums[j] - nums[i] == diff, and\nnums[k] - nums[j] == diff.\n\nReturn the number of unique arithmetic triplets.",
        "examples": [
            "Input: nums = [0,1,4,6,7,10], diff = 3\nOutput: 2\nExplanation:\n(1, 2, 4) is an arithmetic triplet because both 7 - 4 == 3 and 4 - 1 == 3.\n(2, 4, 5) is an arithmetic triplet because both 10 - 7 == 3 and 7 - 4 == 3.",
            "Input: nums = [4,5,6,7,8,9], diff = 2\nOutput: 2\nExplanation:\n(0, 2, 4) is an arithmetic triplet because both 8 - 6 == 2 and 6 - 4 == 2.\n(1, 3, 5) is an arithmetic triplet because both 9 - 7 == 2 and 7 - 5 == 2."
        ],
        "constrains": "3 <= nums.length <= 200\n0 <= nums[i] <= 200\n1 <= diff <= 50\nnums is strictly increasing.",
        "release_time": 1688291896,
        "oracle_code": "class Solution {\n    public int arithmeticTriplets(int[] nums, int diff) {\n        int ans =0;\n        for(int i=0; i<nums.length-2;i++){\n            int count =0;\n            for(int j=i+1; j<nums.length; j++){\n                if(nums[j]-nums[i]==diff || nums[j]-nums[i]==2*diff){\n                    count++;\n                }\n            }\n            if(count >= 2){\n                ans++;\n            }\n        }\n\n        return ans;\n        \n    }\n}",
        "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe have to find a triplet of (i, j, k) such that \\ni<j<k , \\nnums[j] - nums[i] == diff, and \\nnums[k] - nums[j] == diff\\n\\nin other word we can also say nums[k]-nums[i]== 2*diff. To reduce the time complexity I use only 2 loop remove the loop for k and include it in j iterartion such that nums[j]-nums[i] == 2*diff. So in every iterartion of j we will get 2 condition nums[j]-nums[i] == diff and nums[j]-nums[i] == 2*diff when these 2 condition get satisfied in j iterartion, We get 1 count as answer. So for every iteration when count>=2 we add 1 to ans and at last return it.\\n\\n# Complexity\\n- Time complexity: O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int arithmeticTriplets(int[] nums, int diff) {\\n        int ans =0;\\n        for(int i=0; i<nums.length-2;i++){\\n            int count =0;\\n            for(int j=i+1; j<nums.length; j++){\\n                if(nums[j]-nums[i]==diff || nums[j]-nums[i]==2*diff){\\n                    count++;\\n                }\\n            }\\n            if(count >= 2){\\n                ans++;\\n            }\\n        }\\n\\n        return ans;\\n        \\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "rearrange-characters-to-make-target-string",
        "description": "You are given two 0-indexed strings s and target. You can take some letters from s and rearrange them to form new strings.\nReturn the maximum number of copies of target that can be formed by taking letters from s and rearranging them.",
        "examples": [
            "Input: s = \"ilovecodingonleetcode\", target = \"code\"\nOutput: 2\nExplanation:\nFor the first copy of \"code\", take the letters at indices 4, 5, 6, and 7.\nFor the second copy of \"code\", take the letters at indices 17, 18, 19, and 20.\nThe strings that are formed are \"ecod\" and \"code\" which can both be rearranged into \"code\".\nWe can make at most two copies of \"code\", so we return 2.",
            "Input: s = \"abcba\", target = \"abc\"\nOutput: 1\nExplanation:\nWe can make one copy of \"abc\" by taking the letters at indices 0, 1, and 2.\nWe can make at most one copy of \"abc\", so we return 1.\nNote that while there is an extra 'a' and 'b' at indices 3 and 4, we cannot reuse the letter 'c' at index 2, so we cannot make a second copy of \"abc\".",
            "Input: s = \"abbaccaddaeea\", target = \"aaaaa\"\nOutput: 1\nExplanation:\nWe can make one copy of \"aaaaa\" by taking the letters at indices 0, 3, 6, 9, and 12.\nWe can make at most one copy of \"aaaaa\", so we return 1."
        ],
        "constrains": "1 <= s.length <= 100\n1 <= target.length <= 10\ns and target consist of lowercase English letters.",
        "release_time": 1673614634,
        "oracle_code": "class Solution {\n    public int rearrangeCharacters(String s, String target) {\n        int[] cnt1 = new int[26];\n        int[] cnt2 = new int[26];\n        for (int i = 0; i < s.length(); ++i) {\n            ++cnt1[s.charAt(i) - 'a'];\n        }\n        for (int i = 0; i < target.length(); ++i) {\n            ++cnt2[target.charAt(i) - 'a'];\n        }\n        int ans = 100;\n        for (int i = 0; i < 26; ++i) {\n            if (cnt2[i] > 0) {\n                ans = Math.min(ans, cnt1[i] / cnt2[i]);\n            }\n        }\n        return ans;\n    }\n}",
        "content": "\\n# Code\\n```\\nclass Solution {\\n    public int rearrangeCharacters(String s, String target) {\\n        int[] cnt1 = new int[26];\\n        int[] cnt2 = new int[26];\\n        for (int i = 0; i < s.length(); ++i) {\\n            ++cnt1[s.charAt(i) - \\'a\\'];\\n        }\\n        for (int i = 0; i < target.length(); ++i) {\\n            ++cnt2[target.charAt(i) - \\'a\\'];\\n        }\\n        int ans = 100;\\n        for (int i = 0; i < 26; ++i) {\\n            if (cnt2[i] > 0) {\\n                ans = Math.min(ans, cnt1[i] / cnt2[i]);\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "relative-ranks",
        "description": "You are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. All the scores are guaranteed to be unique.\nThe athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. The placement of each athlete determines their rank:\n\nThe 1st place athlete's rank is \"Gold Medal\".\nThe 2nd place athlete's rank is \"Silver Medal\".\nThe 3rd place athlete's rank is \"Bronze Medal\".\nFor the 4th place to the nth place athlete, their rank is their placement number (i.e., the xth place athlete's rank is \"x\").\n\nReturn an array answer of size n where answer[i] is the rank of the ith athlete.",
        "examples": [
            "Input: score = [5,4,3,2,1]\nOutput: [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]\nExplanation: The placements are [1st, 2nd, 3rd, 4th, 5th].",
            "Input: score = [10,3,8,9,4]\nOutput: [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]\nExplanation: The placements are [1st, 5th, 3rd, 2nd, 4th]."
        ],
        "constrains": "n == score.length\n1 <= n <= 104\n0 <= score[i] <= 106\nAll the values in score are unique.",
        "release_time": 1683184626,
        "oracle_code": "class Solution {\n    public String[] findRelativeRanks(int[] score) {\n         int n=score.length;\n        PriorityQueue<Integer> pq=new PriorityQueue<>((a,b)-> score[b]-score[a]);\n        for(int i=0;i<n;i++) pq.add(i);\n      String[] ans = new String[n];\n                int i=1;\n        while(!pq.isEmpty()){\n            int idx=pq.poll();\n         if(i==1)   { ans[idx]=\"Gold Medal\"; i++;}\n         else if(i==2)   { ans[idx]=\"Silver Medal\"; i++;}\n         else if(i==3)   { ans[idx]=\"Bronze Medal\"; i++;}\n         else ans[idx]=Integer.toString(i++);\n        }\n        return ans;  \n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String[] findRelativeRanks(int[] score) {\\n         int n=score.length;\\n        PriorityQueue<Integer> pq=new PriorityQueue<>((a,b)-> score[b]-score[a]);\\n        for(int i=0;i<n;i++) pq.add(i);\\n      String[] ans = new String[n];\\n                int i=1;\\n        while(!pq.isEmpty()){\\n            int idx=pq.poll();\\n         if(i==1)   { ans[idx]=\"Gold Medal\"; i++;}\\n         else if(i==2)   { ans[idx]=\"Silver Medal\"; i++;}\\n         else if(i==3)   { ans[idx]=\"Bronze Medal\"; i++;}\\n         else ans[idx]=Integer.toString(i++);\\n        }\\n        return ans;  \\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "missing-number",
        "description": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.",
        "examples": [
            "Input: nums = [3,0,1]\nOutput: 2\nExplanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.",
            "Input: nums = [0,1]\nOutput: 2\nExplanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.",
            "Input: nums = [9,6,4,2,3,5,7,0,1]\nOutput: 8\nExplanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums."
        ],
        "constrains": "n == nums.length\n1 <= n <= 104\n0 <= nums[i] <= n\nAll the numbers of nums are unique.",
        "release_time": 1685629239,
        "oracle_code": "class Solution {\n    public int missingNumber(int[] nums) {\n\n\n        int res = 0;\n        for (int i = 0; i < nums.length; i++) {\n            res += ((i + 1) - nums[i]);\n        }\n        return res;\n\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int missingNumber(int[] nums) {\\n\\n\\n        int res = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            res += ((i + 1) - nums[i]);\\n        }\\n        return res;\\n\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "intersection-of-two-linked-lists",
        "description": "Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.\nFor example, the following two linked lists begin to intersect at node c1:\n\nThe test cases are generated such that there are no cycles anywhere in the entire linked structure.\nNote that the linked lists must retain their original structure after the function returns.\nCustom Judge:\nThe inputs to the judge are given as follows (your program is not given these inputs):\n\nintersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.\nlistA - The first linked list.\nlistB - The second linked list.\nskipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.\nskipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.\n\nThe judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.",
        "examples": [
            "Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\nOutput: Intersected at '8'\nExplanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n- Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.",
            "Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\nOutput: Intersected at '2'\nExplanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.",
            "Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\nOutput: No intersection\nExplanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null."
        ],
        "constrains": "The number of nodes of listA is in the m.\nThe number of nodes of listB is in the n.\n1 <= m, n <= 3 * 104\n1 <= Node.val <= 105\n0 <= skipA <\u00a0m\n0 <= skipB <\u00a0n\nintersectVal is 0 if listA and listB do not intersect.\nintersectVal == listA[skipA] == listB[skipB] if listA and listB intersect.",
        "release_time": 1688896252,
        "oracle_code": "public class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n\n        ListNode a = headA;\n        ListNode b = headB;\n\n        while(a!=b) {\n            a = a==null ? headB : a.next;\n            b = b==null ? headA : b.next;\n        }\n        return a;\n    }\n}",
        "content": "# Code\\n```\\npublic class Solution {\\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\\n\\n        ListNode a = headA;\\n        ListNode b = headB;\\n\\n        while(a!=b) {\\n            a = a==null ? headB : a.next;\\n            b = b==null ? headA : b.next;\\n        }\\n        return a;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "number-of-students-doing-homework-at-a-given-time",
        "description": "Given two integer arrays startTime and endTime and given an integer queryTime.\nThe ith student started doing their homework at the time startTime[i] and finished it at time endTime[i].\nReturn the number of students doing their homework at time queryTime. More formally, return the number of students where queryTime lays in the interval [startTime[i], endTime[i]] inclusive.",
        "examples": [
            "Input: startTime = [1,2,3], endTime = [3,2,7], queryTime = 4\nOutput: 1\nExplanation: We have 3 students where:\nThe first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.\nThe second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.\nThe third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4.",
            "Input: startTime = [4], endTime = [4], queryTime = 4\nOutput: 1\nExplanation: The only student was doing their homework at the queryTime."
        ],
        "constrains": "startTime.length == endTime.length\n1 <= startTime.length <= 100\n1 <= startTime[i] <= endTime[i] <= 1000\n1 <= queryTime <= 1000",
        "release_time": 1690396136,
        "oracle_code": "class Solution {\n    public int busyStudent(int[] startTime, int[] endTime, int queryTime) {\n        int n=endTime.length;\n    int cnt=0;\n        for(int i=0;i<n;i++)\n        {\n            if(endTime[i]>=queryTime && queryTime>=startTime[i] )\n            {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int busyStudent(int[] startTime, int[] endTime, int queryTime) {\\n        int n=endTime.length;\\n    int cnt=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(endTime[i]>=queryTime && queryTime>=startTime[i] )\\n            {\\n                cnt++;\\n            }\\n        }\\n        return cnt;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "find-first-palindromic-string-in-the-array",
        "description": "Given an array of strings words, return the first palindromic string in the array. If there is no such string, return an empty string \"\".\nA string is palindromic if it reads the same forward and backward.",
        "examples": [
            "Input: words = [\"abc\",\"car\",\"ada\",\"racecar\",\"cool\"]\nOutput: \"ada\"\nExplanation: The first string that is palindromic is \"ada\".\nNote that \"racecar\" is also palindromic, but it is not the first.",
            "Input: words = [\"notapalindrome\",\"racecar\"]\nOutput: \"racecar\"\nExplanation: The first and only string that is palindromic is \"racecar\".",
            "Input: words = [\"def\",\"ghi\"]\nOutput: \"\"\nExplanation: There are no palindromic strings, so the empty string is returned."
        ],
        "constrains": "1 <= words.length <= 100\n1 <= words[i].length <= 100\nwords[i] consists only of lowercase English letters.",
        "release_time": 1669373945,
        "oracle_code": "class Solution {\n    public String firstPalindrome(String[] words) {\n        for (String s : words) {\n            if (isPalindrome(s)) return s;\n        }\n\n        return \"\";\n    }\n\n    public boolean isPalindrome(String s) {\n        int i = 0, j = s.length() - 1;\n\n        while (i < j) {\n            if (s.charAt(i++) != s.charAt(j--)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n// TC: O(n * k), SC: O(1)\n// n -> length of words\n// k -> length of longest string in words",
        "content": "### **Please Upvote** :D\\n##### 1. By checking if its a palindrome using two pointers:\\n```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for (String s : words) {\\n            if (isPalindrome(s)) return s;\\n        }\\n\\n        return \"\";\\n    }\\n\\n    public boolean isPalindrome(String s) {\\n        int i = 0, j = s.length() - 1;\\n\\n        while (i < j) {\\n            if (s.charAt(i++) != s.charAt(j--)) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\\n// TC: O(n * k), SC: O(1)\\n// n -> length of words\\n// k -> length of longest string in words\\n```\\n##### 2. Using strinbuilder to reverse the strings and compare:\\n```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for (String s : words){\\n            StringBuilder sb = new StringBuilder();\\n            sb.append(s).reverse();\\n\\n            if (s.equals(sb.toString())){\\n                return s;\\n            }\\n        }\\n\\n        return \"\";\\n    }\\n}\\n\\n// TC: O(n * k), SC: O(1)\\n// n -> length of words\\n// k -> length of longest string in words\\n```",
        "level": "easy"
    },
    {
        "slug": "non-decreasing-subsequences",
        "description": "Given an integer array nums, return all the different possible non-decreasing subsequences of the given array with at least two elements. You may return the answer in any order.",
        "examples": [
            "Input: nums = [4,6,7,7]\nOutput: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]",
            "Input: nums = [4,4,3,2,1]\nOutput: [[4,4]]"
        ],
        "constrains": "1 <= nums.length <= 15\n-100 <= nums[i] <= 100",
        "release_time": 1674187609,
        "oracle_code": "class Solution {\n    List<List<Integer>>vec=new ArrayList<>();\n    HashSet<List<Integer>>set=new HashSet<>();\n    void solve(int []nums, int prev, List<Integer>op, int idx){\n        if(idx==nums.length){\n            if(op.size()>1){\n                set.add(op);\n            }\n            return;\n        }\n        if(prev==-1 || nums[idx]>=nums[prev]){\n            List<Integer>op1=new ArrayList<>(op);\n            op1.add(nums[idx]);\n            solve(nums,idx,op1,idx+1);\n        }\n        solve(nums,prev,op,idx+1);\n        \n    }\n    public List<List<Integer>> findSubsequences(int[] nums) {\n        List<Integer>op=new ArrayList<>();\n        solve(nums,-1,op, 0);\n        Iterator<List<Integer>> it = set.iterator();\n        while(it.hasNext())vec.add(it.next());\n        return vec;\n    }\n}",
        "content": "\\n\\n\\n```\\nclass Solution {\\n    List<List<Integer>>vec=new ArrayList<>();\\n    HashSet<List<Integer>>set=new HashSet<>();\\n    void solve(int []nums, int prev, List<Integer>op, int idx){\\n        if(idx==nums.length){\\n            if(op.size()>1){\\n                set.add(op);\\n            }\\n            return;\\n        }\\n        if(prev==-1 || nums[idx]>=nums[prev]){\\n            List<Integer>op1=new ArrayList<>(op);\\n            op1.add(nums[idx]);\\n            solve(nums,idx,op1,idx+1);\\n        }\\n        solve(nums,prev,op,idx+1);\\n        \\n    }\\n    public List<List<Integer>> findSubsequences(int[] nums) {\\n        List<Integer>op=new ArrayList<>();\\n        solve(nums,-1,op, 0);\\n        Iterator<List<Integer>> it = set.iterator();\\n        while(it.hasNext())vec.add(it.next());\\n        return vec;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "reverse-words-in-a-string",
        "description": "Given an input string s, reverse the order of the words.\nA word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\nReturn a string of the words in reverse order concatenated by a single space.\nNote that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.",
        "examples": [
            "Input: s = \"the sky is blue\"\nOutput: \"blue is sky the\"",
            "Input: s = \"  hello world  \"\nOutput: \"world hello\"\nExplanation: Your reversed string should not contain leading or trailing spaces.",
            "Input: s = \"a good   example\"\nOutput: \"example good a\"\nExplanation: You need to reduce multiple spaces between two words to a single space in the reversed string."
        ],
        "constrains": "1 <= s.length <= 104\ns contains English letters (upper-case and lower-case), digits, and spaces ' '.\nThere is at least one word in s.\n\n\u00a0\nFollow-up:\u00a0If the string data type is mutable in your language, can\u00a0you solve it\u00a0in-place\u00a0with\u00a0O(1)\u00a0extra space?",
        "release_time": 1692301725,
        "oracle_code": "class Solution {\n    public String reverseWords(String s) {\n        StringBuilder ans = new StringBuilder();\n        for(int i=s.length()-1; i>=0; i--){\n            if(s.charAt(i)==' '){\n                continue;\n            }\n            int start=-1;\n            for(int y=i-1; y>=0; y--){\n                if(s.charAt(y)==' '){\n                    start=y;\n                    break;\n                }\n            }\n            ans.append(s.substring(start+1, i+1) + \" \");\n            i=start;\n        }\n        ans.deleteCharAt(ans.length()-1);\n        return ans.toString();\n    }\n}",
        "content": "# Approach\\n- Two Pointer Approach\\n- Using Trim and Split\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public String reverseWords(String s) {\\n        StringBuilder ans = new StringBuilder();\\n        for(int i=s.length()-1; i>=0; i--){\\n            if(s.charAt(i)==\\' \\'){\\n                continue;\\n            }\\n            int start=-1;\\n            for(int y=i-1; y>=0; y--){\\n                if(s.charAt(y)==\\' \\'){\\n                    start=y;\\n                    break;\\n                }\\n            }\\n            ans.append(s.substring(start+1, i+1) + \" \");\\n            i=start;\\n        }\\n        ans.deleteCharAt(ans.length()-1);\\n        return ans.toString();\\n    }\\n}\\n```\\n```\\nclass Solution {\\n    public String reverseWords(String s) {\\n        String[] temp = s.trim().split(\" \");\\n        StringBuilder ans = new StringBuilder();\\n        for(int i=temp.length-1; i>0; i--){\\n            if(temp[i]==\"\"){\\n                continue;\\n            }\\n            ans.append(temp[i]+\" \");\\n        }\\n        ans.append(temp[0]);\\n        return ans.toString();\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "add-two-numbers",
        "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum\u00a0as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.",
        "examples": [
            "Input: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.",
            "Input: l1 = [0], l2 = [0]\nOutput: [0]",
            "Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]"
        ],
        "constrains": "The number of nodes in each linked list is in the range [1, 100].\n0 <= Node.val <= 9\nIt is guaranteed that the list represents a number that does not have leading zeros.",
        "release_time": 1646885380,
        "oracle_code": "class Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode dummy = new ListNode(0); // creating an dummy list\n        ListNode curr = dummy; // intialising an pointer\n        int carry = 0; // intialising our carry with 0 intiall\n        // while loop will run, until l1 OR l2 not reaches null OR if they both reaches null. But our carry has some value in it. \n\t\t// We will add that as well into our list\n        while(l1 != null || l2 != null || carry == 1){\n            int sum = 0; // intialising our sum\n            if(l1 != null){ // adding l1 to our sum & moving l1\n                sum += l1.val;\n                l1 = l1.next;\n            }\n            if(l2 != null){ // adding l2 to our sum & moving l2\n                sum += l2.val;\n                l2 = l2.next;\n            }\n            sum += carry; // if we have carry then add it into our sum\n            carry = sum/10; // if we get carry, then divide it by 10 to get the carry\n            ListNode node = new ListNode(sum % 10); // the value we'll get by moduloing it, will become as new node so. add it to our list\n            curr.next = node; // curr will point to that new node if we get\n            curr = curr.next; // update the current every time\n        }\n        return dummy.next; // return dummy.next bcz, we don't want the value we have consider in it intially!!\n    }\n}",
        "content": "How\\'s going, Ladies n Gentlemen, today we are going to solve one of the coolest problem **Add Two Numbers**\\n\\nSo, what the problem statement is saying we have given 2 linkedlist we have to add them and get the sum in another linkedlist.\\n\\nWhat, am saying let\\'s understand with an example:-\\n**Input**: l1 = [1,2,4,3], l2 = [5,4,6]\\n**Output**: [6,6,0,4]\\n\\n![image](https://assets.leetcode.com/users/images/a51e18d1-45de-4ba0-aee9-fbb9c40feef1_1646883355.6593215.png)\\n\\nNow let\\'s create another list in which we will get our sum. So, that list intially we will called as dummy list with any value of your choice present in that. *I\\'ll put 0 as we indian has invented that. <^^>*\\n\\nAnd one more last thing, we\\'ll gonna create one pointer and let\\'s say i\\'ll call it **curr** which is pointing on dummy node and traverse along with it\\n\\n![image](https://assets.leetcode.com/users/images/3345cf32-d7df-4225-9ce5-510398aa489c_1646883682.1670015.png)\\n\\nAlright so, here we go ladies n gentlemen, It\\'s time to sum up these node value, for that we will create one another variable let\\'s called it **sum** and put the sum of **l1 & l2** them into our dummy list. So, we start it from all the way left go to all the way right. Now you will ask, dude what about the carry values we get after sum up.\\nWell, hold on i\\'m coming on that point don\\'t worry.\\n\\nSo, for that what you have to do is, we will intialize one more variable name **carry** if we found carry of let\\'s say 10. First we will modulo it like carry = sum % 10 i.e. carry = 10 % 10 i.e. 0 we will add 0 into our node and after that what we will do is get the carry as carry = sum / 10 i.e. carry = 10 / 10 i.e. 1. Now we are having carry as 1. So, in the next node sum of l1 & l2 we will add carry as well.\\n\\nFor sum we will use this formula :- **sum = l1 + l2 + carry**\\n\\nWe did a lot of talk, let\\'s understand it visually:-\\n* 1st step->\\n![image](https://assets.leetcode.com/users/images/c5e427d5-bcf9-42b4-b926-25771dfa7c54_1646884787.030032.png)\\n\\n* 2nd Step->\\n![image](https://assets.leetcode.com/users/images/fdc5533b-d80f-4b71-b755-b645dc126ff6_1646885015.4167643.png)\\n* 3rd Step->\\n![image](https://assets.leetcode.com/users/images/80247d16-8082-4e54-ad15-ed5cfceb3cfb_1646885221.7208884.png)\\n\\nNow I hope Ladies n Gentlemen, you got the crystal clear idea, what we are doing. So, without any further due ***let\\'s code up***\\n\\n**Java**\\n\\n```\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        ListNode dummy = new ListNode(0); // creating an dummy list\\n        ListNode curr = dummy; // intialising an pointer\\n        int carry = 0; // intialising our carry with 0 intiall\\n        // while loop will run, until l1 OR l2 not reaches null OR if they both reaches null. But our carry has some value in it. \\n\\t\\t// We will add that as well into our list\\n        while(l1 != null || l2 != null || carry == 1){\\n            int sum = 0; // intialising our sum\\n            if(l1 != null){ // adding l1 to our sum & moving l1\\n                sum += l1.val;\\n                l1 = l1.next;\\n            }\\n            if(l2 != null){ // adding l2 to our sum & moving l2\\n                sum += l2.val;\\n                l2 = l2.next;\\n            }\\n            sum += carry; // if we have carry then add it into our sum\\n            carry = sum/10; // if we get carry, then divide it by 10 to get the carry\\n            ListNode node = new ListNode(sum % 10); // the value we\\'ll get by moduloing it, will become as new node so. add it to our list\\n            curr.next = node; // curr will point to that new node if we get\\n            curr = curr.next; // update the current every time\\n        }\\n        return dummy.next; // return dummy.next bcz, we don\\'t want the value we have consider in it intially!!\\n    }\\n}\\n```\\n\\n**C++**\\n```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *dummy = new ListNode(0);\\n        ListNode *curr = dummy;\\n        int carry = 0;\\n        \\n        while(l1 != NULL || l2 != NULL || carry == 1){\\n            int sum = 0;\\n            if(l1 != NULL){\\n                sum += l1->val;\\n                l1 = l1->next;\\n            }\\n            if(l2 != NULL){\\n                sum += l2->val;\\n                l2 = l2->next;\\n            }\\n            sum += carry;\\n            carry = sum/10;\\n            ListNode *node = new ListNode(sum % 10);\\n            curr->next = node;\\n            curr = curr->next;\\n        }\\n        return dummy->next;\\n    }\\n};\\n```\\n\\nANALYSIS :-\\n* **Time Complexity :-** BigO(max(N, M)) where N is length of l1 & M is length of l2\\n\\n* **Space Complexity :-** BigO(max(N,M))",
        "level": "medium"
    },
    {
        "slug": "lfu-cache",
        "description": "Design and implement a data structure for a Least Frequently Used (LFU) cache.\nImplement the LFUCache class:\n\nLFUCache(int capacity) Initializes the object with the capacity of the data structure.\nint get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1.\nvoid put(int key, int value) Update the value of the key if present, or inserts the key if not already present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated.\n\nTo determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.\nWhen a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented either a get or put operation is called on it.\nThe functions\u00a0get\u00a0and\u00a0put\u00a0must each run in O(1) average time complexity.",
        "examples": [
            "Input\n[\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, 3, null, -1, 3, 4]\n\nExplanation\n// cnt(x) = the use counter for key x\n// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)\nLFUCache lfu = new LFUCache(2);\nlfu.put(1, 1);   // cache=[1,_], cnt(1)=1\nlfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1\nlfu.get(1);      // return 1\n                 // cache=[1,2], cnt(2)=1, cnt(1)=2\nlfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\n\u00a0                // cache=[3,1], cnt(3)=1, cnt(1)=2\nlfu.get(2);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,1], cnt(3)=2, cnt(1)=2\nlfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\n                 // cache=[4,3], cnt(4)=1, cnt(3)=2\nlfu.get(1);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,4], cnt(4)=1, cnt(3)=3\nlfu.get(4);      // return 4\n                 // cache=[4,3], cnt(4)=2, cnt(3)=3"
        ],
        "constrains": "1 <= capacity\u00a0<= 104\n0 <= key <= 105\n0 <= value <= 109\nAt most 2 * 105\u00a0calls will be made to get and put.",
        "release_time": 1678871787,
        "oracle_code": "class LFUCache {\n\n    final int capacity;\n    int curSize;\n    int minFrequency;\n    Map<Integer, DLLNode> cache;\n    Map<Integer, DoubleLinkedList> frequencyMap;\n\n    /*.*/\n    /*\n    * @param capacity: total capacity of LFU Cache\n    * @param curSize: current size of LFU cache\n    * @param minFrequency: frequency of the last linked list (the minimum frequency of entire LFU cache)\n    * @param cache: a hash map that has key to Node mapping, which used for storing all nodes by their keys\n    * @param frequencyMap: a hash map that has key to linked list mapping, which used for storing all\n    * double linked list by their frequencies\n    * */\n    public LFUCache(int capacity) {\n        this.capacity = capacity;\n        this.curSize = 0;\n        this.minFrequency = 0;\n\n        this.cache = new HashMap<>();\n        this.frequencyMap = new HashMap<>();\n    }\n\n    /** get node value by key, and then update node frequency as well as relocate that node **/\n    public int get(int key) {\n        DLLNode curNode = cache.get(key);\n        if (curNode == null) {\n            return -1;\n        }\n        updateNode(curNode);\n        return curNode.val;\n    }\n\n    /**\n     * add new node into LFU cache, as well as double linked list\n     * condition 1: if LFU cache has input key, update node value and node position in list\n     * condition 2: if LFU cache does NOT have input key\n     *  - sub condition 1: if LFU cache does NOT have enough space, remove the Least Recent Used node\n     *  in minimum frequency list, then add new node\n     *  - sub condition 2: if LFU cache has enough space, add new node directly\n     * **/\n    public void put(int key, int value) {\n        // corner case: check cache capacity initialization\n        if (capacity == 0) {\n            return;\n        }\n\n        if (cache.containsKey(key)) {\n            DLLNode curNode = cache.get(key);\n            curNode.val = value;\n            updateNode(curNode);\n        }\n        else {\n            curSize++;\n            if (curSize > capacity) {\n                // get minimum frequency list\n                DoubleLinkedList minFreqList = frequencyMap.get(minFrequency);\n                cache.remove(minFreqList.tail.prev.key);\n                minFreqList.removeNode(minFreqList.tail.prev);\n                curSize--;\n            }\n            // reset min frequency to 1 because of adding new node\n            minFrequency = 1;\n            DLLNode newNode = new DLLNode(key, value);\n\n            // get the list with frequency 1, and then add new node into the list, as well as into LFU cache\n            DoubleLinkedList curList = frequencyMap.getOrDefault(1, new DoubleLinkedList());\n            curList.addNode(newNode);\n            frequencyMap.put(1, curList);\n            cache.put(key, newNode);\n        }\n    }\n\n    public void updateNode(DLLNode curNode) {\n        int curFreq = curNode.frequency;\n        DoubleLinkedList curList = frequencyMap.get(curFreq);\n        curList.removeNode(curNode);\n\n        // if current list the the last list which has lowest frequency and current node is the only node in that list\n        // we need to remove the entire list and then increase min frequency value by 1\n        if (curFreq == minFrequency && curList.listSize == 0) {\n            minFrequency++;\n        }\n\n        curNode.frequency++;\n        // add current node to another list has current frequency + 1,\n        // if we do not have the list with this frequency, initialize it\n        DoubleLinkedList newList = frequencyMap.getOrDefault(curNode.frequency, new DoubleLinkedList());\n        newList.addNode(curNode);\n        frequencyMap.put(curNode.frequency, newList);\n    }\n\n    /*\n    * @param key: node key\n    * @param val: node value\n    * @param frequency: frequency count of current node\n    * (all nodes connected in same double linked list has same frequency)\n    * @param prev: previous pointer of current node\n    * @param next: next pointer of current node\n    * */\n    class DLLNode {\n        int key;\n        int val;\n        int frequency;\n        DLLNode prev;\n        DLLNode next;\n\n        public DLLNode(int key, int val) {\n            this.key = key;\n            this.val = val;\n            this.frequency = 1;\n        }\n    }\n\n    /*\n    * @param listSize: current size of double linked list\n    * @param head: head node of double linked list\n    * @param tail: tail node of double linked list\n    * */\n    class DoubleLinkedList {\n        int listSize;\n        DLLNode head;\n        DLLNode tail;\n        public DoubleLinkedList() {\n            this.listSize = 0;\n            this.head = new DLLNode(0, 0);\n            this.tail = new DLLNode(0, 0);\n            head.next = tail;\n            tail.prev = head;\n        }\n\n        /** add new node into head of list and increase list size by 1 **/\n        public void addNode(DLLNode curNode) {\n            DLLNode nextNode = head.next;\n            curNode.next = nextNode;\n            curNode.prev = head;\n            head.next = curNode;\n            nextNode.prev = curNode;\n            listSize++;\n        }\n\n        /** remove input node and decrease list size by 1**/\n        public void removeNode(DLLNode curNode) {\n            DLLNode prevNode = curNode.prev;\n            DLLNode nextNode = curNode.next;\n            prevNode.next = nextNode;\n            nextNode.prev = prevNode;\n            listSize--;\n        }\n\n    }\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * LFUCache obj = new LFUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */",
        "content": "\\n\\n# Code\\n```\\nclass LFUCache {\\n\\n    final int capacity;\\n    int curSize;\\n    int minFrequency;\\n    Map<Integer, DLLNode> cache;\\n    Map<Integer, DoubleLinkedList> frequencyMap;\\n\\n    /*.*/\\n    /*\\n    * @param capacity: total capacity of LFU Cache\\n    * @param curSize: current size of LFU cache\\n    * @param minFrequency: frequency of the last linked list (the minimum frequency of entire LFU cache)\\n    * @param cache: a hash map that has key to Node mapping, which used for storing all nodes by their keys\\n    * @param frequencyMap: a hash map that has key to linked list mapping, which used for storing all\\n    * double linked list by their frequencies\\n    * */\\n    public LFUCache(int capacity) {\\n        this.capacity = capacity;\\n        this.curSize = 0;\\n        this.minFrequency = 0;\\n\\n        this.cache = new HashMap<>();\\n        this.frequencyMap = new HashMap<>();\\n    }\\n\\n    /** get node value by key, and then update node frequency as well as relocate that node **/\\n    public int get(int key) {\\n        DLLNode curNode = cache.get(key);\\n        if (curNode == null) {\\n            return -1;\\n        }\\n        updateNode(curNode);\\n        return curNode.val;\\n    }\\n\\n    /**\\n     * add new node into LFU cache, as well as double linked list\\n     * condition 1: if LFU cache has input key, update node value and node position in list\\n     * condition 2: if LFU cache does NOT have input key\\n     *  - sub condition 1: if LFU cache does NOT have enough space, remove the Least Recent Used node\\n     *  in minimum frequency list, then add new node\\n     *  - sub condition 2: if LFU cache has enough space, add new node directly\\n     * **/\\n    public void put(int key, int value) {\\n        // corner case: check cache capacity initialization\\n        if (capacity == 0) {\\n            return;\\n        }\\n\\n        if (cache.containsKey(key)) {\\n            DLLNode curNode = cache.get(key);\\n            curNode.val = value;\\n            updateNode(curNode);\\n        }\\n        else {\\n            curSize++;\\n            if (curSize > capacity) {\\n                // get minimum frequency list\\n                DoubleLinkedList minFreqList = frequencyMap.get(minFrequency);\\n                cache.remove(minFreqList.tail.prev.key);\\n                minFreqList.removeNode(minFreqList.tail.prev);\\n                curSize--;\\n            }\\n            // reset min frequency to 1 because of adding new node\\n            minFrequency = 1;\\n            DLLNode newNode = new DLLNode(key, value);\\n\\n            // get the list with frequency 1, and then add new node into the list, as well as into LFU cache\\n            DoubleLinkedList curList = frequencyMap.getOrDefault(1, new DoubleLinkedList());\\n            curList.addNode(newNode);\\n            frequencyMap.put(1, curList);\\n            cache.put(key, newNode);\\n        }\\n    }\\n\\n    public void updateNode(DLLNode curNode) {\\n        int curFreq = curNode.frequency;\\n        DoubleLinkedList curList = frequencyMap.get(curFreq);\\n        curList.removeNode(curNode);\\n\\n        // if current list the the last list which has lowest frequency and current node is the only node in that list\\n        // we need to remove the entire list and then increase min frequency value by 1\\n        if (curFreq == minFrequency && curList.listSize == 0) {\\n            minFrequency++;\\n        }\\n\\n        curNode.frequency++;\\n        // add current node to another list has current frequency + 1,\\n        // if we do not have the list with this frequency, initialize it\\n        DoubleLinkedList newList = frequencyMap.getOrDefault(curNode.frequency, new DoubleLinkedList());\\n        newList.addNode(curNode);\\n        frequencyMap.put(curNode.frequency, newList);\\n    }\\n\\n    /*\\n    * @param key: node key\\n    * @param val: node value\\n    * @param frequency: frequency count of current node\\n    * (all nodes connected in same double linked list has same frequency)\\n    * @param prev: previous pointer of current node\\n    * @param next: next pointer of current node\\n    * */\\n    class DLLNode {\\n        int key;\\n        int val;\\n        int frequency;\\n        DLLNode prev;\\n        DLLNode next;\\n\\n        public DLLNode(int key, int val) {\\n            this.key = key;\\n            this.val = val;\\n            this.frequency = 1;\\n        }\\n    }\\n\\n    /*\\n    * @param listSize: current size of double linked list\\n    * @param head: head node of double linked list\\n    * @param tail: tail node of double linked list\\n    * */\\n    class DoubleLinkedList {\\n        int listSize;\\n        DLLNode head;\\n        DLLNode tail;\\n        public DoubleLinkedList() {\\n            this.listSize = 0;\\n            this.head = new DLLNode(0, 0);\\n            this.tail = new DLLNode(0, 0);\\n            head.next = tail;\\n            tail.prev = head;\\n        }\\n\\n        /** add new node into head of list and increase list size by 1 **/\\n        public void addNode(DLLNode curNode) {\\n            DLLNode nextNode = head.next;\\n            curNode.next = nextNode;\\n            curNode.prev = head;\\n            head.next = curNode;\\n            nextNode.prev = curNode;\\n            listSize++;\\n        }\\n\\n        /** remove input node and decrease list size by 1**/\\n        public void removeNode(DLLNode curNode) {\\n            DLLNode prevNode = curNode.prev;\\n            DLLNode nextNode = curNode.next;\\n            prevNode.next = nextNode;\\n            nextNode.prev = prevNode;\\n            listSize--;\\n        }\\n\\n    }\\n}\\n\\n/**\\n * Your LFUCache object will be instantiated and called as such:\\n * LFUCache obj = new LFUCache(capacity);\\n * int param_1 = obj.get(key);\\n * obj.put(key,value);\\n */\\n```",
        "level": "hard"
    },
    {
        "slug": "maximum-strength-of-a-group",
        "description": "You are given a 0-indexed integer array nums representing the score of students in an exam. The teacher would like to form one non-empty group of students with maximal strength, where the strength of a group of students of indices i0, i1, i2, ... , ik is defined as nums[i0] * nums[i1] * nums[i2] * ... * nums[ik\u200b].\nReturn the maximum strength of a group the teacher can create.",
        "examples": [
            "Input: nums = [3,-1,-5,2,5,-9]\nOutput: 1350\nExplanation: One way to form a group of maximal strength is to group the students at indices [0,2,3,4,5]. Their strength is 3 * (-5) * 2 * 5 * (-9) = 1350, which we can show is optimal.",
            "Input: nums = [-4,-5,-4]\nOutput: 20\nExplanation: Group the students at indices [0, 1] . Then, we\u2019ll have a resulting strength of 20. We cannot achieve greater strength."
        ],
        "constrains": "1 <= nums.length <= 13\n-9 <= nums[i] <= 9",
        "release_time": 1685203355,
        "oracle_code": "class Solution {\n    private long maxStrength;\n\n    public long maxStrength(int[] nums) {\n        maxStrength = Integer.MIN_VALUE;\n        helper(nums, 0, 1, 0);\n        return maxStrength;\n    }\n\n    private void helper(int[] nums, int index, long product, int size) {\n        if (index >= nums.length) {\n            if(size != 0) maxStrength = Math.max(maxStrength, product);\n            return;\n        }\n\n        helper(nums, index + 1, product * nums[index], size + 1);\n        helper(nums, index + 1, product, size);\n    }\n}",
        "content": "# Code\\n```\\nclass Solution {\\n    private long maxStrength;\\n\\n    public long maxStrength(int[] nums) {\\n        maxStrength = Integer.MIN_VALUE;\\n        helper(nums, 0, 1, 0);\\n        return maxStrength;\\n    }\\n\\n    private void helper(int[] nums, int index, long product, int size) {\\n        if (index >= nums.length) {\\n            if(size != 0) maxStrength = Math.max(maxStrength, product);\\n            return;\\n        }\\n\\n        helper(nums, index + 1, product * nums[index], size + 1);\\n        helper(nums, index + 1, product, size);\\n    }\\n}\\n\\n```",
        "level": "medium"
    },
    {
        "slug": "number-of-laser-beams-in-a-bank",
        "description": "Anti-theft security devices are activated inside a bank. You are given a 0-indexed binary string array bank representing the floor plan of the bank, which is an m x n 2D matrix. bank[i] represents the ith row, consisting of '0's and '1's. '0' means the cell is empty, while'1' means the cell has a security device.\nThere is one laser beam between any two security devices if both conditions are met:\n\nThe two devices are located on two different rows: r1 and r2, where r1 < r2.\nFor each row i where r1 < i < r2, there are no security devices in the ith row.\n\nLaser beams are independent, i.e., one beam does not interfere nor join with another.\nReturn the total number of laser beams in the bank.",
        "examples": [
            "Input: bank = [\"011001\",\"000000\",\"010100\",\"001000\"]\nOutput: 8\nExplanation: Between each of the following device pairs, there is one beam. In total, there are 8 beams:\n * bank[0][1] -- bank[2][1]\n * bank[0][1] -- bank[2][3]\n * bank[0][2] -- bank[2][1]\n * bank[0][2] -- bank[2][3]\n * bank[0][5] -- bank[2][1]\n * bank[0][5] -- bank[2][3]\n * bank[2][1] -- bank[3][2]\n * bank[2][3] -- bank[3][2]\nNote that there is no beam between any device on the 0th row with any on the 3rd row.\nThis is because the 2nd row contains security devices, which breaks the second condition.",
            "Input: bank = [\"000\",\"111\",\"000\"]\nOutput: 0\nExplanation: There does not exist two devices located on two different rows."
        ],
        "constrains": "m == bank.length\nn == bank[i].length\n1 <= m, n <= 500\nbank[i][j] is either '0' or '1'.",
        "release_time": 1671532567,
        "oracle_code": "class Solution {\n    public int numberOfBeams(String[] bank) {\n        int prevLazer =0;\n        int ans =0;\n        for(String s:bank){\n            int curLazer = 0;\n            for(char c: s.toCharArray()){\n                if(c=='1'){\n                    curLazer++;\n                }\n            }\n            if(curLazer >0){\n                ans += (curLazer * prevLazer);\n                prevLazer = curLazer;\n            }\n        }\n        return ans;\n    }\n}",
        "content": "\\n# java Code\\n```\\nclass Solution {\\n    public int numberOfBeams(String[] bank) {\\n        int prevLazer =0;\\n        int ans =0;\\n        for(String s:bank){\\n            int curLazer = 0;\\n            for(char c: s.toCharArray()){\\n                if(c==\\'1\\'){\\n                    curLazer++;\\n                }\\n            }\\n            if(curLazer >0){\\n                ans += (curLazer * prevLazer);\\n                prevLazer = curLazer;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "maximal-rectangle",
        "description": "Given a rows x cols\u00a0binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.",
        "examples": [
            "Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 6\nExplanation: The maximal rectangle is shown in the above picture.",
            "Input: matrix = [[\"0\"]]\nOutput: 0",
            "Input: matrix = [[\"1\"]]\nOutput: 1"
        ],
        "constrains": "rows == matrix.length\ncols == matrix[i].length\n1 <= row, cols <= 200\nmatrix[i][j] is '0' or '1'.",
        "release_time": 1691836401,
        "oracle_code": "class Pair<T, U> {\n    public final T first;\n    public final U second;\n\n    public Pair(T first, U second) {\n        this.first = first;\n        this.second = second;\n    }\n}\n\nclass Solution {\n    public int maximalRectangle(char[][] matrix) {\n        int n = matrix.length, m = matrix[0].length;\n        int[] nums = new int[m];\n        for (int j = 0; j < m; j++) {\n            nums[j] = matrix[0][j] - '0';\n        }\n        int max = maximumAreaHistogram(nums);\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (matrix[i][j] == '0') {\n                    nums[j] = 0;\n                } else {\n                    nums[j] += (matrix[i][j] - '0');\n                }\n            }\n            max = Math.max(max, maximumAreaHistogram(nums));\n        }\n        return max;\n    }\n    public int maximumAreaHistogram(int[] heights) {\n        Stack<Pair<Integer, Integer>> stack1 = new Stack<>();\n        int[] left = new int[heights.length];\n        int pseudoIndex = -1;\n        //NSL\n        for (int i = 0; i < heights.length; i++) {\n            if (stack1.size() == 0) {\n                left[i] = pseudoIndex;\n            } else if (stack1.size() > 0 && stack1.peek().first < heights[i]) {\n                left[i] = stack1.peek().second;\n            } else if (stack1.size() > 0 && stack1.peek().first >= heights[i]) {\n                while (stack1.size() > 0 && stack1.peek().first >= heights[i]) {\n                    stack1.pop();\n                }\n                if (stack1.size() == 0) {\n                    left[i] = pseudoIndex;\n                } else {\n                    left[i] = stack1.peek().second;\n                }\n            }\n            stack1.push(new Pair<>(heights[i], i));\n        }\n        //NSR\n        Stack<Pair<Integer, Integer>> stack2 = new Stack<>();\n        int[] right = new int[heights.length];\n        pseudoIndex = heights.length;\n        for (int i = heights.length - 1; i >= 0; i--) {\n            if (stack2.size() == 0) {\n                right[i] = pseudoIndex;\n            } else if (stack2.size() > 0 && stack2.peek().first < heights[i]) {\n                right[i] = stack2.peek().second;\n            } else if (stack2.size() > 0 && stack2.peek().first >= heights[i]) {\n                while (stack2.size() > 0 && stack2.peek().first >= heights[i]) {\n                    stack2.pop();\n                }\n                if (stack2.size() == 0) {\n                    right[i] = pseudoIndex;\n                } else {\n                    right[i] = stack2.peek().second;\n                }\n            }\n            stack2.push(new Pair<>(heights[i], i));\n        }\n\n        int[] width = new int[heights.length];\n        for (int i = 0; i < heights.length; i++) {\n            width[i] = right[i] - left[i] - 1;\n        }\n\n        int[] area = new int[heights.length];\n        int maxArea = 0;\n        for (int i = 0; i < heights.length; i++) {\n            area[i] = heights[i] * width[i];\n            if (area[i] > maxArea) maxArea = area[i];\n        }\n        return maxArea;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Pair<T, U> {\\n    public final T first;\\n    public final U second;\\n\\n    public Pair(T first, U second) {\\n        this.first = first;\\n        this.second = second;\\n    }\\n}\\n\\nclass Solution {\\n    public int maximalRectangle(char[][] matrix) {\\n        int n = matrix.length, m = matrix[0].length;\\n        int[] nums = new int[m];\\n        for (int j = 0; j < m; j++) {\\n            nums[j] = matrix[0][j] - \\'0\\';\\n        }\\n        int max = maximumAreaHistogram(nums);\\n        for (int i = 1; i < n; i++) {\\n            for (int j = 0; j < m; j++) {\\n                if (matrix[i][j] == \\'0\\') {\\n                    nums[j] = 0;\\n                } else {\\n                    nums[j] += (matrix[i][j] - \\'0\\');\\n                }\\n            }\\n            max = Math.max(max, maximumAreaHistogram(nums));\\n        }\\n        return max;\\n    }\\n    public int maximumAreaHistogram(int[] heights) {\\n        Stack<Pair<Integer, Integer>> stack1 = new Stack<>();\\n        int[] left = new int[heights.length];\\n        int pseudoIndex = -1;\\n        //NSL\\n        for (int i = 0; i < heights.length; i++) {\\n            if (stack1.size() == 0) {\\n                left[i] = pseudoIndex;\\n            } else if (stack1.size() > 0 && stack1.peek().first < heights[i]) {\\n                left[i] = stack1.peek().second;\\n            } else if (stack1.size() > 0 && stack1.peek().first >= heights[i]) {\\n                while (stack1.size() > 0 && stack1.peek().first >= heights[i]) {\\n                    stack1.pop();\\n                }\\n                if (stack1.size() == 0) {\\n                    left[i] = pseudoIndex;\\n                } else {\\n                    left[i] = stack1.peek().second;\\n                }\\n            }\\n            stack1.push(new Pair<>(heights[i], i));\\n        }\\n        //NSR\\n        Stack<Pair<Integer, Integer>> stack2 = new Stack<>();\\n        int[] right = new int[heights.length];\\n        pseudoIndex = heights.length;\\n        for (int i = heights.length - 1; i >= 0; i--) {\\n            if (stack2.size() == 0) {\\n                right[i] = pseudoIndex;\\n            } else if (stack2.size() > 0 && stack2.peek().first < heights[i]) {\\n                right[i] = stack2.peek().second;\\n            } else if (stack2.size() > 0 && stack2.peek().first >= heights[i]) {\\n                while (stack2.size() > 0 && stack2.peek().first >= heights[i]) {\\n                    stack2.pop();\\n                }\\n                if (stack2.size() == 0) {\\n                    right[i] = pseudoIndex;\\n                } else {\\n                    right[i] = stack2.peek().second;\\n                }\\n            }\\n            stack2.push(new Pair<>(heights[i], i));\\n        }\\n\\n        int[] width = new int[heights.length];\\n        for (int i = 0; i < heights.length; i++) {\\n            width[i] = right[i] - left[i] - 1;\\n        }\\n\\n        int[] area = new int[heights.length];\\n        int maxArea = 0;\\n        for (int i = 0; i < heights.length; i++) {\\n            area[i] = heights[i] * width[i];\\n            if (area[i] > maxArea) maxArea = area[i];\\n        }\\n        return maxArea;\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "design-authentication-manager",
        "description": "There is an authentication system that works with authentication tokens. For each session, the user will receive a new authentication token that will expire timeToLive seconds after the currentTime. If the token is renewed, the expiry time will be extended to expire timeToLive seconds after the (potentially different) currentTime.\nImplement the AuthenticationManager class:\n\nAuthenticationManager(int timeToLive) constructs the AuthenticationManager and sets the timeToLive.\ngenerate(string tokenId, int currentTime) generates a new token with the given tokenId at the given currentTime in seconds.\nrenew(string tokenId, int currentTime) renews the unexpired token with the given tokenId at the given currentTime in seconds. If there are no unexpired tokens with the given tokenId, the request is ignored, and nothing happens.\ncountUnexpiredTokens(int currentTime) returns the number of unexpired tokens at the given currentTime.\n\nNote that if a token expires at time t, and another action happens on time t (renew or countUnexpiredTokens), the expiration takes place before the other actions.",
        "examples": [
            "Input\n[\"AuthenticationManager\", \"renew\", \"generate\", \"countUnexpiredTokens\", \"generate\", \"renew\", \"renew\", \"countUnexpiredTokens\"]\n[[5], [\"aaa\", 1], [\"aaa\", 2], [6], [\"bbb\", 7], [\"aaa\", 8], [\"bbb\", 10], [15]]\nOutput\n[null, null, null, 1, null, null, null, 0]\n\nExplanation\nAuthenticationManager authenticationManager = new AuthenticationManager(5); // Constructs the AuthenticationManager with timeToLive = 5 seconds.\nauthenticationManager.renew(\"aaa\", 1); // No token exists with tokenId \"aaa\" at time 1, so nothing happens.\nauthenticationManager.generate(\"aaa\", 2); // Generates a new token with tokenId \"aaa\" at time 2.\nauthenticationManager.countUnexpiredTokens(6); // The token with tokenId \"aaa\" is the only unexpired one at time 6, so return 1.\nauthenticationManager.generate(\"bbb\", 7); // Generates a new token with tokenId \"bbb\" at time 7.\nauthenticationManager.renew(\"aaa\", 8); // The token with tokenId \"aaa\" expired at time 7, and 8 >= 7, so at time 8 the renew request is ignored, and nothing happens.\nauthenticationManager.renew(\"bbb\", 10); // The token with tokenId \"bbb\" is unexpired at time 10, so the renew request is fulfilled and now the token will expire at time 15.\nauthenticationManager.countUnexpiredTokens(15); // The token with tokenId \"bbb\" expires at time 15, and the token with tokenId \"aaa\" expired at time 7, so currently no token is unexpired, so return 0."
        ],
        "constrains": "1 <= timeToLive <= 108\n1 <= currentTime <= 108\n1 <= tokenId.length <= 5\ntokenId consists only of lowercase letters.\nAll calls to generate will contain unique values of tokenId.\nThe values of currentTime across all the function calls will be strictly increasing.\nAt most 2000 calls will be made to all functions combined.",
        "release_time": 1664458448,
        "oracle_code": "class AuthenticationManager {\n\n    int timeToLive;\n    TreeSet<Integer> treeSet;\n    Map<String, Integer> map;\n    public AuthenticationManager(int timeToLive) {\n        this.timeToLive = timeToLive;\n        treeSet = new TreeSet<>();\n        map = new HashMap<>();\n    }\n    \n    public void generate(String tokenId, int currentTime) {\n        map.put(tokenId, currentTime + timeToLive);\n        treeSet.add(currentTime + timeToLive);\n    }\n    \n    public void renew(String tokenId, int currentTime) {\n        \n        Integer time = map.get(tokenId);\n\t\t// If null the token was never added, or it has expired before the renew call, which makes it invalid for renewing\n        if (time == null || time <= currentTime) return;\n       \n\t   \n\t   // Update the hashmap and treeSet with the new values\n        map.put(tokenId, currentTime + timeToLive);\n        treeSet.remove(time);\n        treeSet.add(currentTime + timeToLive);\n        \n\t\t// Clearing the treeset from already expired timestamps, it doesn't really improve the time execution, with about 10% only.\n        while (!treeSet.isEmpty() && treeSet.lower(currentTime) != null) {\n            treeSet.remove(treeSet.lower(currentTime));\n        }\n    }\n    \n\t// Return the number of timestamps in the treeset, which have greated expiry time than the currentTime\n    public int countUnexpiredTokens(int currentTime) {\n        return treeSet.tailSet(currentTime, false).size();\n    }\n}",
        "content": "The algorithm is pretty straightforward, the idea is to add and renew the keys with the added time to live, so we can keep the expiration value and to use a TreeSet for keeping it in a sorted manner with time complexity of O(Log (n)) for add and remove and O (M Log (n)) (where M is the number of items which will be traversed after the \"midpoint\" is found) for .tailSet().  The HashMap has the only purpose to store the expiration value of each key.\\n\\nThe Algorithm is kind of unstable and has performance between 44%  and 93%.\\n\\n```\\nclass AuthenticationManager {\\n\\n    int timeToLive;\\n    TreeSet<Integer> treeSet;\\n    Map<String, Integer> map;\\n    public AuthenticationManager(int timeToLive) {\\n        this.timeToLive = timeToLive;\\n        treeSet = new TreeSet<>();\\n        map = new HashMap<>();\\n    }\\n    \\n    public void generate(String tokenId, int currentTime) {\\n        map.put(tokenId, currentTime + timeToLive);\\n        treeSet.add(currentTime + timeToLive);\\n    }\\n    \\n    public void renew(String tokenId, int currentTime) {\\n        \\n        Integer time = map.get(tokenId);\\n\\t\\t// If null the token was never added, or it has expired before the renew call, which makes it invalid for renewing\\n        if (time == null || time <= currentTime) return;\\n       \\n\\t   \\n\\t   // Update the hashmap and treeSet with the new values\\n        map.put(tokenId, currentTime + timeToLive);\\n        treeSet.remove(time);\\n        treeSet.add(currentTime + timeToLive);\\n        \\n\\t\\t// Clearing the treeset from already expired timestamps, it doesn\\'t really improve the time execution, with about 10% only.\\n        while (!treeSet.isEmpty() && treeSet.lower(currentTime) != null) {\\n            treeSet.remove(treeSet.lower(currentTime));\\n        }\\n    }\\n    \\n\\t// Return the number of timestamps in the treeset, which have greated expiry time than the currentTime\\n    public int countUnexpiredTokens(int currentTime) {\\n        return treeSet.tailSet(currentTime, false).size();\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "random-point-in-non-overlapping-rectangles",
        "description": "You are given an array of non-overlapping axis-aligned rectangles rects where rects[i] = [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the ith rectangle and (xi, yi) is the top-right corner point of the ith rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.\nAny integer point inside the space covered by one of the given rectangles should be equally likely to be returned.\nNote that an integer point is a point that has integer coordinates.\nImplement the Solution class:\n\nSolution(int[][] rects) Initializes the object with the given rectangles rects.\nint[] pick() Returns a random integer point [u, v] inside the space covered by one of the given rectangles.",
        "examples": [
            "Input\n[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n[[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]\nOutput\n[null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]\n\nExplanation\nSolution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);\nsolution.pick(); // return [1, -2]\nsolution.pick(); // return [1, -1]\nsolution.pick(); // return [-1, -2]\nsolution.pick(); // return [-2, -2]\nsolution.pick(); // return [0, 0]"
        ],
        "constrains": "1 <= rects.length <= 100\nrects[i].length == 4\n-109 <= ai < xi <= 109\n-109 <= bi < yi <= 109\nxi - ai <= 2000\nyi - bi <= 2000\nAll the rectangles do not overlap.\nAt most 104 calls will be made to pick.",
        "release_time": 1683885250,
        "oracle_code": "class Solution {\n    \n    int[][] rects;\n    TreeMap<Integer, Integer> weightedRectIndex = new TreeMap<>();\n    int nPoints = 0;\n    \n    Random rng = new Random();\n\n    public Solution(int[][] rects) {\n        this.rects = rects;\n        int index = 0;\n        for (int[] rect : rects) {\n\t\t    // inserts cumulative weight key pointing to rectangle index\n            weightedRectIndex.put(nPoints, index++);\n            nPoints += width(rect) * height(rect);\n        }\n    }\n    \n    public int[] pick() {\n\t    // generates random point within total weight\n        int point = rng.nextInt(nPoints);\n\t\t// finds appropriate rectangle\n        var entry = weightedRectIndex.floorEntry(point);\n\t\t// find point within the current rectangle\n        int rectPoint = point - entry.getKey();\n        int[] rect = rects[entry.getValue()];\n        return new int[]{\n            rect[0] + rectPoint % width(rect), \n            rect[1] + rectPoint / width(rect)};\n    }\n    \n    private int width(int[] rect) {\n        return rect[2] - rect[0] + 1;\n    }\n    \n    private int height(int[] rect) {\n        return rect[3] - rect[1] + 1;\n    }\n}",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    \\n    int[][] rects;\\n    TreeMap<Integer, Integer> weightedRectIndex = new TreeMap<>();\\n    int nPoints = 0;\\n    \\n    Random rng = new Random();\\n\\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n        int index = 0;\\n        for (int[] rect : rects) {\\n\\t\\t    // inserts cumulative weight key pointing to rectangle index\\n            weightedRectIndex.put(nPoints, index++);\\n            nPoints += width(rect) * height(rect);\\n        }\\n    }\\n    \\n    public int[] pick() {\\n\\t    // generates random point within total weight\\n        int point = rng.nextInt(nPoints);\\n\\t\\t// finds appropriate rectangle\\n        var entry = weightedRectIndex.floorEntry(point);\\n\\t\\t// find point within the current rectangle\\n        int rectPoint = point - entry.getKey();\\n        int[] rect = rects[entry.getValue()];\\n        return new int[]{\\n            rect[0] + rectPoint % width(rect), \\n            rect[1] + rectPoint / width(rect)};\\n    }\\n    \\n    private int width(int[] rect) {\\n        return rect[2] - rect[0] + 1;\\n    }\\n    \\n    private int height(int[] rect) {\\n        return rect[3] - rect[1] + 1;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "design-authentication-manager",
        "description": "There is an authentication system that works with authentication tokens. For each session, the user will receive a new authentication token that will expire timeToLive seconds after the currentTime. If the token is renewed, the expiry time will be extended to expire timeToLive seconds after the (potentially different) currentTime.\nImplement the AuthenticationManager class:\n\nAuthenticationManager(int timeToLive) constructs the AuthenticationManager and sets the timeToLive.\ngenerate(string tokenId, int currentTime) generates a new token with the given tokenId at the given currentTime in seconds.\nrenew(string tokenId, int currentTime) renews the unexpired token with the given tokenId at the given currentTime in seconds. If there are no unexpired tokens with the given tokenId, the request is ignored, and nothing happens.\ncountUnexpiredTokens(int currentTime) returns the number of unexpired tokens at the given currentTime.\n\nNote that if a token expires at time t, and another action happens on time t (renew or countUnexpiredTokens), the expiration takes place before the other actions.",
        "examples": [
            "Input\n[\"AuthenticationManager\", \"renew\", \"generate\", \"countUnexpiredTokens\", \"generate\", \"renew\", \"renew\", \"countUnexpiredTokens\"]\n[[5], [\"aaa\", 1], [\"aaa\", 2], [6], [\"bbb\", 7], [\"aaa\", 8], [\"bbb\", 10], [15]]\nOutput\n[null, null, null, 1, null, null, null, 0]\n\nExplanation\nAuthenticationManager authenticationManager = new AuthenticationManager(5); // Constructs the AuthenticationManager with timeToLive = 5 seconds.\nauthenticationManager.renew(\"aaa\", 1); // No token exists with tokenId \"aaa\" at time 1, so nothing happens.\nauthenticationManager.generate(\"aaa\", 2); // Generates a new token with tokenId \"aaa\" at time 2.\nauthenticationManager.countUnexpiredTokens(6); // The token with tokenId \"aaa\" is the only unexpired one at time 6, so return 1.\nauthenticationManager.generate(\"bbb\", 7); // Generates a new token with tokenId \"bbb\" at time 7.\nauthenticationManager.renew(\"aaa\", 8); // The token with tokenId \"aaa\" expired at time 7, and 8 >= 7, so at time 8 the renew request is ignored, and nothing happens.\nauthenticationManager.renew(\"bbb\", 10); // The token with tokenId \"bbb\" is unexpired at time 10, so the renew request is fulfilled and now the token will expire at time 15.\nauthenticationManager.countUnexpiredTokens(15); // The token with tokenId \"bbb\" expires at time 15, and the token with tokenId \"aaa\" expired at time 7, so currently no token is unexpired, so return 0."
        ],
        "constrains": "1 <= timeToLive <= 108\n1 <= currentTime <= 108\n1 <= tokenId.length <= 5\ntokenId consists only of lowercase letters.\nAll calls to generate will contain unique values of tokenId.\nThe values of currentTime across all the function calls will be strictly increasing.\nAt most 2000 calls will be made to all functions combined.",
        "release_time": 1673449685,
        "oracle_code": "class AuthenticationManager {\n\n    int time=0;\n\n    HashMap<String,Integer>mp=new HashMap<>();\n\n    public AuthenticationManager(int timeToLive) {\n        \n    time=timeToLive;\n\n    }\n    \n    public void generate(String tokenId, int currentTime) {\n        \n    mp.put(tokenId,currentTime+time);\n\n    }\n    \n    public void renew(String tokenId, int currentTime) {\n        \n    if(!mp.containsKey(tokenId)||mp.get(tokenId)<=currentTime)\n    {\n    return;\n    }\n\n    mp.put(tokenId,currentTime+time);\n\n    }\n    \n    public int countUnexpiredTokens(int currentTime) {\n    \n    List<String>lr=new ArrayList<>(mp.keySet());\n    \n    for(int i=0;i<lr.size();i++){\n    \n    if(mp.get(lr.get(i))<=currentTime)mp.remove(lr.get(i));\n\n    }\n\n    return mp.size();\n    \n    }\n}\n\n/**\n * Your AuthenticationManager object will be instantiated and called as such:\n * AuthenticationManager obj = new AuthenticationManager(timeToLive);\n * obj.generate(tokenId,currentTime);\n * obj.renew(tokenId,currentTime);\n * int param_3 = obj.countUnexpiredTokens(currentTime);\n */",
        "content": "\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass AuthenticationManager {\\n\\n    int time=0;\\n\\n    HashMap<String,Integer>mp=new HashMap<>();\\n\\n    public AuthenticationManager(int timeToLive) {\\n        \\n    time=timeToLive;\\n\\n    }\\n    \\n    public void generate(String tokenId, int currentTime) {\\n        \\n    mp.put(tokenId,currentTime+time);\\n\\n    }\\n    \\n    public void renew(String tokenId, int currentTime) {\\n        \\n    if(!mp.containsKey(tokenId)||mp.get(tokenId)<=currentTime)\\n    {\\n    return;\\n    }\\n\\n    mp.put(tokenId,currentTime+time);\\n\\n    }\\n    \\n    public int countUnexpiredTokens(int currentTime) {\\n    \\n    List<String>lr=new ArrayList<>(mp.keySet());\\n    \\n    for(int i=0;i<lr.size();i++){\\n    \\n    if(mp.get(lr.get(i))<=currentTime)mp.remove(lr.get(i));\\n\\n    }\\n\\n    return mp.size();\\n    \\n    }\\n}\\n\\n/**\\n * Your AuthenticationManager object will be instantiated and called as such:\\n * AuthenticationManager obj = new AuthenticationManager(timeToLive);\\n * obj.generate(tokenId,currentTime);\\n * obj.renew(tokenId,currentTime);\\n * int param_3 = obj.countUnexpiredTokens(currentTime);\\n */\\n```",
        "level": "medium"
    },
    {
        "slug": "convert-sorted-array-to-binary-search-tree",
        "description": "Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.",
        "examples": [
            "Input: nums = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: [0,-10,5,null,-3,null,9] is also accepted:",
            "Input: nums = [1,3]\nOutput: [3,1]\nExplanation: [1,null,3] and [3,1] are both height-balanced BSTs."
        ],
        "constrains": "1 <= nums.length <= 104\n-104 <= nums[i] <= 104\nnums is sorted in a strictly increasing order.",
        "release_time": 1689161763,
        "oracle_code": "class Solution {\n    public TreeNode createBST(int arr[], int st, int end){\n        if(st>end){\n            return null;\n        }\n\n        int mid = (st+end)/2;\n        TreeNode root = new TreeNode(arr[mid]);\n        root.left = createBST(arr,st,mid-1);\n        root.right = createBST(arr,mid+1,end);\n\n        return root;\n    }\n    public TreeNode sortedArrayToBST(int[] nums) {\n        int st = 0;\n        int end = nums.length-1;\n        return createBST(nums,st,end);\n        \n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\nInorder Traversal of BST is always sorted.\\nInorder = left, root, right\\nroot = mid of sorted array\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n**Divide and Conquer and Inorder Traversal**\\n$$Inorder = left, root, right$$ which means root = mid of sorted Array\\nDivide the array into smaller pieces using recursion and assing root = mid \\n$$ mid = (start+end)/2;$$\\n\\n\\n\\n# Complexity\\n- Time complexity: O(n) \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nclass Solution {\\n    public TreeNode createBST(int arr[], int st, int end){\\n        if(st>end){\\n            return null;\\n        }\\n\\n        int mid = (st+end)/2;\\n        TreeNode root = new TreeNode(arr[mid]);\\n        root.left = createBST(arr,st,mid-1);\\n        root.right = createBST(arr,mid+1,end);\\n\\n        return root;\\n    }\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        int st = 0;\\n        int end = nums.length-1;\\n        return createBST(nums,st,end);\\n        \\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "trapping-rain-water",
        "description": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.",
        "examples": [
            "Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.",
            "Input: height = [4,2,0,3,2,5]\nOutput: 9"
        ],
        "constrains": "n == height.length\n1 <= n <= 2 * 104\n0 <= height[i] <= 105",
        "release_time": 1683960844,
        "oracle_code": "class Solution \n{\n    public int trap(int[] height) \n    {\n        int result = 0;\n        if(height==null || height.length<=2)\n            return result;\n        int left[] = new int[height.length];\n        int right[]= new int[height.length];\n        //scan from left to right\n        int max = height[0];\n        left[0] = height[0];\n        for(int i=1; i<height.length; i++)\n        {\n            if(height[i]<max)\n            {\n                left[i]=max;\n            }\n            else\n            {\n                left[i]=height[i];\n                max = height[i];\n            }\n        }\n        //scan from right to left\n        max = height[height.length-1];\n        right[height.length-1]=height[height.length-1];\n        for(int i=height.length-2; i>=0; i--)\n        {\n            if(height[i]<max)\n            {\n                right[i]=max;  \n            }\n            else\n            {  \n                right[i]=height[i];\n                max = height[i];\n            }\n        }\n    \n        for(int i=0; i<height.length; i++)\n        {\n            result+= Math.min(left[i],right[i])-height[i];\n        }\n        return result;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTo calculate the trapped rainwater, we need to determine the effective height at each bar. The effective height at a specific bar is the minimum of the maximum heights on its left and right sides. The trapped rainwater can be calculated as the difference between the effective height and the actual height of each bar.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Check if the height array is null or has fewer than 2 elements. If so, return 0 since there are not enough bars to trap any rainwater.\\n2. Initialize a variable result to keep track of the total trapped rainwater.\\n3. Create two arrays, left and right, each with the same length as the height array. These arrays will store the maximum heights on the left and right sides of each bar, respectively.\\n4. Scan the height array from left to right:\\n- Initialize a variable max to store the maximum height encountered so far, starting with the height of the first bar.\\n- For each bar at index i, compare its height with the current max:\\n1. If the height of the current bar is less than the current max, set left[i] to max, indicating that the maximum height on the left side is still max.\\n1. Otherwise, update left[i] and max to the height of the current bar since it becomes the new maximum height encountered so far.\\n5. Scan the height array from right to left (similar to step 4) to populate the right array with the maximum heights on the right side of each bar.\\n6. Iterate over the height array:\\n- For each bar at index i, calculate the trapped rainwater by subtracting the actual height (height[i]) from the minimum of the maximum heights on the left and right sides (Math.min(left[i], right[i])).\\n- Add the calculated trapped rainwater to the result variable.\\n7. Return the final result which represents the total trapped rainwater.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the code is O(n), where n is the length of the height array. The code performs three separate scans over the height array, each taking linear time. Hence, the overall time complexity is linear.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of the code is O(n), where n is the length of the height array. This is due to the additional arrays left and right that store the maximum heights on the left and right sides of each bar, respectively. The space required is proportional to the size of the input array.\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public int trap(int[] height) \\n    {\\n        int result = 0;\\n        if(height==null || height.length<=2)\\n            return result;\\n        int left[] = new int[height.length];\\n        int right[]= new int[height.length];\\n        //scan from left to right\\n        int max = height[0];\\n        left[0] = height[0];\\n        for(int i=1; i<height.length; i++)\\n        {\\n            if(height[i]<max)\\n            {\\n                left[i]=max;\\n            }\\n            else\\n            {\\n                left[i]=height[i];\\n                max = height[i];\\n            }\\n        }\\n        //scan from right to left\\n        max = height[height.length-1];\\n        right[height.length-1]=height[height.length-1];\\n        for(int i=height.length-2; i>=0; i--)\\n        {\\n            if(height[i]<max)\\n            {\\n                right[i]=max;  \\n            }\\n            else\\n            {  \\n                right[i]=height[i];\\n                max = height[i];\\n            }\\n        }\\n    \\n        for(int i=0; i<height.length; i++)\\n        {\\n            result+= Math.min(left[i],right[i])-height[i];\\n        }\\n        return result;\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "the-number-of-weak-characters-in-the-game",
        "description": "You are playing a game that contains multiple characters, and each of the characters has two main properties: attack and defense. You are given a 2D integer array properties where properties[i] = [attacki, defensei] represents the properties of the ith character in the game.\nA character is said to be weak if any other character has both attack and defense levels strictly greater than this character's attack and defense levels. More formally, a character i is said to be weak if there exists another character j where attackj > attacki and defensej > defensei.\nReturn the number of weak characters.",
        "examples": [
            "Input: properties = [[5,5],[6,3],[3,6]]\nOutput: 0\nExplanation: No character has strictly greater attack and defense than the other.",
            "Input: properties = [[2,2],[3,3]]\nOutput: 1\nExplanation: The first character is weak because the second character has a strictly greater attack and defense.",
            "Input: properties = [[1,5],[10,4],[4,3]]\nOutput: 1\nExplanation: The third character is weak because the second character has a strictly greater attack and defense."
        ],
        "constrains": "2 <= properties.length <= 105\nproperties[i].length == 2\n1 <= attacki, defensei <= 105",
        "release_time": 1662691692,
        "oracle_code": "class Solution {\n    public int numberOfWeakCharacters(int[][] properties) {\n        Arrays.sort(properties, (a,b) -> (a[0] == b[0]) ? (a[1]-b[1]) : (b[0]-a[0]));\n        int count = 0, max = 0;\n        for(int[] arr: properties){\n            if(arr[1] < max)    count++;\n            max = Math.max(max, arr[1]);\n        }\n        return count;\n    }\n}",
        "content": "**Time Complexity : O(n*logn)**\\n**Java**\\n```\\nclass Solution {\\n    public int numberOfWeakCharacters(int[][] properties) {\\n        Arrays.sort(properties, (a,b) -> (a[0] == b[0]) ? (a[1]-b[1]) : (b[0]-a[0]));\\n        int count = 0, max = 0;\\n        for(int[] arr: properties){\\n            if(arr[1] < max)    count++;\\n            max = Math.max(max, arr[1]);\\n        }\\n        return count;\\n    }\\n}\\n```\\n**JavaScript**\\n```\\nvar numberOfWeakCharacters = function(properties) {\\n    properties.sort((a,b) => (a[0] == b[0]) ? (a[1]-b[1]) : (b[0]-a[0]))\\n    let count = 0, max = 0\\n    for(let arr of properties){\\n        if(arr[1] < max)    count++\\n        max = Math.max(max, arr[1])\\n    }\\n    return count\\n};\\n```\\n**Python**\\n```\\nclass Solution(object):\\n    def numberOfWeakCharacters(self, properties):\\n        properties.sort(key = lambda x: (-x[0], x[1]))\\n        count, mx = 0, 0\\n        for arr in properties:\\n            if arr[1] < mx:\\n                count += 1\\n            mx = max(mx, arr[1])\\n        return count\\n```",
        "level": "medium"
    },
    {
        "slug": "find-nearest-point-that-has-the-same-x-or-y-coordinate",
        "description": "You are given two integers, x and y, which represent your current location on a Cartesian grid: (x, y). You are also given an array points where each points[i] = [ai, bi] represents that a point exists at (ai, bi). A point is valid if it shares the same x-coordinate or the same y-coordinate as your location.\nReturn the index (0-indexed) of the valid point with the smallest Manhattan distance from your current location. If there are multiple, return the valid point with the smallest index. If there are no valid points, return -1.\nThe Manhattan distance between two points (x1, y1) and (x2, y2) is abs(x1 - x2) + abs(y1 - y2).",
        "examples": [
            "Input: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]\nOutput: 2\nExplanation: Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2.",
            "Input: x = 3, y = 4, points = [[3,4]]\nOutput: 0\nExplanation: The answer is allowed to be on the same location as your current location.",
            "Input: x = 3, y = 4, points = [[2,3]]\nOutput: -1\nExplanation: There are no valid points."
        ],
        "constrains": "1 <= points.length <= 104\npoints[i].length == 2\n1 <= x, y, ai, bi <= 104",
        "release_time": 1678131044,
        "oracle_code": "class Solution {\n    public int nearestValidPoint(int x, int y, int[][] points) {\n        \n        int sIndex = 100000;\n        int sDistance = 100000;\n\n        for (int i = 0; i < points.length; i++) {\n            \n            // Check if is a valid point\n            if (points[i][0] == x || points[i][1] == y) {\n\n                // Check if it is better than the previous best\n                int distance = Math.abs(x - points[i][0]) + Math.abs(y - points[i][1]);\n                if (sDistance > distance) {\n                    sDistance = distance;\n                    sIndex = i;\n                }\n            }\n        }\n\n        // Check if we have a valid point to return\n        if (sIndex == 100000)\n            return -1;\n        return sIndex;\n    }\n}",
        "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe solution involves a simple **iteration of the array**. \\n\\n*At each iteration* we have to check if **the point is valid**, in this case we have to check if the distance of this point is shorter than the distance that we found in previous iterations.\\n\\n**Note:** The initialization of sIndex and sDistance is higher than the *maximum value allowed by the input conditions*.\\n \\n# Complexity\\n- **Time complexity:** $O(n)$\\n- **Speed Beats:** 100%\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- **Space complexity:** $O(1)$\\n- **Memory Beats:** 78.3%\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int nearestValidPoint(int x, int y, int[][] points) {\\n        \\n        int sIndex = 100000;\\n        int sDistance = 100000;\\n\\n        for (int i = 0; i < points.length; i++) {\\n            \\n            // Check if is a valid point\\n            if (points[i][0] == x || points[i][1] == y) {\\n\\n                // Check if it is better than the previous best\\n                int distance = Math.abs(x - points[i][0]) + Math.abs(y - points[i][1]);\\n                if (sDistance > distance) {\\n                    sDistance = distance;\\n                    sIndex = i;\\n                }\\n            }\\n        }\\n\\n        // Check if we have a valid point to return\\n        if (sIndex == 100000)\\n            return -1;\\n        return sIndex;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "design-an-ordered-stream",
        "description": "There is a stream of n (idKey, value) pairs arriving in an arbitrary order, where idKey is an integer between 1 and n and value is a string. No two pairs have the same id.\nDesign a stream that returns the values in increasing order of their IDs by returning a chunk (list) of values after each insertion. The concatenation of all the chunks should result in a list of the sorted values.\nImplement the OrderedStream class:\n\nOrderedStream(int n) Constructs the stream to take n values.\nString[] insert(int idKey, String value) Inserts the pair (idKey, value) into the stream, then returns the largest possible chunk of currently inserted values that appear next in the order.\n\n\u00a0\nExample:\n\n\nInput\n[\"OrderedStream\", \"insert\", \"insert\", \"insert\", \"insert\", \"insert\"]\n[[5], [3, \"ccccc\"], [1, \"aaaaa\"], [2, \"bbbbb\"], [5, \"eeeee\"], [4, \"ddddd\"]]\nOutput\n[null, [], [\"aaaaa\"], [\"bbbbb\", \"ccccc\"], [], [\"ddddd\", \"eeeee\"]]\n\nExplanation\n// Note that the values ordered by ID is [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\"].\nOrderedStream os = new OrderedStream(5);\nos.insert(3, \"ccccc\"); // Inserts (3, \"ccccc\"), returns [].\nos.insert(1, \"aaaaa\"); // Inserts (1, \"aaaaa\"), returns [\"aaaaa\"].\nos.insert(2, \"bbbbb\"); // Inserts (2, \"bbbbb\"), returns [\"bbbbb\", \"ccccc\"].\nos.insert(5, \"eeeee\"); // Inserts (5, \"eeeee\"), returns [].\nos.insert(4, \"ddddd\"); // Inserts (4, \"ddddd\"), returns [\"ddddd\", \"eeeee\"].\n// Concatentating all the chunks returned:\n// [] + [\"aaaaa\"] + [\"bbbbb\", \"ccccc\"] + [] + [\"ddddd\", \"eeeee\"] = [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\"]\n// The resulting order is the same as the order above.\n\n\u00a0\nConstraints:\n\n1 <= n <= 1000\n1 <= id <= n\nvalue.length == 5\nvalue\u00a0consists only of lowercase letters.\nEach call to insert\u00a0will have a unique id.\nExactly n calls will be made to insert.",
        "examples": [],
        "constrains": "1 <= n <= 1000\n1 <= id <= n\nvalue.length == 5\nvalue\u00a0consists only of lowercase letters.\nEach call to insert\u00a0will have a unique id.\nExactly n calls will be made to insert.",
        "release_time": 1605412886,
        "oracle_code": "class OrderedStream {\n    int ptr;\n    String[] res;\n    \n    public OrderedStream(int n) {\n        ptr = 0;\n        res = new String[n];\n    }\n    \n    public List<String> insert(int id, String value) {\n        List<String> list = new ArrayList<>();\n        \n        res[id - 1] = value;\n        while (ptr < res.length && res[ptr] != null) {\n            list.add(res[ptr]);\n            ptr++;\n        }\n        \n        return list;\n    }\n}",
        "content": "Well, the problem statement is not very clear even there is a GIF, although I work it out. The problem statement makes it feel as a medium problem, I guess. \\n\\nBasically, the idea is that you need to return a longest list that start at index of ptr. if ptr is not pointing an element, you need to return a empty list.\\n```\\nclass OrderedStream {\\n    int ptr;\\n    String[] res;\\n    \\n    public OrderedStream(int n) {\\n        ptr = 0;\\n        res = new String[n];\\n    }\\n    \\n    public List<String> insert(int id, String value) {\\n        List<String> list = new ArrayList<>();\\n        \\n        res[id - 1] = value;\\n        while (ptr < res.length && res[ptr] != null) {\\n            list.add(res[ptr]);\\n            ptr++;\\n        }\\n        \\n        return list;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "largest-3-same-digit-number-in-string",
        "description": "You are given a string num representing a large integer. An integer is good if it meets the following conditions:\n\nIt is a substring of num with length 3.\nIt consists of only one unique digit.\n\nReturn the maximum good integer as a string or an empty string \"\" if no such integer exists.\nNote:\n\nA substring is a contiguous sequence of characters within a string.\nThere may be leading zeroes in num or a good integer.",
        "examples": [
            "Input: num = \"6777133339\"\nOutput: \"777\"\nExplanation: There are two distinct good integers: \"777\" and \"333\".\n\"777\" is the largest, so we return \"777\".",
            "Input: num = \"2300019\"\nOutput: \"000\"\nExplanation: \"000\" is the only good integer.",
            "Input: num = \"42352338\"\nOutput: \"\"\nExplanation: No substring of length 3 consists of only one unique digit. Therefore, there are no good integers."
        ],
        "constrains": "3 <= num.length <= 1000\nnum only consists of digits.",
        "release_time": 1663654171,
        "oracle_code": "class Solution {\n    public String largestGoodInteger(String num) {\n        int n=-1;\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<num.length()-2;i++){\n            if(num.charAt(i)==num.charAt(i+1) && num.charAt(i)==num.charAt(i+2)){\n                sb.append(num.charAt(i));\n                sb.append(num.charAt(i));\n                sb.append(num.charAt(i));\n                if(Integer.parseInt(sb.toString())>n)\n                    n=Integer.parseInt(sb.toString());\n                sb.setLength(0);\n            }\n        }\n        if(n==-1)\n            return \"\";\n        String s = Integer.toString(n);\n        if(s.equals(\"0\"))\n            return \"000\";\n        return s;\n    }\n}",
        "content": "```\\nclass Solution {\\n    public String largestGoodInteger(String num) {\\n        int n=-1;\\n        StringBuilder sb = new StringBuilder();\\n        for(int i=0;i<num.length()-2;i++){\\n            if(num.charAt(i)==num.charAt(i+1) && num.charAt(i)==num.charAt(i+2)){\\n                sb.append(num.charAt(i));\\n                sb.append(num.charAt(i));\\n                sb.append(num.charAt(i));\\n                if(Integer.parseInt(sb.toString())>n)\\n                    n=Integer.parseInt(sb.toString());\\n                sb.setLength(0);\\n            }\\n        }\\n        if(n==-1)\\n            return \"\";\\n        String s = Integer.toString(n);\\n        if(s.equals(\"0\"))\\n            return \"000\";\\n        return s;\\n    }\\n}\\n```\\nKindly upvote if you like the code.",
        "level": "easy"
    },
    {
        "slug": "best-time-to-buy-and-sell-stock-ii",
        "description": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\nOn each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\nFind and return the maximum profit you can achieve.",
        "examples": [
            "Input: prices = [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7.",
            "Input: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nTotal profit is 4.",
            "Input: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0."
        ],
        "constrains": "1 <= prices.length <= 3 * 104\n0 <= prices[i] <= 104",
        "release_time": 1692429746,
        "oracle_code": "class Solution {\n    public int maxProfit(int[] prices) {\n        int profit=0;\n        for(int i=1; i<prices.length; i++){\n            if(prices[i]>prices[i-1]){\n                profit+=prices[i]-prices[i-1];\n            }\n        }\n        return profit;\n    }\n}",
        "content": "# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxProfit(int[] prices) {\\n        int profit=0;\\n        for(int i=1; i<prices.length; i++){\\n            if(prices[i]>prices[i-1]){\\n                profit+=prices[i]-prices[i-1];\\n            }\\n        }\\n        return profit;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "middle-of-the-linked-list",
        "description": "Given the head of a singly linked list, return the middle node of the linked list.\nIf there are two middle nodes, return the second middle node.",
        "examples": [
            "Input: head = [1,2,3,4,5]\nOutput: [3,4,5]\nExplanation: The middle node of the list is node 3.",
            "Input: head = [1,2,3,4,5,6]\nOutput: [4,5,6]\nExplanation: Since the list has two middle nodes with values 3 and 4, we return the second one."
        ],
        "constrains": "The number of nodes in the list is in the range [1, 100].\n1 <= Node.val <= 100",
        "release_time": 1690528289,
        "oracle_code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode middleNode(ListNode head) {\n        ListNode slow = head, fast = head;\n        while(fast != null && fast.next !=null ){\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n        return slow;    \n    }\n}",
        "content": "# Intuition\\nUse fast and slow pointer to find the middle node of the list;\\n\\n# Approach\\n1. initilize two pointer `fast` and `slow` respectively\\n2. while `fast` is not null and also `fast.next` is not null, move the fast 2 steps ahead and the `slow` one step ahead in each iteration\\n3. after the loop, return the slow which is the middle of the list\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode middleNode(ListNode head) {\\n        ListNode slow = head, fast = head;\\n        while(fast != null && fast.next !=null ){\\n            fast = fast.next.next;\\n            slow = slow.next;\\n        }\\n        return slow;    \\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "make-array-strictly-increasing",
        "description": "Given two integer arrays\u00a0arr1 and arr2, return the minimum number of operations (possibly zero) needed\u00a0to make arr1 strictly increasing.\nIn one operation, you can choose two indices\u00a00 <=\u00a0i < arr1.length\u00a0and\u00a00 <= j < arr2.length\u00a0and do the assignment\u00a0arr1[i] = arr2[j].\nIf there is no way to make\u00a0arr1\u00a0strictly increasing,\u00a0return\u00a0-1.",
        "examples": [
            "Input: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]\nOutput: 1\nExplanation: Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7].",
            "Input: arr1 = [1,5,3,6,7], arr2 = [4,3,1]\nOutput: 2\nExplanation: Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7].",
            "Input: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]\nOutput: -1\nExplanation: You can't make arr1 strictly increasing."
        ],
        "constrains": "1 <= arr1.length, arr2.length <= 2000\n0 <= arr1[i], arr2[i] <= 10^9",
        "release_time": 1686968225,
        "oracle_code": "class Solution { \n    public int makeArrayIncreasing(int[] arr1, int[] arr2) {\n        Arrays.sort(arr2);\n        \n        int answer = helper(0, -1, arr1, arr2);\n        \n        return answer < Integer.MAX_VALUE-100 ? answer : -1;\n    }\n    \n    Map<Pair<Integer, Integer>, Integer> dp = new HashMap<>();\n    private int helper(int i, int prev, int[] arr1, int[] arr2) {\n        if (i == arr1.length) {\n            return 0;\n        }\n        if (dp.containsKey(new Pair<>(i, prev))) {\n            return dp.get(new Pair<>(i, prev));\n        }\n\n        int operation = Integer.MAX_VALUE-100;\n\n        \n        if (arr1[i] > prev) {\n            operation = helper(i + 1, arr1[i], arr1, arr2);\n        }\n\n       \n        int idx = binarySearch(arr2, prev);\n\n        \n        if (idx < arr2.length) {\n            operation = Math.min(operation, 1 + helper(i + 1, arr2[idx], arr1, arr2));\n        }\n\n        dp.put(new Pair<>(i, prev),operation);\n        return operation;\n    }\n    \n    private static int binarySearch(int[] arr, int value) {\n        int left = 0, right = arr.length-1;\n        while (left <= right) {\n            int mid = left+(right-left) / 2;\n            if (arr[mid] <= value) {\n                left = mid + 1;\n            } else {\n                right = mid-1;\n            }\n        }\n        return left;\n    } \n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\n\\nclass Solution { \\n    public int makeArrayIncreasing(int[] arr1, int[] arr2) {\\n        Arrays.sort(arr2);\\n        \\n        int answer = helper(0, -1, arr1, arr2);\\n        \\n        return answer < Integer.MAX_VALUE-100 ? answer : -1;\\n    }\\n    \\n    Map<Pair<Integer, Integer>, Integer> dp = new HashMap<>();\\n    private int helper(int i, int prev, int[] arr1, int[] arr2) {\\n        if (i == arr1.length) {\\n            return 0;\\n        }\\n        if (dp.containsKey(new Pair<>(i, prev))) {\\n            return dp.get(new Pair<>(i, prev));\\n        }\\n\\n        int operation = Integer.MAX_VALUE-100;\\n\\n        \\n        if (arr1[i] > prev) {\\n            operation = helper(i + 1, arr1[i], arr1, arr2);\\n        }\\n\\n       \\n        int idx = binarySearch(arr2, prev);\\n\\n        \\n        if (idx < arr2.length) {\\n            operation = Math.min(operation, 1 + helper(i + 1, arr2[idx], arr1, arr2));\\n        }\\n\\n        dp.put(new Pair<>(i, prev),operation);\\n        return operation;\\n    }\\n    \\n    private static int binarySearch(int[] arr, int value) {\\n        int left = 0, right = arr.length-1;\\n        while (left <= right) {\\n            int mid = left+(right-left) / 2;\\n            if (arr[mid] <= value) {\\n                left = mid + 1;\\n            } else {\\n                right = mid-1;\\n            }\\n        }\\n        return left;\\n    } \\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "find-nearest-point-that-has-the-same-x-or-y-coordinate",
        "description": "You are given two integers, x and y, which represent your current location on a Cartesian grid: (x, y). You are also given an array points where each points[i] = [ai, bi] represents that a point exists at (ai, bi). A point is valid if it shares the same x-coordinate or the same y-coordinate as your location.\nReturn the index (0-indexed) of the valid point with the smallest Manhattan distance from your current location. If there are multiple, return the valid point with the smallest index. If there are no valid points, return -1.\nThe Manhattan distance between two points (x1, y1) and (x2, y2) is abs(x1 - x2) + abs(y1 - y2).",
        "examples": [
            "Input: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]\nOutput: 2\nExplanation: Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2.",
            "Input: x = 3, y = 4, points = [[3,4]]\nOutput: 0\nExplanation: The answer is allowed to be on the same location as your current location.",
            "Input: x = 3, y = 4, points = [[2,3]]\nOutput: -1\nExplanation: There are no valid points."
        ],
        "constrains": "1 <= points.length <= 104\npoints[i].length == 2\n1 <= x, y, ai, bi <= 104",
        "release_time": 1683538037,
        "oracle_code": "class Solution {\n    public int nearestValidPoint(int x, int y, int[][] points) {\n        int minManh = Integer.MAX_VALUE;\n        int indMin = -1;\n        for (int i = 0; i < points.length; i++)\n        {\n            int tmpManh = Math.abs(x - points[i][0]) + Math.abs(y - points[i][1]);\n            if ((x == points[i][0] || y == points[i][1]) && (tmpManh < minManh))\n            {\n                minManh = tmpManh;\n                indMin = i;\n            }\n        }\n        return indMin;\n    }\n}",
        "content": "\\n```\\nclass Solution {\\n    public int nearestValidPoint(int x, int y, int[][] points) {\\n        int minManh = Integer.MAX_VALUE;\\n        int indMin = -1;\\n        for (int i = 0; i < points.length; i++)\\n        {\\n            int tmpManh = Math.abs(x - points[i][0]) + Math.abs(y - points[i][1]);\\n            if ((x == points[i][0] || y == points[i][1]) && (tmpManh < minManh))\\n            {\\n                minManh = tmpManh;\\n                indMin = i;\\n            }\\n        }\\n        return indMin;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "intersection-of-multiple-arrays",
        "description": "Given a 2D integer array nums where nums[i] is a non-empty array of distinct positive integers, return the list of integers that are present in each array of nums sorted in ascending order.",
        "examples": [
            "Input: nums = [[3,1,2,4,5],[1,2,3,4],[3,4,5,6]]\nOutput: [3,4]\nExplanation: \nThe only integers present in each of nums[0] = [3,1,2,4,5], nums[1] = [1,2,3,4], and nums[2] = [3,4,5,6] are 3 and 4, so we return [3,4].",
            "Input: nums = [[1,2,3],[4,5,6]]\nOutput: []\nExplanation: \nThere does not exist any integer present both in nums[0] and nums[1], so we return an empty list []."
        ],
        "constrains": "1 <= nums.length <= 1000\n1 <= sum(nums[i].length) <= 1000\n1 <= nums[i][j] <= 1000\nAll the values of nums[i] are unique.",
        "release_time": 1650773246,
        "oracle_code": "class Solution {\n    public List<Integer> intersection(int[][] nums) {\n        \n        List<Integer> ans = new ArrayList<>();\n        \n        int[] count  = new int[1001];\n        \n        for(int[] arr : nums){\n            for(int i : arr){\n                count[i]++;\n            }\n        }\n        \n       for(int i=0;i<count.length;i++){\n           if(count[i]==nums.length){\n               ans.add(i);\n           }\n       }\n        \n        return ans;\n    }\n}",
        "content": "```\\n\\nclass Solution {\\n    public List<Integer> intersection(int[][] nums) {\\n        \\n        List<Integer> ans = new ArrayList<>();\\n        \\n        int[] count  = new int[1001];\\n        \\n        for(int[] arr : nums){\\n            for(int i : arr){\\n                count[i]++;\\n            }\\n        }\\n        \\n       for(int i=0;i<count.length;i++){\\n           if(count[i]==nums.length){\\n               ans.add(i);\\n           }\\n       }\\n        \\n        return ans;\\n    }\\n}\\n\\n```",
        "level": "easy"
    },
    {
        "slug": "intersection-of-two-linked-lists",
        "description": "Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.\nFor example, the following two linked lists begin to intersect at node c1:\n\nThe test cases are generated such that there are no cycles anywhere in the entire linked structure.\nNote that the linked lists must retain their original structure after the function returns.\nCustom Judge:\nThe inputs to the judge are given as follows (your program is not given these inputs):\n\nintersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.\nlistA - The first linked list.\nlistB - The second linked list.\nskipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.\nskipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.\n\nThe judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.",
        "examples": [
            "Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\nOutput: Intersected at '8'\nExplanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n- Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.",
            "Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\nOutput: Intersected at '2'\nExplanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.",
            "Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\nOutput: No intersection\nExplanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null."
        ],
        "constrains": "The number of nodes of listA is in the m.\nThe number of nodes of listB is in the n.\n1 <= m, n <= 3 * 104\n1 <= Node.val <= 105\n0 <= skipA <\u00a0m\n0 <= skipB <\u00a0n\nintersectVal is 0 if listA and listB do not intersect.\nintersectVal == listA[skipA] == listB[skipB] if listA and listB intersect.",
        "release_time": 1691478947,
        "oracle_code": "class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        int ac = 0;\n        int bc = 0;\n        ListNode a = headA;\n        ListNode b = headB;\n        while(a != null){\n            ac++;\n            a = a.next;\n        }\n        while(b != null){\n            bc++;\n            b = b.next;\n        }\n        while(ac > bc){\n            ac--;\n            headA = headA.next;\n        }\n        while(bc > ac){\n            bc--;\n            headB = headB.next;\n        }\n        \n        while(headA != headB){\n            headA = headA.next;\n            headB = headB.next;\n        }\n        return headA;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\\n        int ac = 0;\\n        int bc = 0;\\n        ListNode a = headA;\\n        ListNode b = headB;\\n        while(a != null){\\n            ac++;\\n            a = a.next;\\n        }\\n        while(b != null){\\n            bc++;\\n            b = b.next;\\n        }\\n        while(ac > bc){\\n            ac--;\\n            headA = headA.next;\\n        }\\n        while(bc > ac){\\n            bc--;\\n            headB = headB.next;\\n        }\\n        \\n        while(headA != headB){\\n            headA = headA.next;\\n            headB = headB.next;\\n        }\\n        return headA;\\n    }\\n}\\n",
        "level": "easy"
    },
    {
        "slug": "can-make-arithmetic-progression-from-sequence",
        "description": "A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.\nGiven an array of numbers arr, return true if the array can be rearranged to form an arithmetic progression. Otherwise, return false.",
        "examples": [
            "Input: arr = [3,5,1]\nOutput: true\nExplanation: We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.",
            "Input: arr = [1,2,4]\nOutput: false\nExplanation: There is no way to reorder the elements to obtain an arithmetic progression."
        ],
        "constrains": "2 <= arr.length <= 1000\n-106 <= arr[i] <= 106",
        "release_time": 1686057547,
        "oracle_code": "class Solution {\n    public boolean canMakeArithmeticProgression(int[] arr) {\n        Arrays.sort(arr);\n        int diff=arr[1]-arr[0];\n        boolean temp=true;\n        for(int i=1;i<arr.length-1;i++){\n            if(arr[i+1]-arr[i]==diff){\n                continue;\n            }else{\n                temp=false;\n            }\n        }\n        if(temp==true){\n            return true;\n        }else{\n            return false;\n        }\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe given code is an implementation of a method named canMakeArithmeticProgression, which determines whether the given array arr can be rearranged to form an arithmetic progression.\\n\\nHere\\'s how the code works:\\n\\nThe arr array is sorted using the Arrays.sort() method. Sorting the array is important because in an arithmetic progression, the elements are arranged in a specific order.\\n\\nThe variable diff is initialized as the difference between the second element (arr[1]) and the first element (arr[0]). This will be the common difference for the arithmetic progression.\\n\\nThe variable temp is set to true. It will be used to keep track of whether all the adjacent element differences match the common difference.\\n\\nA loop iterates from the second element (i=1) to the second-to-last element (i<arr.length-1). This loop compares the difference between the current element (arr[i+1]) and the previous element (arr[i]) with the common difference (diff).\\n\\nIf the difference between the current and previous elements matches the common difference, the loop continues to the next iteration using the continue statement.\\n\\nIf the difference does not match the common difference, temp is set to false, indicating that the array cannot form an arithmetic progression.\\n\\nFinally, after the loop, the value of temp is checked. If it is still true, the method returns true indicating that the array can form an arithmetic progression. Otherwise, it returns false.\\n\\nIn summary, the code checks if the given array can be sorted into an arithmetic progression by comparing the differences between adjacent elements. If all the differences match the common difference, it returns true; otherwise, it returns false.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach used in the given code can be summarized as follows:\\n\\nSort the array in ascending order using the Arrays.sort() method. Sorting the array helps in identifying the order of the elements in an arithmetic progression.\\n\\nCalculate the common difference (diff) between the second element (arr[1]) and the first element (arr[0]).\\n\\nIterate through the array starting from the second element (i=1) up to the second-to-last element (i<arr.length-1).\\n\\nFor each iteration, check if the difference between the current element (arr[i+1]) and the previous element (arr[i]) is equal to the common difference (diff).\\n\\nIf the difference matches, continue to the next iteration.\\n\\nIf the difference does not match, set the temp variable to false, indicating that the array cannot form an arithmetic progression.\\n\\nAfter the loop, check the value of the temp variable. If it is still true, return true to indicate that the array can form an arithmetic progression. Otherwise, return false.\\n\\nIn summary, the code checks if the given array can be rearranged to form an arithmetic progression by comparing the differences between adjacent elements. If all the differences match the common difference, the code returns true; otherwise, it returns false.\\n\\n# Complexity\\n- Time complexity:O(nlogn)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean canMakeArithmeticProgression(int[] arr) {\\n        Arrays.sort(arr);\\n        int diff=arr[1]-arr[0];\\n        boolean temp=true;\\n        for(int i=1;i<arr.length-1;i++){\\n            if(arr[i+1]-arr[i]==diff){\\n                continue;\\n            }else{\\n                temp=false;\\n            }\\n        }\\n        if(temp==true){\\n            return true;\\n        }else{\\n            return false;\\n        }\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "find-the-winner-of-the-circular-game",
        "description": "There are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.\nThe rules of the game are as follows:\n\nStart at the 1st friend.\nCount the next k friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.\nThe last friend you counted leaves the circle and loses the game.\nIf there is still more than one friend in the circle, go back to step 2 starting from the friend immediately clockwise of the friend who just lost and repeat.\nElse, the last friend in the circle wins the game.\n\nGiven the number of friends, n, and an integer k, return the winner of the game.",
        "examples": [
            "Input: n = 5, k = 2\nOutput: 3\nExplanation: Here are the steps of the game:\n1) Start at friend 1.\n2) Count 2 friends clockwise, which are friends 1 and 2.\n3) Friend 2 leaves the circle. Next start is friend 3.\n4) Count 2 friends clockwise, which are friends 3 and 4.\n5) Friend 4 leaves the circle. Next start is friend 5.\n6) Count 2 friends clockwise, which are friends 5 and 1.\n7) Friend 1 leaves the circle. Next start is friend 3.\n8) Count 2 friends clockwise, which are friends 3 and 5.\n9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.",
            "Input: n = 6, k = 5\nOutput: 1\nExplanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1."
        ],
        "constrains": "1 <= k <= n <= 500",
        "release_time": 1680253276,
        "oracle_code": "class Solution {\n    public int findTheWinner(int n, int k) {\n        Queue<Integer> q = new LinkedList();\n\n        for(int i = 1;i<n+1;i++){\n            q.add(i);\n        }\n        while(q.size()!=1){\n            for(int i = k-1;i>0;i--){\n                q.add(q.poll());\n            }\n            q.poll();\n        }\n\n        return q.poll();\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findTheWinner(int n, int k) {\\n        Queue<Integer> q = new LinkedList();\\n\\n        for(int i = 1;i<n+1;i++){\\n            q.add(i);\\n        }\\n        while(q.size()!=1){\\n            for(int i = k-1;i>0;i--){\\n                q.add(q.poll());\\n            }\\n            q.poll();\\n        }\\n\\n        return q.poll();\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "sum-of-total-strength-of-wizards",
        "description": "As the ruler of a kingdom, you have an army of wizards at your command.\nYou are given a 0-indexed integer array strength, where strength[i] denotes the strength of the ith wizard. For a contiguous group of wizards (i.e. the wizards' strengths form a subarray of strength), the total strength is defined as the product of the following two values:\n\nThe strength of the weakest wizard in the group.\nThe total of all the individual strengths of the wizards in the group.\n\nReturn the sum of the total strengths of all contiguous groups of wizards. Since the answer may be very large, return it modulo 109 + 7.\nA subarray is a contiguous non-empty sequence of elements within an array.",
        "examples": [
            "Input: strength = [1,3,1,2]\nOutput: 44\nExplanation: The following are all the contiguous groups of wizards:\n- [1] from [1,3,1,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1\n- [3] from [1,3,1,2] has a total strength of min([3]) * sum([3]) = 3 * 3 = 9\n- [1] from [1,3,1,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1\n- [2] from [1,3,1,2] has a total strength of min([2]) * sum([2]) = 2 * 2 = 4\n- [1,3] from [1,3,1,2] has a total strength of min([1,3]) * sum([1,3]) = 1 * 4 = 4\n- [3,1] from [1,3,1,2] has a total strength of min([3,1]) * sum([3,1]) = 1 * 4 = 4\n- [1,2] from [1,3,1,2] has a total strength of min([1,2]) * sum([1,2]) = 1 * 3 = 3\n- [1,3,1] from [1,3,1,2] has a total strength of min([1,3,1]) * sum([1,3,1]) = 1 * 5 = 5\n- [3,1,2] from [1,3,1,2] has a total strength of min([3,1,2]) * sum([3,1,2]) = 1 * 6 = 6\n- [1,3,1,2] from [1,3,1,2] has a total strength of min([1,3,1,2]) * sum([1,3,1,2]) = 1 * 7 = 7\nThe sum of all the total strengths is 1 + 9 + 1 + 4 + 4 + 4 + 3 + 5 + 6 + 7 = 44.",
            "Input: strength = [5,4,6]\nOutput: 213\nExplanation: The following are all the contiguous groups of wizards: \n- [5] from [5,4,6] has a total strength of min([5]) * sum([5]) = 5 * 5 = 25\n- [4] from [5,4,6] has a total strength of min([4]) * sum([4]) = 4 * 4 = 16\n- [6] from [5,4,6] has a total strength of min([6]) * sum([6]) = 6 * 6 = 36\n- [5,4] from [5,4,6] has a total strength of min([5,4]) * sum([5,4]) = 4 * 9 = 36\n- [4,6] from [5,4,6] has a total strength of min([4,6]) * sum([4,6]) = 4 * 10 = 40\n- [5,4,6] from [5,4,6] has a total strength of min([5,4,6]) * sum([5,4,6]) = 4 * 15 = 60\nThe sum of all the total strengths is 25 + 16 + 36 + 36 + 40 + 60 = 213."
        ],
        "constrains": "1 <= strength.length <= 105\n1 <= strength[i] <= 109",
        "release_time": 1655300329,
        "oracle_code": "class Solution {\n    public int totalStrength(int[] strength) {\n        int mod = 1000000007;\n        \n        int len = strength.length;\n        \n        long[] prefix = prefixSum(strength, len, mod);\n        \n        Deque<Integer> stack = new ArrayDeque<>();\n        stack.push(-1);\n\n        long ans = 0;\n        for(int i = 0; i < len; i++) {\n            while(stack.peek() != -1 && strength[i] <= strength[stack.peek()]) {\n                int mid = stack.pop();\n                int left = stack.peek() + 1;\n                int right = i - 1;\n                \n                int n = (mid - left);\n                int t = (right - mid);\n                \n                long val = (1l * (1 + n) * (prefix[right + 2] - prefix[mid + 1]) + mod) % mod;\n                val -= (1l * (1 + t) * (prefix[mid + 1] - prefix[left]) + mod) % mod;\n                val *= strength[mid];\n                \n                ans += val;\n                ans %= mod;\n            }\n            \n            stack.push(i);\n        }\n        \n        int right = len - 1;\n        while(stack.peek() != -1) {\n            int mid = stack.pop();\n            int left = stack.peek() + 1;\n            \n            int n = (mid - left);\n            int t = (right - mid);\n\n            long val = (1l * (1 + n) * (prefix[right + 2] - prefix[mid + 1]) + mod) % mod;\n            val -= (1l * (1 + t) * (prefix[mid + 1] - prefix[left]) + mod) % mod;\n            val *= strength[mid];\n\n            ans += val;\n            ans %= mod;\n        }\n        \n        return (int)((ans + mod) % mod);\n    }\n    \n    private long[] prefixSum(int[] strength, int len, int mod) {\n        long[] prefix = new long[len + 1];\n        \n        for(int i = 0; i < len; i++) {\n            prefix[i + 1] = prefix[i] + strength[i];\n        }\n        \n        long[] doublePrefix = new long[len + 2];\n        for(int i = 0; i <= len; i++) {\n            doublePrefix[i + 1] = (doublePrefix[i] + prefix[i]) % mod;\n        }\n\n        return doublePrefix;\n    }\n}",
        "content": "I could not figure out `o(n)` approach on my own. \\nI needed to read at least 3 solution by really brilliant people (top voted) to understand the approach.\\nThen I had to do the math on pen-paper 3 times (made mistake 2 time) to actually understand the approach.\\nThen when I actually started coding, I made some some silly mistakes around Stack boundry and \\nthe cherry on top was that you need to do `+ mod) % mod` at almost every place you are doing any calculation.\\n\\nOverall, very good learning experience but I really pity the ones who actually face this in interview.\\n\\nRun time complexity: `4 * O(n)` =  `O(n)` \\nSpace compexity: `O(n)`\\n\\nMy java solution -\\n```\\nclass Solution {\\n    public int totalStrength(int[] strength) {\\n        int mod = 1000000007;\\n        \\n        int len = strength.length;\\n        \\n        long[] prefix = prefixSum(strength, len, mod);\\n        \\n        Deque<Integer> stack = new ArrayDeque<>();\\n        stack.push(-1);\\n\\n        long ans = 0;\\n        for(int i = 0; i < len; i++) {\\n            while(stack.peek() != -1 && strength[i] <= strength[stack.peek()]) {\\n                int mid = stack.pop();\\n                int left = stack.peek() + 1;\\n                int right = i - 1;\\n                \\n                int n = (mid - left);\\n                int t = (right - mid);\\n                \\n                long val = (1l * (1 + n) * (prefix[right + 2] - prefix[mid + 1]) + mod) % mod;\\n                val -= (1l * (1 + t) * (prefix[mid + 1] - prefix[left]) + mod) % mod;\\n                val *= strength[mid];\\n                \\n                ans += val;\\n                ans %= mod;\\n            }\\n            \\n            stack.push(i);\\n        }\\n        \\n        int right = len - 1;\\n        while(stack.peek() != -1) {\\n            int mid = stack.pop();\\n            int left = stack.peek() + 1;\\n            \\n            int n = (mid - left);\\n            int t = (right - mid);\\n\\n            long val = (1l * (1 + n) * (prefix[right + 2] - prefix[mid + 1]) + mod) % mod;\\n            val -= (1l * (1 + t) * (prefix[mid + 1] - prefix[left]) + mod) % mod;\\n            val *= strength[mid];\\n\\n            ans += val;\\n            ans %= mod;\\n        }\\n        \\n        return (int)((ans + mod) % mod);\\n    }\\n    \\n    private long[] prefixSum(int[] strength, int len, int mod) {\\n        long[] prefix = new long[len + 1];\\n        \\n        for(int i = 0; i < len; i++) {\\n            prefix[i + 1] = prefix[i] + strength[i];\\n        }\\n        \\n        long[] doublePrefix = new long[len + 2];\\n        for(int i = 0; i <= len; i++) {\\n            doublePrefix[i + 1] = (doublePrefix[i] + prefix[i]) % mod;\\n        }\\n\\n        return doublePrefix;\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "second-minimum-node-in-a-binary-tree",
        "description": "Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property\u00a0root.val = min(root.left.val, root.right.val)\u00a0always holds.\nGiven such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.\nIf no such second minimum value exists, output -1 instead.",
        "examples": [
            "Input: root = [2,2,5,null,null,5,7]\nOutput: 5\nExplanation: The smallest value is 2, the second smallest value is 5.",
            "Input: root = [2,2,2]\nOutput: -1\nExplanation: The smallest value is 2, but there isn't any second smallest value."
        ],
        "constrains": "The number of nodes in the tree is in the range [1, 25].\n1 <= Node.val <= 231 - 1\nroot.val == min(root.left.val, root.right.val)\u00a0for each internal node of the tree.",
        "release_time": 1677899029,
        "oracle_code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int min=-1;\n    int secondMin=Integer.MAX_VALUE;\n    boolean flag=false;\n    public int findSecondMinimumValue(TreeNode root) {\n        if(root == null)return secondMin;\n        min =root.val;\n        help(root);\n        if(!flag){return -1;}\n        return secondMin;\n    }\n    public void help(TreeNode root){\n        if(root == null)return;\n        if(min< root.val && root.val<= secondMin){\n            secondMin = root.val;\n            flag = true;\n        }\n        help(root.left);\n        help(root.right);\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIf you like my solution please upvote\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    int min=-1;\\n    int secondMin=Integer.MAX_VALUE;\\n    boolean flag=false;\\n    public int findSecondMinimumValue(TreeNode root) {\\n        if(root == null)return secondMin;\\n        min =root.val;\\n        help(root);\\n        if(!flag){return -1;}\\n        return secondMin;\\n    }\\n    public void help(TreeNode root){\\n        if(root == null)return;\\n        if(min< root.val && root.val<= secondMin){\\n            secondMin = root.val;\\n            flag = true;\\n        }\\n        help(root.left);\\n        help(root.right);\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "count-number-of-pairs-with-absolute-difference-k",
        "description": "Given an integer array nums and an integer k, return the number of pairs (i, j) where i < j such that |nums[i] - nums[j]| == k.\nThe value of |x| is defined as:\n\nx if x >= 0.\n-x if x < 0.",
        "examples": [
            "Input: nums = [1,2,2,1], k = 1\nOutput: 4\nExplanation: The pairs with an absolute difference of 1 are:\n- [1,2,2,1]\n- [1,2,2,1]\n- [1,2,2,1]\n- [1,2,2,1]",
            "Input: nums = [1,3], k = 3\nOutput: 0\nExplanation: There are no pairs with an absolute difference of 3.",
            "Input: nums = [3,2,1,5,4], k = 2\nOutput: 3\nExplanation: The pairs with an absolute difference of 2 are:\n- [3,2,1,5,4]\n- [3,2,1,5,4]\n- [3,2,1,5,4]"
        ],
        "constrains": "1 <= nums.length <= 200\n1 <= nums[i] <= 100\n1 <= k <= 99",
        "release_time": 1688377436,
        "oracle_code": "class Solution {\n    public int countKDifference(int[] nums, int k) {\n        int count = 0;\n        for(int i=0; i<nums.length-1; i++){\n            for(int j=i+1; j<nums.length; j++){\n                if(Math.abs(nums[i]-nums[j])== k){\n                    count++;\n                }\n            }\n        }\n\n        return count;\n        \n    }\n}",
        "content": "\\n\\n# Complexity\\n- Time complexity: $$O(n^2)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countKDifference(int[] nums, int k) {\\n        int count = 0;\\n        for(int i=0; i<nums.length-1; i++){\\n            for(int j=i+1; j<nums.length; j++){\\n                if(Math.abs(nums[i]-nums[j])== k){\\n                    count++;\\n                }\\n            }\\n        }\\n\\n        return count;\\n        \\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "maximum-number-of-integers-to-choose-from-a-range-i",
        "description": "You are given an integer array banned and two integers n and maxSum. You are choosing some number of integers following the below rules:\n\nThe chosen integers have to be in the range [1, n].\nEach integer can be chosen at most once.\nThe chosen integers should not be in the array banned.\nThe sum of the chosen integers should not exceed maxSum.\n\nReturn the maximum number of integers you can choose following the mentioned rules.",
        "examples": [
            "Input: banned = [1,6,5], n = 5, maxSum = 6\nOutput: 2\nExplanation: You can choose the integers 2 and 4.\n2 and 4 are from the range [1, 5], both did not appear in banned, and their sum is 6, which did not exceed maxSum.",
            "Input: banned = [1,2,3,4,5,6,7], n = 8, maxSum = 1\nOutput: 0\nExplanation: You cannot choose any integer while following the mentioned conditions.",
            "Input: banned = [11], n = 7, maxSum = 50\nOutput: 7\nExplanation: You can choose the integers 1, 2, 3, 4, 5, 6, and 7.\nThey are from the range [1, 7], all did not appear in banned, and their sum is 28, which did not exceed maxSum."
        ],
        "constrains": "1 <= banned.length <= 104\n1 <= banned[i], n <= 104\n1 <= maxSum <= 109",
        "release_time": 1679763684,
        "oracle_code": "class Solution {\n    public int maxCount(int[] banned, int n, int maxSum) {\n\n        // Create a HashSet of banned integers for fast lookup\n        Set<Integer> banSet = new HashSet<>();\n        for (int num : banned) {\n            banSet.add(num);\n        }\n\n        // Initialize count and sum to 0\n        int count = 0;\n        int sum = 0;\n\n        // Iterate over the range [1, n]\n        for (int i = 1; i <= n; i++) {\n\n            // Check if the current integer is not banned and adding it to sum does not exceed maxSum\n            if (!banSet.contains(i) && (sum + i <= maxSum)) {\n            // Increment count and add the current integer to sum\n                count++;\n                sum += i;\n            }\n        }\n    // Return the maximum count of chosen integers\n    return count;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(N)\\n![Screenshot_20230205_171246.png](https://assets.leetcode.com/users/images/bfae0867-a2e9-46fd-a802-cdd36cf2f897_1679763680.3311183.png)\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxCount(int[] banned, int n, int maxSum) {\\n\\n        // Create a HashSet of banned integers for fast lookup\\n        Set<Integer> banSet = new HashSet<>();\\n        for (int num : banned) {\\n            banSet.add(num);\\n        }\\n\\n        // Initialize count and sum to 0\\n        int count = 0;\\n        int sum = 0;\\n\\n        // Iterate over the range [1, n]\\n        for (int i = 1; i <= n; i++) {\\n\\n            // Check if the current integer is not banned and adding it to sum does not exceed maxSum\\n            if (!banSet.contains(i) && (sum + i <= maxSum)) {\\n            // Increment count and add the current integer to sum\\n                count++;\\n                sum += i;\\n            }\\n        }\\n    // Return the maximum count of chosen integers\\n    return count;\\n    }\\n}\\n\\n\\n```",
        "level": "medium"
    },
    {
        "slug": "arithmetic-slices-ii-subsequence",
        "description": "Given an integer array nums, return the number of all the arithmetic subsequences of nums.\nA sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\n\nFor example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences.\nFor example, [1, 1, 2, 5, 7] is not an arithmetic sequence.\n\nA subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\n\nFor example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].\n\nThe test cases are generated so that the answer fits in 32-bit integer.",
        "examples": [
            "Input: nums = [2,4,6,8,10]\nOutput: 7\nExplanation: All arithmetic subsequence slices are:\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]",
            "Input: nums = [7,7,7,7,7]\nOutput: 16\nExplanation: Any subsequence of this array is arithmetic."
        ],
        "constrains": "1\u00a0 <= nums.length <= 1000\n-231 <= nums[i] <= 231 - 1",
        "release_time": 1669530463,
        "oracle_code": "class Solution {\n\tpublic int numberOfArithmeticSlices(int[] arr) {\n\t\tint n = arr.length;\n\t\tHashMap<Integer, Integer>[] map = new HashMap[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tmap[i] = new HashMap<>();\n\t\t}\n\t\tint ans = 0;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tlong cd = (long) arr[i] - (long) arr[j];\n\t\t\t\tif (cd <= Integer.MIN_VALUE || cd >= Integer.MAX_VALUE)\n\t\t\t\t\tcontinue;\n\t\t\t\tint asj = map[j].getOrDefault((int) cd, 0);\n\t\t\t\tint asi = map[i].getOrDefault((int) cd, 0);\n\t\t\t\tans += asj;\n\t\t\t\tmap[i].put((int) cd, asi + asj + 1);\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}",
        "content": "# Code\\n```\\nclass Solution {\\n\\tpublic int numberOfArithmeticSlices(int[] arr) {\\n\\t\\tint n = arr.length;\\n\\t\\tHashMap<Integer, Integer>[] map = new HashMap[n];\\n\\t\\tfor (int i = 0; i < n; i++) {\\n\\t\\t\\tmap[i] = new HashMap<>();\\n\\t\\t}\\n\\t\\tint ans = 0;\\n\\t\\tfor (int i = 1; i < n; i++) {\\n\\t\\t\\tfor (int j = 0; j < i; j++) {\\n\\t\\t\\t\\tlong cd = (long) arr[i] - (long) arr[j];\\n\\t\\t\\t\\tif (cd <= Integer.MIN_VALUE || cd >= Integer.MAX_VALUE)\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\tint asj = map[j].getOrDefault((int) cd, 0);\\n\\t\\t\\t\\tint asi = map[i].getOrDefault((int) cd, 0);\\n\\t\\t\\t\\tans += asj;\\n\\t\\t\\t\\tmap[i].put((int) cd, asi + asj + 1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn ans;\\n\\t}\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "count-items-matching-a-rule",
        "description": "You are given an array items, where each items[i] = [typei, colori, namei] describes the type, color, and name of the ith item. You are also given a rule represented by two strings, ruleKey and ruleValue.\nThe ith item is said to match the rule if one of the following is true:\n\nruleKey == \"type\" and ruleValue == typei.\nruleKey == \"color\" and ruleValue == colori.\nruleKey == \"name\" and ruleValue == namei.\n\nReturn the number of items that match the given rule.",
        "examples": [
            "Input: items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"lenovo\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"color\", ruleValue = \"silver\"\nOutput: 1\nExplanation: There is only one item matching the given rule, which is [\"computer\",\"silver\",\"lenovo\"].",
            "Input: items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"phone\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"type\", ruleValue = \"phone\"\nOutput: 2\nExplanation: There are only two items matching the given rule, which are [\"phone\",\"blue\",\"pixel\"] and [\"phone\",\"gold\",\"iphone\"]. Note that the item [\"computer\",\"silver\",\"phone\"] does not match."
        ],
        "constrains": "1 <= items.length <= 104\n1 <= typei.length, colori.length, namei.length, ruleValue.length <= 10\nruleKey is equal to either \"type\", \"color\", or \"name\".\nAll strings consist only of lowercase letters.",
        "release_time": 1691915583,
        "oracle_code": "class Solution {\n    public int countMatches(List<List<String>> items, String ruleKey, String ruleValue) {\n        int count = 0;  // Initialize a counter to keep track of matching items.\n\n        String type = \"type\";  // Define the string constants for different ruleKeys.\n        int i = 0;  // Initialize the index variable to access the correct property of the items.\n\n        // Check the value of ruleKey and set the index (i) accordingly.\n        if (ruleKey.equals(type)) {\n            i = 0;  // If ruleKey is \"type\", set index to 0 (type property).\n        }\n        String color = \"color\";\n        if (ruleKey.equals(color)) {\n            i = 1;  // If ruleKey is \"color\", set index to 1 (color property).\n        }\n        String name = \"name\";\n        if (ruleKey.equals(name)) {\n            i = 2;  // If ruleKey is \"name\", set index to 2 (name property).\n        }\n\n        // Iterate through each item in the items list.\n        for (int j = 0; j < items.size(); j++) {\n            // Check if the property at index i of the current item matches ruleValue.\n            if (items.get(j).get(i).equals(ruleValue)) {\n                count++;  // If there's a match, increment the count.\n            }\n        }\n        \n        return count;  // Return the final count of items that match the rule.\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n![image.png](https://assets.leetcode.com/users/images/3afc1634-9bf6-4067-ad26-d7bbca6fc1fd_1691915490.7061198.png)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int countMatches(List<List<String>> items, String ruleKey, String ruleValue) {\\n        int count = 0;  // Initialize a counter to keep track of matching items.\\n\\n        String type = \"type\";  // Define the string constants for different ruleKeys.\\n        int i = 0;  // Initialize the index variable to access the correct property of the items.\\n\\n        // Check the value of ruleKey and set the index (i) accordingly.\\n        if (ruleKey.equals(type)) {\\n            i = 0;  // If ruleKey is \"type\", set index to 0 (type property).\\n        }\\n        String color = \"color\";\\n        if (ruleKey.equals(color)) {\\n            i = 1;  // If ruleKey is \"color\", set index to 1 (color property).\\n        }\\n        String name = \"name\";\\n        if (ruleKey.equals(name)) {\\n            i = 2;  // If ruleKey is \"name\", set index to 2 (name property).\\n        }\\n\\n        // Iterate through each item in the items list.\\n        for (int j = 0; j < items.size(); j++) {\\n            // Check if the property at index i of the current item matches ruleValue.\\n            if (items.get(j).get(i).equals(ruleValue)) {\\n                count++;  // If there\\'s a match, increment the count.\\n            }\\n        }\\n        \\n        return count;  // Return the final count of items that match the rule.\\n    }\\n}\\n\\n```",
        "level": "easy"
    },
    {
        "slug": "final-prices-with-a-special-discount-in-a-shop",
        "description": "You are given an integer array prices where prices[i] is the price of the ith item in a shop.\nThere is a special discount for items in the shop. If you buy the ith item, then you will receive a discount equivalent to prices[j] where j is the minimum index such that j > i and prices[j] <= prices[i]. Otherwise, you will not receive any discount at all.\nReturn an integer array answer where answer[i] is the final price you will pay for the ith item of the shop, considering the special discount.",
        "examples": [
            "Input: prices = [8,4,6,2,3]\nOutput: [4,2,4,2,3]\nExplanation: \nFor item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4.\nFor item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2.\nFor item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4.\nFor items 3 and 4 you will not receive any discount at all.",
            "Input: prices = [1,2,3,4,5]\nOutput: [1,2,3,4,5]\nExplanation: In this case, for all items, you will not receive any discount at all.",
            "Input: prices = [10,1,1,6]\nOutput: [9,0,1,6]"
        ],
        "constrains": "1 <= prices.length <= 500\n1 <= prices[i] <= 1000",
        "release_time": 1685478056,
        "oracle_code": "class Solution {\n    public int[] finalPrices(int[] prices) {\n        for(int i = 0; i < prices.length; i++)\n            prices[i] = getPrice(i, prices[i], prices); \n        return prices;\n    }\n\n    public int getPrice(int i, int price, int[] prices){\n        for(int j = i + 1; j < prices.length; j++)\n            if(prices[j] <= prices[i])\n                return price - prices[j];\n        return price;\n    }\n}",
        "content": "# Approach\\n\\nThe `finalPrices` function takes an integer array `prices` as input and returns an integer array as the output. It initializes a for loop that iterates from 0 to the length of the `prices` array.\\n\\nInside the loop, it calls the `getPrice` function, passing the current index `i`, the price at index `i` in the `prices` array, and the `prices` array itself. The `getPrice` function calculates the discount for the current item based on the subsequent items.\\n\\nThe `getPrice` function also uses a for loop, starting from the index next to `i` (i + 1) and continuing until the end of the `prices` array. It checks if the price at the current index `j` is less than or equal to the price at index `i`. If it is, it means a discount is available.\\n\\nIn that case, the function subtracts the discounted price (the price at index `j`) from the original price (the price at index `i`) and returns the result. This represents the final price the customer will pay for the item.\\n\\nIf no discount is found during the iteration, the function simply returns the original price, indicating that no discount is applicable for that item.\\n\\nBack in the `finalPrices` function, the result of the `getPrice` function is assigned to the `i`th index of the `prices` array. This updates the array with the final prices for each item as they are processed.\\n\\nFinally, after iterating through all the items in the `prices` array, the modified `prices` array is returned as the output of the `finalPrices` function.\\n\\n# Complexity\\n- Time complexity: O(n^2)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] finalPrices(int[] prices) {\\n        for(int i = 0; i < prices.length; i++)\\n            prices[i] = getPrice(i, prices[i], prices); \\n        return prices;\\n    }\\n\\n    public int getPrice(int i, int price, int[] prices){\\n        for(int j = i + 1; j < prices.length; j++)\\n            if(prices[j] <= prices[i])\\n                return price - prices[j];\\n        return price;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "most-frequent-subtree-sum",
        "description": "Given the root of a binary tree, return the most frequent subtree sum. If there is a tie, return all the values with the highest frequency in any order.\nThe subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).",
        "examples": [
            "Input: root = [5,2,-3]\nOutput: [2,-3,4]",
            "Input: root = [5,2,-5]\nOutput: [2]"
        ],
        "constrains": "The number of nodes in the tree is in the range [1, 104].\n-105 <= Node.val <= 105",
        "release_time": 1663541881,
        "oracle_code": "class Solution{\n    public int[] findFrequentTreeSum(TreeNode root) {\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        helper(root, map);\n        List<Integer> list = new ArrayList();\n        \n        int max = (Collections.max(map.values()));\n        for(Map.Entry<Integer, Integer> entry : map.entrySet()){\n            if(entry.getValue() == max){\n                list.add(entry.getKey());\n            }\n        }\n        \n        int[] arr = new int[list.size()];\n        for(int i=0; i<list.size(); i++){\n            arr[i] = list.get(i);\n        }\n        \n        return arr;\n    }\n    public int helper(TreeNode root, Map<Integer, Integer> map){\n        if(root==null) return 0;\n        int left = helper(root.left, map);\n        int right = helper(root.right, map);\n        \n        int sum = root.val+left+right;\n        if(map.containsKey(sum)){\n            map.put(sum, map.get(sum)+1);\n        }else{\n            map.put(sum, 1);\n        }\n        \n        return sum;\n    }\n}",
        "content": "```\\nclass Solution{\\n    public int[] findFrequentTreeSum(TreeNode root) {\\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\\n        helper(root, map);\\n        List<Integer> list = new ArrayList();\\n        \\n        int max = (Collections.max(map.values()));\\n        for(Map.Entry<Integer, Integer> entry : map.entrySet()){\\n            if(entry.getValue() == max){\\n                list.add(entry.getKey());\\n            }\\n        }\\n        \\n        int[] arr = new int[list.size()];\\n        for(int i=0; i<list.size(); i++){\\n            arr[i] = list.get(i);\\n        }\\n        \\n        return arr;\\n    }\\n    public int helper(TreeNode root, Map<Integer, Integer> map){\\n        if(root==null) return 0;\\n        int left = helper(root.left, map);\\n        int right = helper(root.right, map);\\n        \\n        int sum = root.val+left+right;\\n        if(map.containsKey(sum)){\\n            map.put(sum, map.get(sum)+1);\\n        }else{\\n            map.put(sum, 1);\\n        }\\n        \\n        return sum;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "n-ary-tree-preorder-traversal",
        "description": "Given the root of an n-ary tree, return the preorder traversal of its nodes' values.\nNary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)",
        "examples": [
            "Input: root = [1,null,3,2,4,null,5,6]\nOutput: [1,3,5,6,2,4]",
            "Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]"
        ],
        "constrains": "The number of nodes in the tree is in the range [0, 104].\n0 <= Node.val <= 104\nThe height of the n-ary tree is less than or equal to 1000.",
        "release_time": 1676960316,
        "oracle_code": "class Solution {\n    List<Integer> arr = new ArrayList<>();\n    public List<Integer> preorder(Node root) {\n        if (root==null) return arr;\n        arr.add(root.val);\n        for (Node i : root.children) {\n            preorder(i);\n        }\n        return arr;\n    }\n}",
        "content": "# Code\\n```\\nclass Solution {\\n    List<Integer> arr = new ArrayList<>();\\n    public List<Integer> preorder(Node root) {\\n        if (root==null) return arr;\\n        arr.add(root.val);\\n        for (Node i : root.children) {\\n            preorder(i);\\n        }\\n        return arr;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "minimum-falling-path-sum-ii",
        "description": "Given an n x n integer matrix grid, return the minimum sum of a falling path with non-zero shifts.\nA falling path with non-zero shifts is a choice of exactly one element from each row of grid such that no two elements chosen in adjacent rows are in the same column.",
        "examples": [
            "Input: grid = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: 13\nExplanation: \nThe possible falling paths are:\n[1,5,9], [1,5,7], [1,6,7], [1,6,8],\n[2,4,8], [2,4,9], [2,6,7], [2,6,8],\n[3,4,8], [3,4,9], [3,5,7], [3,5,9]\nThe falling path with the smallest sum is\u00a0[1,5,7], so the answer is\u00a013.",
            "Input: grid = [[7]]\nOutput: 7"
        ],
        "constrains": "n == grid.length == grid[i].length\n1 <= n <= 200\n-99 <= grid[i][j] <= 99",
        "release_time": 1668185090,
        "oracle_code": "class Solution {\n    int m;\n    int n;\n    Integer memo[][];\n\n    public int minFallingPathSum(int[][] grid) {   \n         m=grid.length;\n         n=grid[0].length;\n        //<<---------------for Recursive Soln--------------->>\n         memo=new Integer[m][n];//memo [][]\n\n         int recRes=Integer.MAX_VALUE;\n\n         //iterate over the 1st rows col \n        //  for(int col=0;col<n;col++)\n        //            recRes=Math.min(recRes,minFallingPathSum_Rec(grid,0,col));\n\n      //<<---------------for Recursive Soln--------------->>\n        //  return recRes;\n\n          //<<---------------for Tabulation  Soln--------------->>\n         int Tabulation_Ans=minFallingPathSum_Tabulation(grid);\n         return Tabulation_Ans;\n    }\n\n    public int minFallingPathSum_Rec(int[][] grid,int i,int j){\n            \n            if(j<0 || j>=n || i<0 || i>=m)\n                           return Integer.MAX_VALUE;\n\n            if(i==m-1)\n                     return grid[i][j];\n\n            if(memo[i][j]!=null)\n                        return memo[i][j];\n\n            int lowerLeftSum=Integer.MAX_VALUE;\n            int lowerRightSum=Integer.MAX_VALUE;\n\n            for(int col=0;col<=j-1;col++)\n                    lowerLeftSum=Math.min(lowerLeftSum,minFallingPathSum_Rec(grid,i+1,col));\n\n            for(int col=j+1;col<=n-1;col++)\n                    lowerRightSum=Math.min(lowerRightSum,minFallingPathSum_Rec(grid,i+1,col));\n\n          return memo[i][j]=Math.min(lowerLeftSum,lowerRightSum)+grid[i][j];\n\n     }//rec--->>memorization\n\n\n\n\n     int minFallingPathSum_Tabulation(int[][] grid){\n          int dp[][]=new int[m][n];\n\n          for(int i=m-1;i>=0;i--){\n              for(int j=n-1;j>=0;j--){\n                    \n                    if(i==m-1)\n                     {\n                         dp[i][j]=grid[i][j];\n                         continue;\n                     }//base case : if the last row \n                \n                int lowerLeftSum=Integer.MAX_VALUE;\n                int lowerRightSum=Integer.MAX_VALUE;\n                //for lower left sum calculation \n                for(int col=0;col<=j-1;col++){\n                    lowerLeftSum=Math.min(lowerLeftSum,((col<0)?Integer.MAX_VALUE:dp[i+1][col]));\n                }\n                \n                //for lower right sum calculation \n                for(int col=j+1;col<=n-1;col++){\n                    lowerRightSum=Math.min(lowerRightSum,((col>=n)?Integer.MAX_VALUE:dp[i+1][col]));\n                \n                }\n                \n                dp[i][j]=Math.min(lowerLeftSum,lowerRightSum)+grid[i][j];\n              \n              }//inner \n          }//ouer \n           \n\n          int Ans=Integer.MAX_VALUE;\n\n          for(int COL=0;COL<n;COL++){\n              Ans=Math.min(Ans,dp[0][COL]);\n          }\n          \n          return Ans;\n     \n     }//tabulation soln:derived from the recursive soln \n}",
        "content": "# Intuition\\nat any particular cell grid(i,j) we need the minm of all cells of f(i+1,{0 to j-1}) and all minm of cells of f(i+1,{j+1 to n-1})\\n\\n\\n# I have shared both recursive/memo code and alternate tabulation code on same code space . Have a look into the soln and do let me know if any confusion . Please do upvote if you find the soln helpful \\uD83D\\uDE80\\n\\n# Code\\n```\\nclass Solution {\\n    int m;\\n    int n;\\n    Integer memo[][];\\n\\n    public int minFallingPathSum(int[][] grid) {   \\n         m=grid.length;\\n         n=grid[0].length;\\n        //<<---------------for Recursive Soln--------------->>\\n         memo=new Integer[m][n];//memo [][]\\n\\n         int recRes=Integer.MAX_VALUE;\\n\\n         //iterate over the 1st rows col \\n        //  for(int col=0;col<n;col++)\\n        //            recRes=Math.min(recRes,minFallingPathSum_Rec(grid,0,col));\\n\\n      //<<---------------for Recursive Soln--------------->>\\n        //  return recRes;\\n\\n          //<<---------------for Tabulation  Soln--------------->>\\n         int Tabulation_Ans=minFallingPathSum_Tabulation(grid);\\n         return Tabulation_Ans;\\n    }\\n\\n    public int minFallingPathSum_Rec(int[][] grid,int i,int j){\\n            \\n            if(j<0 || j>=n || i<0 || i>=m)\\n                           return Integer.MAX_VALUE;\\n\\n            if(i==m-1)\\n                     return grid[i][j];\\n\\n            if(memo[i][j]!=null)\\n                        return memo[i][j];\\n\\n            int lowerLeftSum=Integer.MAX_VALUE;\\n            int lowerRightSum=Integer.MAX_VALUE;\\n\\n            for(int col=0;col<=j-1;col++)\\n                    lowerLeftSum=Math.min(lowerLeftSum,minFallingPathSum_Rec(grid,i+1,col));\\n\\n            for(int col=j+1;col<=n-1;col++)\\n                    lowerRightSum=Math.min(lowerRightSum,minFallingPathSum_Rec(grid,i+1,col));\\n\\n          return memo[i][j]=Math.min(lowerLeftSum,lowerRightSum)+grid[i][j];\\n\\n     }//rec--->>memorization\\n\\n\\n\\n\\n     int minFallingPathSum_Tabulation(int[][] grid){\\n          int dp[][]=new int[m][n];\\n\\n          for(int i=m-1;i>=0;i--){\\n              for(int j=n-1;j>=0;j--){\\n                    \\n                    if(i==m-1)\\n                     {\\n                         dp[i][j]=grid[i][j];\\n                         continue;\\n                     }//base case : if the last row \\n                \\n                int lowerLeftSum=Integer.MAX_VALUE;\\n                int lowerRightSum=Integer.MAX_VALUE;\\n                //for lower left sum calculation \\n                for(int col=0;col<=j-1;col++){\\n                    lowerLeftSum=Math.min(lowerLeftSum,((col<0)?Integer.MAX_VALUE:dp[i+1][col]));\\n                }\\n                \\n                //for lower right sum calculation \\n                for(int col=j+1;col<=n-1;col++){\\n                    lowerRightSum=Math.min(lowerRightSum,((col>=n)?Integer.MAX_VALUE:dp[i+1][col]));\\n                \\n                }\\n                \\n                dp[i][j]=Math.min(lowerLeftSum,lowerRightSum)+grid[i][j];\\n              \\n              }//inner \\n          }//ouer \\n           \\n\\n          int Ans=Integer.MAX_VALUE;\\n\\n          for(int COL=0;COL<n;COL++){\\n              Ans=Math.min(Ans,dp[0][COL]);\\n          }\\n          \\n          return Ans;\\n     \\n     }//tabulation soln:derived from the recursive soln \\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "strictly-palindromic-number",
        "description": "An integer n is strictly palindromic if, for every base b between 2 and n - 2 (inclusive), the string representation of the integer n in base b is palindromic.\nGiven an integer n, return true if n is strictly palindromic and false otherwise.\nA string is palindromic if it reads the same forward and backward.",
        "examples": [
            "Input: n = 9\nOutput: false\nExplanation: In base 2: 9 = 1001 (base 2), which is palindromic.\nIn base 3: 9 = 100 (base 3), which is not palindromic.\nTherefore, 9 is not strictly palindromic so we return false.\nNote that in bases 4, 5, 6, and 7, n = 9 is also not palindromic.",
            "Input: n = 4\nOutput: false\nExplanation: We only consider base 2: 4 = 100 (base 2), which is not palindromic.\nTherefore, we return false."
        ],
        "constrains": "4 <= n <= 105",
        "release_time": 1691219756,
        "oracle_code": "class Solution {\n    public boolean isStrictlyPalindromic(int n) {\n        boolean ans = false;\n        for(int i=2; i<n-2; i++){\n            int num = n;\n            int reverse=0;\n            int rem;\n            while(num!=0){\n                rem = num%i;\n                reverse = (reverse*10)+(rem);\n                num=num/i;\n            }\n            if(reverse==n){\n                ans = true;\n            }\n            else{\n                ans=false;\n                break;\n            }\n        }\n        return ans;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n*log(n))\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isStrictlyPalindromic(int n) {\\n        boolean ans = false;\\n        for(int i=2; i<n-2; i++){\\n            int num = n;\\n            int reverse=0;\\n            int rem;\\n            while(num!=0){\\n                rem = num%i;\\n                reverse = (reverse*10)+(rem);\\n                num=num/i;\\n            }\\n            if(reverse==n){\\n                ans = true;\\n            }\\n            else{\\n                ans=false;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "remove-nth-node-from-end-of-list",
        "description": "Given the head of a linked list, remove the nth node from the end of the list and return its head.",
        "examples": [
            "Input: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]",
            "Input: head = [1], n = 1\nOutput: []",
            "Input: head = [1,2], n = 1\nOutput: [1]"
        ],
        "constrains": "The number of nodes in the list is sz.\n1 <= sz <= 30\n0 <= Node.val <= 100\n1 <= n <= sz",
        "release_time": 1683371341,
        "oracle_code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n       ListNode start = new ListNode();\n        start.next = head;\n        ListNode fast = start;\n        ListNode slow = start;     \n\n        for(int i = 1; i <= n; ++i)\n            fast = fast.next;\n    \n        while(fast.next != null)\n        {\n            fast = fast.next;\n            slow = slow.next;\n        }\n        \n        slow.next = slow.next.next;\n        \n        return start.next;\n    }\n}",
        "content": "# Intuition\\nwe can find the nth node just by one traversal by using two pointer approach.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nTake two dummy nodes, who\\u2019s next will be pointing to the head.\\nTake another node to store the head, initially,s a dummy node(start), and the next node will be pointing to the head. The reason why we are using this extra dummy node is that there is an edge case. If the node is equal to the length of the LinkedList, then this slow will point to slow\\u2019s next\\u2192 next. And we can say our dummy start node will be broken and will be connected to the slow next\\u2192 next.\\n\\nStart traversing until the fast pointer reaches the nth node.\\n![image.png](https://assets.leetcode.com/users/images/6d30920b-bf59-4564-897d-869a54148190_1683371160.3817167.png)\\n\\nNow start traversing by one step both of the pointers until the fast pointers reach the end.\\n    \\n![image.png](https://assets.leetcode.com/users/images/6e6e1af9-8863-4eff-988c-decc91e86746_1683371181.7739182.png)\\n\\nWhen the traversal is done, just do the deleting part. Make slow pointers next to the next of the slow pointer to ignore/disconnect the given node.\\n![image.png](https://assets.leetcode.com/users/images/8fd772c7-a44b-4569-99bd-293d4c5dcd32_1683371203.3690717.png)\\n\\n\\nLast, return to the next start.\\nDry Run:  We will be taking the first example for the dry run, so, the LinkedList is [1,2,3,4,5] and the node which has to be deleted is 2 from the last. For the first time, fast ptr starts traversing from node 1 and reaches 2, as it traverses for node number 2, then the slow ptr starts increasing one, and as well as the fast ptr until it reaches the end.\\n\\n1st traversal : fast=3, slow=1\\n2nd traversal : fast=4, slow=2\\n3rd traversal : fast=5, slow=3\\nNow, the slow->next->next will be pointed to the slow->next\\n\\nSo , the new linked list will be [1,2,3,5]\\n\\nNote that the above approach is provided by Striver on Youtube I highly recommend to checkout  his video solutions.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode removeNthFromEnd(ListNode head, int n) {\\n       ListNode start = new ListNode();\\n        start.next = head;\\n        ListNode fast = start;\\n        ListNode slow = start;     \\n\\n        for(int i = 1; i <= n; ++i)\\n            fast = fast.next;\\n    \\n        while(fast.next != null)\\n        {\\n            fast = fast.next;\\n            slow = slow.next;\\n        }\\n        \\n        slow.next = slow.next.next;\\n        \\n        return start.next;\\n    }\\n}\\n```\\n\\n",
        "level": "medium"
    },
    {
        "slug": "path-sum-ii",
        "description": "Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.\nA root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.",
        "examples": [
            "Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\nOutput: [[5,4,11,2],[5,8,4,5]]\nExplanation: There are two paths whose sum equals targetSum:\n5 + 4 + 11 + 2 = 22\n5 + 8 + 4 + 5 = 22",
            "Input: root = [1,2,3], targetSum = 5\nOutput: []",
            "Input: root = [1,2], targetSum = 0\nOutput: []"
        ],
        "constrains": "The number of nodes in the tree is in the range [0, 5000].\n-1000 <= Node.val <= 1000\n-1000 <= targetSum <= 1000",
        "release_time": 1678803647,
        "oracle_code": "class Solution {\n     List<List<Integer>> al = new ArrayList<>();\n    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {\n       \n        helper( new ArrayList<>(), root, targetSum);\n        return al;\n    }\n    void helper(List<Integer> li, TreeNode root, int targetSum)\n    {\n        if(root == null)\n        return;\n        li.add(root.val);\n        if(root.left == null && root.right == null)\n        {\n            int sum = 0;\n            for(int i: li)\n            sum+= i;\n            if(sum == targetSum)\n            al.add(li);\n        }\n        helper(new ArrayList<>(li), root.left, targetSum);\n        helper(new ArrayList<>(li), root.right, targetSum);\n    }\n}",
        "content": "\\n\\n# Code\\n```\\n\\nclass Solution {\\n     List<List<Integer>> al = new ArrayList<>();\\n    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {\\n       \\n        helper( new ArrayList<>(), root, targetSum);\\n        return al;\\n    }\\n    void helper(List<Integer> li, TreeNode root, int targetSum)\\n    {\\n        if(root == null)\\n        return;\\n        li.add(root.val);\\n        if(root.left == null && root.right == null)\\n        {\\n            int sum = 0;\\n            for(int i: li)\\n            sum+= i;\\n            if(sum == targetSum)\\n            al.add(li);\\n        }\\n        helper(new ArrayList<>(li), root.left, targetSum);\\n        helper(new ArrayList<>(li), root.right, targetSum);\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "hamming-distance",
        "description": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\nGiven two integers x and y, return the Hamming distance between them.",
        "examples": [
            "Input: x = 1, y = 4\nOutput: 2\nExplanation:\n1   (0 0 0 1)\n4   (0 1 0 0)\n       \u2191   \u2191\nThe above arrows point to positions where the corresponding bits are different.",
            "Input: x = 3, y = 1\nOutput: 1"
        ],
        "constrains": "0 <=\u00a0x, y <= 231 - 1",
        "release_time": 1676104831,
        "oracle_code": "import java.math.BigInteger;\nclass Solution {\n    public int hammingDistance(int x, int y) {\n        String x_bin = Integer.toBinaryString(x);\n        String y_bin = Integer.toBinaryString(y);\n\n        int max_len = x_bin.length()>y_bin.length()?x_bin.length():y_bin.length();\n        String max_str = x_bin.length()>y_bin.length()?x_bin: y_bin;\n        String min_str = x_bin.length()>y_bin.length()?y_bin: x_bin;\n\n        int result = 0;\n        BigInteger min_bi;\n        min_bi  = new BigInteger(min_str);\n        System.out.println(\"min_bi = \"+ min_bi);\n        String min_format_str = String.format(\"%0\"+max_len+\"d\", min_bi);\n        for(int i=0; i<max_len; i++){\n            if(max_str.charAt(i)!=min_format_str.charAt(i))\n            {\n                result+=1;\n            }\n        }\n        System.out.println(max_str);\n        System.out.println(min_format_str);\n\n        return result;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe crux of the problem:\\n1. Convert both numbers to Binary strings\\n2. Find the strings with maximum len and the one with min length.\\n3. Add leading zeros to the min length string so the lengths of either strings match.\\n4. Compare the chars of either string, if they don\\'t match increment result by 1.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nOrdinary solution using loop and appropriate data types.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(length of maximum string)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(Two strings with as many characters in the longest string)\\n\\n# Code\\n```\\nimport java.math.BigInteger;\\nclass Solution {\\n    public int hammingDistance(int x, int y) {\\n        String x_bin = Integer.toBinaryString(x);\\n        String y_bin = Integer.toBinaryString(y);\\n\\n        int max_len = x_bin.length()>y_bin.length()?x_bin.length():y_bin.length();\\n        String max_str = x_bin.length()>y_bin.length()?x_bin: y_bin;\\n        String min_str = x_bin.length()>y_bin.length()?y_bin: x_bin;\\n\\n        int result = 0;\\n        BigInteger min_bi;\\n        min_bi  = new BigInteger(min_str);\\n        System.out.println(\"min_bi = \"+ min_bi);\\n        String min_format_str = String.format(\"%0\"+max_len+\"d\", min_bi);\\n        for(int i=0; i<max_len; i++){\\n            if(max_str.charAt(i)!=min_format_str.charAt(i))\\n            {\\n                result+=1;\\n            }\\n        }\\n        System.out.println(max_str);\\n        System.out.println(min_format_str);\\n\\n        return result;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "number-of-provinces",
        "description": "There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.\nA province is a group of directly or indirectly connected cities and no other cities outside of the group.\nYou are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.\nReturn the total number of provinces.",
        "examples": [
            "Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]\nOutput: 2",
            "Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]\nOutput: 3"
        ],
        "constrains": "1 <= n <= 200\nn == isConnected.length\nn == isConnected[i].length\nisConnected[i][j] is 1 or 0.\nisConnected[i][i] == 1\nisConnected[i][j] == isConnected[j][i]",
        "release_time": 1685857349,
        "oracle_code": "class DSU:\n    def __init__(self, n):\n        self.par = list(range(n))\n        self.rank = [1] * n\n        self.size = 1\n    def find(self, u):\n        if u != self.par[u]:\n            self.par[u] = self.find(self.par[u])\n        return self.par[u]\n    def union(self, u, v):\n        uu, vv = self.find(u), self.find(v)\n        if uu == vv:\n            return False\n        if self.rank[uu] > self.rank[vv]:\n            self.par[vv] = uu\n        elif self.rank[vv] > self.rank[uu]:\n            self.par[uu] = vv\n        else:\n            self.par[uu] = vv\n            self.rank[vv] += 1\n        self.size += 1\n        return True\n\nclass Solution:\n    def isConnected(self, u, v, G):\n        return G[u][v] == 1\n\n    def findCircleNum(self, G: List[List[int]]) -> int:\n        n = len(G)\n        uf = DSU(n)\n        if not G:\n            return 0\n        for u in range(n):\n            for v in range(u, n):\n                if self.isConnected(u, v, G):\n                    uf.union(u, v)\n        return len(set([uf.find(i) for i in range(n)]))",
        "content": "\\n# Code\\n```\\nclass DSU:\\n    def __init__(self, n):\\n        self.par = list(range(n))\\n        self.rank = [1] * n\\n        self.size = 1\\n    def find(self, u):\\n        if u != self.par[u]:\\n            self.par[u] = self.find(self.par[u])\\n        return self.par[u]\\n    def union(self, u, v):\\n        uu, vv = self.find(u), self.find(v)\\n        if uu == vv:\\n            return False\\n        if self.rank[uu] > self.rank[vv]:\\n            self.par[vv] = uu\\n        elif self.rank[vv] > self.rank[uu]:\\n            self.par[uu] = vv\\n        else:\\n            self.par[uu] = vv\\n            self.rank[vv] += 1\\n        self.size += 1\\n        return True\\n\\nclass Solution:\\n    def isConnected(self, u, v, G):\\n        return G[u][v] == 1\\n\\n    def findCircleNum(self, G: List[List[int]]) -> int:\\n        n = len(G)\\n        uf = DSU(n)\\n        if not G:\\n            return 0\\n        for u in range(n):\\n            for v in range(u, n):\\n                if self.isConnected(u, v, G):\\n                    uf.union(u, v)\\n        return len(set([uf.find(i) for i in range(n)]))\\n\\n```",
        "level": "medium"
    },
    {
        "slug": "set-matrix-zeroes",
        "description": "Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\nYou must do it in place.",
        "examples": [
            "Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: [[1,0,1],[0,0,0],[1,0,1]]",
            "Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\nOutput: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]"
        ],
        "constrains": "m == matrix.length\nn == matrix[0].length\n1 <= m, n <= 200\n-231 <= matrix[i][j] <= 231 - 1",
        "release_time": 1691675103,
        "oracle_code": "class Solution {\n    public void setZeroes(int[][] A) \n    {\n       \n       int row=A.length;\n        int col=A[0].length;\n        int x=1,y=1;\n        for(int i=0;i<col;i++){\n            if(A[0][i]==0){\n                x=0;\n               break;}\n        } \n        for(int i=0;i<row;i++){\n            if(A[i][0]==0){\n                y=0;\n               break;}\n        } \n        //label the top row and column with 0 if there are any 0s\n        for(int i=1;i<row;i++)\n            for(int j=1;j<col;j++)\n            {\n                if(A[i][j]==0)\n                {\n                    A[i][0]=0;\n                    A[0][j]=0;\n                }\n            }\n        \n       for(int j=1;j<col;j++)\n        {\n           if(A[0][j]==0)\n           {\n               for(int i=1;i<row;i++)\n                   A[i][j]=0;\n           }\n        }\n        \n        for(int i=1;i<row;i++)\n        {\n            if(A[i][0]==0)\n            {\n                for(int j=0;j<col;j++)\n                    A[i][j]=0;\n            }\n        }\n        if(x==0)\n        for(int i=0;i<col;i++)\n            A[0][i]=0;\n               \n        if(y==0)\n        for(int i=0;i<row;i++)\n            A[i][0]=0;\n\n        System.gc();\n        //return A;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public void setZeroes(int[][] A) \\n    {\\n       \\n       int row=A.length;\\n        int col=A[0].length;\\n        int x=1,y=1;\\n        for(int i=0;i<col;i++){\\n            if(A[0][i]==0){\\n                x=0;\\n               break;}\\n        } \\n        for(int i=0;i<row;i++){\\n            if(A[i][0]==0){\\n                y=0;\\n               break;}\\n        } \\n        //label the top row and column with 0 if there are any 0s\\n        for(int i=1;i<row;i++)\\n            for(int j=1;j<col;j++)\\n            {\\n                if(A[i][j]==0)\\n                {\\n                    A[i][0]=0;\\n                    A[0][j]=0;\\n                }\\n            }\\n        \\n       for(int j=1;j<col;j++)\\n        {\\n           if(A[0][j]==0)\\n           {\\n               for(int i=1;i<row;i++)\\n                   A[i][j]=0;\\n           }\\n        }\\n        \\n        for(int i=1;i<row;i++)\\n        {\\n            if(A[i][0]==0)\\n            {\\n                for(int j=0;j<col;j++)\\n                    A[i][j]=0;\\n            }\\n        }\\n        if(x==0)\\n        for(int i=0;i<col;i++)\\n            A[0][i]=0;\\n               \\n        if(y==0)\\n        for(int i=0;i<row;i++)\\n            A[i][0]=0;\\n\\n        System.gc();\\n        //return A;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "find-words-that-can-be-formed-by-characters",
        "description": "You are given an array of strings words and a string chars.\nA string is good if it can be formed by characters from chars (each character can only be used once).\nReturn the sum of lengths of all good strings in words.",
        "examples": [
            "Input: words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\"\nOutput: 6\nExplanation: The strings that can be formed are \"cat\" and \"hat\" so the answer is 3 + 3 = 6.",
            "Input: words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\"\nOutput: 10\nExplanation: The strings that can be formed are \"hello\" and \"world\" so the answer is 5 + 5 = 10."
        ],
        "constrains": "1 <= words.length <= 1000\n1 <= words[i].length, chars.length <= 100\nwords[i] and chars consist of lowercase English letters.",
        "release_time": 1674641372,
        "oracle_code": "class Solution {\n    public int[] char_map;\n    public int countCharacters(String[] words, String chars) {\n        char_map=new int[26];\n       int ans=0;\n       for(char c : chars.toCharArray()){\n           char_map[c-'a']++;\n       }\n\n       for(String word: words){\n           int[] dummyArray = Arrays.copyOf(char_map, char_map.length);\n           int count =0;\n           for(char c: word.toCharArray()){\n               if(dummyArray[c-'a']>0){\n                   count++;\n                   dummyArray[c-'a']--;\n               }\n           }\n           if(count==word.length()){\n               ans+=word.length();\n           }\n       }\n       return ans;\n    }\n}",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] char_map;\\n    public int countCharacters(String[] words, String chars) {\\n        char_map=new int[26];\\n       int ans=0;\\n       for(char c : chars.toCharArray()){\\n           char_map[c-\\'a\\']++;\\n       }\\n\\n       for(String word: words){\\n           int[] dummyArray = Arrays.copyOf(char_map, char_map.length);\\n           int count =0;\\n           for(char c: word.toCharArray()){\\n               if(dummyArray[c-\\'a\\']>0){\\n                   count++;\\n                   dummyArray[c-\\'a\\']--;\\n               }\\n           }\\n           if(count==word.length()){\\n               ans+=word.length();\\n           }\\n       }\\n       return ans;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "maximize-number-of-subsequences-in-a-string",
        "description": "You are given a 0-indexed string text and another 0-indexed string pattern of length 2, both of which consist of only lowercase English letters.\nYou can add either pattern[0] or pattern[1] anywhere in text exactly once. Note that the character can be added even at the beginning or at the end of text.\nReturn the maximum number of times pattern can occur as a subsequence of the modified text.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.",
        "examples": [
            "Input: text = \"abdcdbc\", pattern = \"ac\"\nOutput: 4\nExplanation:\nIf we add pattern[0] = 'a' in between text[1] and text[2], we get \"abadcdbc\". Now, the number of times \"ac\" occurs as a subsequence is 4.\nSome other strings which have 4 subsequences \"ac\" after adding a character to text are \"aabdcdbc\" and \"abdacdbc\".\nHowever, strings such as \"abdcadbc\", \"abdccdbc\", and \"abdcdbcc\", although obtainable, have only 3 subsequences \"ac\" and are thus suboptimal.\nIt can be shown that it is not possible to get more than 4 subsequences \"ac\" by adding only one character.",
            "Input: text = \"aabb\", pattern = \"ab\"\nOutput: 6\nExplanation:\nSome of the strings which can be obtained from text and have 6 subsequences \"ab\" are \"aaabb\", \"aaabb\", and \"aabbb\"."
        ],
        "constrains": "1 <= text.length <= 105\npattern.length == 2\ntext and pattern consist only of lowercase English letters.",
        "release_time": 1647705692,
        "oracle_code": "class Solution {\n\n    public long maximumSubsequenceCount(String s, String p) {\n        long ans = 0, max = 0;\n        int cnt = 1;\n        //Assume adding 0th character of pattern at starting\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == p.charAt(1)) ans += cnt;\n            if (s.charAt(i) == p.charAt(0)) cnt++;\n        }\n        max = Math.max(max, ans);\n        ans = 0; cnt = 1;\n        //Assume adding second character of pattern at end\n        for (int i = s.length() - 1; i >= 0; i--) {\n            if (s.charAt(i) == p.charAt(0)) ans += cnt;\n            if (s.charAt(i) == p.charAt(1)) cnt++;\n        }\n        max = Math.max(max, ans);\n        return max;\n    }\n}",
        "content": "```\\nclass Solution {\\n\\n    public long maximumSubsequenceCount(String s, String p) {\\n        long ans = 0, max = 0;\\n        int cnt = 1;\\n        //Assume adding 0th character of pattern at starting\\n        for (int i = 0; i < s.length(); i++) {\\n            if (s.charAt(i) == p.charAt(1)) ans += cnt;\\n            if (s.charAt(i) == p.charAt(0)) cnt++;\\n        }\\n        max = Math.max(max, ans);\\n        ans = 0; cnt = 1;\\n        //Assume adding second character of pattern at end\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == p.charAt(0)) ans += cnt;\\n            if (s.charAt(i) == p.charAt(1)) cnt++;\\n        }\\n        max = Math.max(max, ans);\\n        return max;\\n    }\\n}\\n```\\n",
        "level": "medium"
    },
    {
        "slug": "subrectangle-queries",
        "description": "Implement the class SubrectangleQueries\u00a0which receives a rows x cols rectangle as a matrix of integers in the constructor and supports two methods:\n1.\u00a0updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)\n\nUpdates all values with newValue in the subrectangle whose upper left coordinate is (row1,col1) and bottom right coordinate is (row2,col2).\n\n2.\u00a0getValue(int row, int col)\n\nReturns the current value of the coordinate (row,col) from\u00a0the rectangle.",
        "examples": [
            "Input\n[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\"]\n[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]\nOutput\n[null,1,null,5,5,null,10,5]\nExplanation\nSubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);  \n// The initial rectangle (4x3) looks like:\n// 1 2 1\n// 4 3 4\n// 3 2 1\n// 1 1 1\nsubrectangleQueries.getValue(0, 2); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);\n// After this update the rectangle looks like:\n// 5 5 5\n// 5 5 5\n// 5 5 5\n// 5 5 5 \nsubrectangleQueries.getValue(0, 2); // return 5\nsubrectangleQueries.getValue(3, 1); // return 5\nsubrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);\n// After this update the rectangle looks like:\n// 5   5   5\n// 5   5   5\n// 5   5   5\n// 10  10  10 \nsubrectangleQueries.getValue(3, 1); // return 10\nsubrectangleQueries.getValue(0, 2); // return 5",
            "Input\n[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\"]\n[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]\nOutput\n[null,1,null,100,100,null,20]\nExplanation\nSubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);\nsubrectangleQueries.getValue(0, 0); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);\nsubrectangleQueries.getValue(0, 0); // return 100\nsubrectangleQueries.getValue(2, 2); // return 100\nsubrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20);\nsubrectangleQueries.getValue(2, 2); // return 20"
        ],
        "constrains": "There will be at most 500\u00a0operations considering both methods:\u00a0updateSubrectangle and getValue.\n1 <= rows, cols <= 100\nrows ==\u00a0rectangle.length\ncols == rectangle[i].length\n0 <= row1 <= row2 < rows\n0 <= col1 <= col2 < cols\n1 <= newValue, rectangle[i][j] <= 10^9\n0 <= row < rows\n0 <= col < cols",
        "release_time": 1691178896,
        "oracle_code": "class SubrectangleQueries {\n    int[][] ans;\n    public SubrectangleQueries(int[][] rectangle) {\n        ans = rectangle;\n    }\n    \n    public void updateSubrectangle(int row1, int col1, int row2, int col2, int newValue) {\n        for(int i=row1; i<=row2; i++){\n            for(int j=col1; j<=col2; j++){\n                ans[i][j] = newValue;\n            }\n        }\n    }\n    \n    public int getValue(int row, int col) {\n        int val = ans[row][col];\n        return val;\n    }\n}\n\n/**\n * Your SubrectangleQueries object will be instantiated and called as such:\n * SubrectangleQueries obj = new SubrectangleQueries(rectangle);\n * obj.updateSubrectangle(row1,col1,row2,col2,newValue);\n * int param_2 = obj.getValue(row,col);\n */",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. The constructor initializes a 2D array \\'ans\\' to store the rectangle.\\n2. The \\'updateSubrectangle\\' function updates the subrectangle with the given \\'newValue\\' by iterating over the specified range and updating each element.\\n3. The \\'getValue\\' function retrieves the value at the specified row and column in \\'ans\\'.\\n\\n# Complexity\\n- Time complexity: O((row2 - row1 + 1) * (col2 - col1 + 1))\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass SubrectangleQueries {\\n    int[][] ans;\\n    public SubrectangleQueries(int[][] rectangle) {\\n        ans = rectangle;\\n    }\\n    \\n    public void updateSubrectangle(int row1, int col1, int row2, int col2, int newValue) {\\n        for(int i=row1; i<=row2; i++){\\n            for(int j=col1; j<=col2; j++){\\n                ans[i][j] = newValue;\\n            }\\n        }\\n    }\\n    \\n    public int getValue(int row, int col) {\\n        int val = ans[row][col];\\n        return val;\\n    }\\n}\\n\\n/**\\n * Your SubrectangleQueries object will be instantiated and called as such:\\n * SubrectangleQueries obj = new SubrectangleQueries(rectangle);\\n * obj.updateSubrectangle(row1,col1,row2,col2,newValue);\\n * int param_2 = obj.getValue(row,col);\\n */\\n```",
        "level": "medium"
    },
    {
        "slug": "make-array-empty",
        "description": "You are given an integer array nums containing distinct numbers, and you can perform the following operations until the array is empty:\n\nIf the first element has the smallest value, remove it\nOtherwise, put the first element at the end of the array.\n\nReturn an integer denoting the number of operations it takes to make nums empty.",
        "examples": [
            "Input: nums = [3,4,-1]\nOutput: 5\n\n\n\n\nOperation\nArray\n\n\n\n\n1\n[4, -1, 3]\n\n\n2\n[-1, 3, 4]\n\n\n3\n[3, 4]\n\n\n4\n[4]\n\n\n5\n[]",
            "Input: nums = [1,2,4,3]\nOutput: 5\n\n\n\n\nOperation\nArray\n\n\n\n\n1\n[2, 4, 3]\n\n\n2\n[4, 3]\n\n\n3\n[3, 4]\n\n\n4\n[4]\n\n\n5\n[]",
            "Input: nums = [1,2,3]\nOutput: 3\n\n\n\n\nOperation\nArray\n\n\n\n\n1\n[2, 3]\n\n\n2\n[3]\n\n\n3\n[]"
        ],
        "constrains": "1 <= nums.length <= 105\n-109\u00a0<= nums[i] <= 109\nAll values in nums are distinct.",
        "release_time": 1682789530,
        "oracle_code": "class Solution {\n    public long countOperationsToEmptyArray(int[] a) {\n        HashMap<Integer, Integer> pos = new HashMap<>();\n        long n = a.length, res = n;\n        for (int i = 0; i < n; i++)\n            pos.put(a[i], i);\n        Arrays.sort(a);\n        for (int i = 1; i < n; i++)\n            if (pos.get(a[i]) < pos.get(a[i - 1]))\n                res += n - i;\n        return res;\n    }\n}",
        "content": "# Intuition\\nThe intuition behind the algorithm is that, initially, there are n elements in the array, and at least n operations are required to transform the array to a non-decreasing order. To perform a rotation, n operations are required to move all the elements once.\\n\\nTo implement the algorithm, we first set the result variable to n, which represents the minimum number of operations required to make the array non-decreasing. We then record the positions of all the elements in the array using a dictionary, where pos[A[i]] = i.\\n\\nNext, we iterate through the array from smallest to largest element. If the position of an element decreases compared to the previous element, we know that we need to rotate the remaining elements to the beginning of the array. This brings us back to the original intuition that we need n operations to rotate all the elements once. In this case, we increment the result variable by the number of remaining elements.\\n\\n# Code\\n```\\nclass Solution {\\n    public long countOperationsToEmptyArray(int[] a) {\\n        HashMap<Integer, Integer> pos = new HashMap<>();\\n        long n = a.length, res = n;\\n        for (int i = 0; i < n; i++)\\n            pos.put(a[i], i);\\n        Arrays.sort(a);\\n        for (int i = 1; i < n; i++)\\n            if (pos.get(a[i]) < pos.get(a[i - 1]))\\n                res += n - i;\\n        return res;\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "sum-in-a-matrix",
        "description": "You are given a 0-indexed 2D integer array nums. Initially, your score is 0. Perform the following operations until the matrix becomes empty:\n\nFrom each row in the matrix, select the largest number and remove it. In the case of a tie, it does not matter which number is chosen.\nIdentify the highest number amongst all those removed in step 1. Add that number to your score.\n\nReturn the final score.",
        "examples": [
            "Input: nums = [[7,2,1],[6,4,2],[6,5,3],[3,2,1]]\nOutput: 15\nExplanation: In the first operation, we remove 7, 6, 6, and 3. We then add 7 to our score. Next, we remove 2, 4, 5, and 2. We add 5 to our score. Lastly, we remove 1, 2, 3, and 1. We add 3 to our score. Thus, our final score is 7 + 5 + 3 = 15.",
            "Input: nums = [[1]]\nOutput: 1\nExplanation: We remove 1 and add it to the answer. We return 1."
        ],
        "constrains": "1 <= nums.length <= 300\n1 <= nums[i].length <= 500\n0 <= nums[i][j] <= 103",
        "release_time": 1683993959,
        "oracle_code": "class Solution {\n    public int matrixSum(int[][] nums) {\n        int score = 0;\n        int n = nums.length;\n        int m = nums[0].length;\n        for(int[] a :nums)\n        {\n            Arrays.sort(a);\n        }\n        for(int i=0;i<m;i++)\n        {\n            int max = 0;\n            for(int j=0;j<n;j++)\n            {\n                max = Math.max(max,nums[j][i]);\n            }\n            score+=max;\n        }\n        return score;\n    }\n}",
        "content": "# Intuition\\n**First sort the array rowwise then add maximum for each column.**\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int matrixSum(int[][] nums) {\\n        int score = 0;\\n        int n = nums.length;\\n        int m = nums[0].length;\\n        for(int[] a :nums)\\n        {\\n            Arrays.sort(a);\\n        }\\n        for(int i=0;i<m;i++)\\n        {\\n            int max = 0;\\n            for(int j=0;j<n;j++)\\n            {\\n                max = Math.max(max,nums[j][i]);\\n            }\\n            score+=max;\\n        }\\n        return score;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "apply-discount-every-n-orders",
        "description": "There is a supermarket that is frequented by many customers. The products sold at the supermarket are represented as two parallel integer arrays products and prices, where the ith product has an ID of products[i] and a price of prices[i].\nWhen a customer is paying, their bill is represented as two parallel integer arrays product and amount, where the jth product they purchased has an ID of product[j], and amount[j] is how much of the product they bought. Their subtotal is calculated as the sum of each amount[j] * (price of the jth product).\nThe supermarket decided to have a sale. Every nth customer paying for their groceries will be given a percentage discount. The discount amount is given by discount, where they will be given discount percent off their subtotal. More formally, if their subtotal is bill, then they would actually pay bill * ((100 - discount) / 100).\nImplement the Cashier class:\n\nCashier(int n, int discount, int[] products, int[] prices) Initializes the object with n, the discount, and the products and their prices.\ndouble getBill(int[] product, int[] amount) Returns the final total of the bill with the discount applied (if any). Answers within 10-5 of the actual value will be accepted.",
        "examples": [
            "Input\n[\"Cashier\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\"]\n[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]\nOutput\n[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]\nExplanation\nCashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);\ncashier.getBill([1,2],[1,2]);                        // return 500.0. 1st customer, no discount.\n                                                     // bill = 1 * 100 + 2 * 200 = 500.\ncashier.getBill([3,7],[10,10]);                      // return 4000.0. 2nd customer, no discount.\n                                                     // bill = 10 * 300 + 10 * 100 = 4000.\ncashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);    // return 800.0. 3rd customer, 50% discount.\n                                                     // Original bill = 1600\n                                                     // Actual bill = 1600 * ((100 - 50) / 100) = 800.\ncashier.getBill([4],[10]);                           // return 4000.0. 4th customer, no discount.\ncashier.getBill([7,3],[10,10]);                      // return 4000.0. 5th customer, no discount.\ncashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0. 6th customer, 50% discount.\n                                                     // Original bill = 14700, but with\n                                                     // Actual bill = 14700 * ((100 - 50) / 100) = 7350.\ncashier.getBill([2,3,5],[5,3,2]);                    // return 2500.0.  7th customer, no discount."
        ],
        "constrains": "1 <= n <= 104\n0 <= discount <= 100\n1 <= products.length <= 200\nprices.length == products.length\n1 <= products[i] <= 200\n1 <= prices[i] <= 1000\nThe elements in products are unique.\n1 <= product.length <= products.length\namount.length == product.length\nproduct[j] exists in products.\n1 <= amount[j] <= 1000\nThe elements of product are unique.\nAt most 1000 calls will be made to getBill.\nAnswers within 10-5 of the actual value will be accepted.",
        "release_time": 1672208305,
        "oracle_code": "class Cashier {\n    HashMap<Integer,Integer>stock=new HashMap<>();\n    int n;\n    int discount;\n    int itr=0;\n    public Cashier(int n, int discount, int[] products, int[] prices) {\n        for(int i=0;i<products.length;i++){\n            stock.put(products[i],prices[i]);\n        }\n        this.n=n;\n        this.discount=discount;\n    }\n    \n    public double getBill(int[] product, int[] amount) {\n        double total=0;\n        for(int i=0;i<product.length;i++){\n            total+=(double)(amount[i]*stock.get(product[i]));\n        }\n        itr++;\n        if(itr==n){\n            total*=(double)(((100-discount)/100d));\n            itr=0;\n        }\n        return total;\n    }\n}\n\n/**\n * Your Cashier object will be instantiated and called as such:\n * Cashier obj = new Cashier(n, discount, products, prices);\n * double param_1 = obj.getBill(product,amount);\n */",
        "content": "# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Cashier {\\n    HashMap<Integer,Integer>stock=new HashMap<>();\\n    int n;\\n    int discount;\\n    int itr=0;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        for(int i=0;i<products.length;i++){\\n            stock.put(products[i],prices[i]);\\n        }\\n        this.n=n;\\n        this.discount=discount;\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double total=0;\\n        for(int i=0;i<product.length;i++){\\n            total+=(double)(amount[i]*stock.get(product[i]));\\n        }\\n        itr++;\\n        if(itr==n){\\n            total*=(double)(((100-discount)/100d));\\n            itr=0;\\n        }\\n        return total;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
        "level": "medium"
    },
    {
        "slug": "binary-search-tree-iterator",
        "description": "Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\n\nBSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\nboolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\nint next() Moves the pointer to the right, then returns the number at the pointer.\n\nNotice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\nYou may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.",
        "examples": [
            "Input\n[\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\nOutput\n[null, 3, 7, true, 9, true, 15, true, 20, false]\n\nExplanation\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next();    // return 3\nbSTIterator.next();    // return 7\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 9\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 15\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 20\nbSTIterator.hasNext(); // return False"
        ],
        "constrains": "The number of nodes in the tree is in the range [1, 105].\n0 <= Node.val <= 106\nAt most 105 calls will be made to hasNext, and next.",
        "release_time": 1678076629,
        "oracle_code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass BSTIterator {\n\n    List<Integer> l;\n    int len;\n    int curr;\n\n    public BSTIterator(TreeNode root) {\n        BST1 B = new BST1();\n        B.inOrder(root);\n        this.l = B.l;\n        len = this.l.size();\n        this.curr = 0;\n\n    }\n\n    public int next() {\n        int data = -1;\n        if (curr < len) {\n            data = l.get(curr);\n            curr++;\n        }\n\n        return data;\n\n    }\n\n    public boolean hasNext() {\n        return curr < len;\n\n    }\n}\n\nclass BST1 {\n\n    List<Integer> l = new ArrayList<>();\n\n    public void inOrder(TreeNode root) {\n        if (root == null) {\n            return;\n        }\n        inOrder(root.left);\n        l.add(root.val);\n        inOrder(root.right);\n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator obj = new BSTIterator(root);\n * int param_1 = obj.next();\n * boolean param_2 = obj.hasNext();\n */",
        "content": "\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass BSTIterator {\\n\\n    List<Integer> l;\\n    int len;\\n    int curr;\\n\\n    public BSTIterator(TreeNode root) {\\n        BST1 B = new BST1();\\n        B.inOrder(root);\\n        this.l = B.l;\\n        len = this.l.size();\\n        this.curr = 0;\\n\\n    }\\n\\n    public int next() {\\n        int data = -1;\\n        if (curr < len) {\\n            data = l.get(curr);\\n            curr++;\\n        }\\n\\n        return data;\\n\\n    }\\n\\n    public boolean hasNext() {\\n        return curr < len;\\n\\n    }\\n}\\n\\nclass BST1 {\\n\\n    List<Integer> l = new ArrayList<>();\\n\\n    public void inOrder(TreeNode root) {\\n        if (root == null) {\\n            return;\\n        }\\n        inOrder(root.left);\\n        l.add(root.val);\\n        inOrder(root.right);\\n    }\\n}\\n\\n/**\\n * Your BSTIterator object will be instantiated and called as such:\\n * BSTIterator obj = new BSTIterator(root);\\n * int param_1 = obj.next();\\n * boolean param_2 = obj.hasNext();\\n */\\n```",
        "level": "medium"
    },
    {
        "slug": "convert-the-temperature",
        "description": "You are given a non-negative floating point number rounded to two decimal places celsius, that denotes the temperature in Celsius.\nYou should convert Celsius into Kelvin and Fahrenheit and return it as an array ans = [kelvin, fahrenheit].\nReturn the array ans. Answers within 10-5 of the actual answer will be accepted.\nNote that:\n\nKelvin = Celsius + 273.15\nFahrenheit = Celsius * 1.80 + 32.00",
        "examples": [
            "Input: celsius = 36.50\nOutput: [309.65000,97.70000]\nExplanation: Temperature at 36.50 Celsius converted in Kelvin is 309.65 and converted in Fahrenheit is 97.70.",
            "Input: celsius = 122.11\nOutput: [395.26000,251.79800]\nExplanation: Temperature at 122.11 Celsius converted in Kelvin is 395.26 and converted in Fahrenheit is 251.798."
        ],
        "constrains": "0 <= celsius <= 1000",
        "release_time": 1668314039,
        "oracle_code": "class Solution {\n    public double[] convertTemperature(double celsius) {\n        double arr[] = new double[2];\n        arr[1] = (celsius * 9.0/5.0) + 32.0;\n        arr[0] = celsius + 273.15;\n        return arr;\n    }\n}",
        "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe program takes a celsius value and converts it to fahrenheit and kelvin.\\n# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public double[] convertTemperature(double celsius) {\\n        double arr[] = new double[2];\\n        arr[1] = (celsius * 9.0/5.0) + 32.0;\\n        arr[0] = celsius + 273.15;\\n        return arr;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "daily-temperatures",
        "description": "Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.",
        "examples": [
            "Input: temperatures = [73,74,75,71,69,72,76,73]\nOutput: [1,1,4,2,1,1,0,0]",
            "Input: temperatures = [30,40,50,60]\nOutput: [1,1,1,0]",
            "Input: temperatures = [30,60,90]\nOutput: [1,1,0]"
        ],
        "constrains": "1 <=\u00a0temperatures.length <= 105\n30 <=\u00a0temperatures[i] <= 100",
        "release_time": 1667472111,
        "oracle_code": "class Solution {\n    public int[] dailyTemperatures(int[] temperatures) {\n        \n        int[] arr = new int[temperatures.length]; \n        \n        ArrayDeque<int[]> st = new ArrayDeque<>(); \n        \n        int i=0, j=temperatures.length-1 ; \n        \n        while( j >= 0){\n            \n            if(st.size()==0){\n                arr[i++] = 0;\n            }\n            else  if (st.size()>0 && st.peek()[0]>temperatures[j])\n            {\n                arr[i++]=1;\n            } \n            else if (st.size()>0 && st.peek()[0]<=temperatures[j])\n            \n            {  while(st.size()>0 && st.peek()[0]<=temperatures[j]){\n                    st.pop();\n                    \n                }\n            if(st.size()==0){\n                arr[i++]=0;\n            }\n            else{\n                arr[i++]=st.peek()[1]-j;\n            }\n            } \n        st.push(new int[]{temperatures[j],j}); \n        j--;\n        }\n        \n      \n        int[] ans = new int[temperatures.length]; int k=0;\n        for(i=arr.length-1; i>=0; i--){\n            ans[k++]=arr[i];\n        }\n        return ans;\n    }\n}",
        "content": "```\\nclass Solution {\\n    public int[] dailyTemperatures(int[] temperatures) {\\n        \\n        int[] arr = new int[temperatures.length]; \\n        \\n        ArrayDeque<int[]> st = new ArrayDeque<>(); \\n        \\n        int i=0, j=temperatures.length-1 ; \\n        \\n        while( j >= 0){\\n            \\n            if(st.size()==0){\\n                arr[i++] = 0;\\n            }\\n            else  if (st.size()>0 && st.peek()[0]>temperatures[j])\\n            {\\n                arr[i++]=1;\\n            } \\n            else if (st.size()>0 && st.peek()[0]<=temperatures[j])\\n            \\n            {  while(st.size()>0 && st.peek()[0]<=temperatures[j]){\\n                    st.pop();\\n                    \\n                }\\n            if(st.size()==0){\\n                arr[i++]=0;\\n            }\\n            else{\\n                arr[i++]=st.peek()[1]-j;\\n            }\\n            } \\n        st.push(new int[]{temperatures[j],j}); \\n        j--;\\n        }\\n        \\n      \\n        int[] ans = new int[temperatures.length]; int k=0;\\n        for(i=arr.length-1; i>=0; i--){\\n            ans[k++]=arr[i];\\n        }\\n        return ans;\\n    }\\n}",
        "level": "medium"
    },
    {
        "slug": "maximum-binary-tree",
        "description": "You are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm:\n\nCreate a root node whose value is the maximum value in nums.\nRecursively build the left subtree on the subarray prefix to the left of the maximum value.\nRecursively build the right subtree on the subarray suffix to the right of the maximum value.\n\nReturn the maximum binary tree built from nums.",
        "examples": [
            "Input: nums = [3,2,1,6,0,5]\nOutput: [6,3,5,null,2,0,null,null,1]\nExplanation: The recursive calls are as follow:\n- The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].\n    - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].\n        - Empty array, so no child.\n        - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].\n            - Empty array, so no child.\n            - Only one element, so child is a node with value 1.\n    - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].\n        - Only one element, so child is a node with value 0.\n        - Empty array, so no child.",
            "Input: nums = [3,2,1]\nOutput: [3,null,2,null,1]"
        ],
        "constrains": "1 <= nums.length <= 1000\n0 <= nums[i] <= 1000\nAll integers in nums are unique.",
        "release_time": 1685481921,
        "oracle_code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode constructMaximumBinaryTree(int[] nums) {\n        TreeNode root= construct(nums,0,nums.length-1);\n        return root;\n    }\n    private static TreeNode construct(int arr[], int s, int e){\n        if(s>e)return null;\n        if(s==e) return new TreeNode(arr[s]);\n\n        int idx=findMax(arr,s,e);\n        TreeNode root=new TreeNode(arr[idx]);\n        root.left=construct(arr,s,idx-1);\n        root.right=construct(arr,idx+1,e);\n\n        return root;\n    }\n\n    private static int findMax(int arr[], int s, int e){\n        int max=Integer.MIN_VALUE;\n        int idx=-1;\n        for(int i=s;i<=e; i++)\n        {\n            if(arr[i]>max){\n                max=arr[i];\n                idx=i;\n            }\n        }\n         return idx;\n    }\n\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe code implements a solution to construct a maximum binary tree from an input array nums. The maximum binary tree is a binary tree where the root node has the maximum value in the array, and the left and right subtrees of the root are recursively constructed maximum binary trees from the elements to the left and right of the maximum value.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe code uses a recursive approach to construct the maximum binary tree. It defines two helper functions: constructMaximumBinaryTree and construct.\\n\\n1. constructMaximumBinaryTree function:\\n\\nThis is the main entry point of the code.\\nIt takes the input array nums as a parameter and returns the root of the constructed maximum binary tree.\\nInside this function, it calls the construct function, passing the nums array and the range from 0 to nums.length - 1.\\n2. construct function:\\n\\nThis function takes three parameters: the input array arr, the start index s, and the end index e of the current range.\\nIt constructs the maximum binary tree for the current range of elements in the array.\\nIt first checks if s is greater than e. If so, it means there are no elements in the current range, so it returns null.\\nIf s is equal to e, it means there is only one element in the current range. In this case, it creates a new TreeNode with the value of arr[s] and returns it.\\nIf there are more than one element in the current range, it finds the index of the maximum element using the findMax helper function.\\nIt creates a new TreeNode with the maximum value (arr[idx]) as the root.\\nIt recursively calls the construct function for the left subarray (from s to idx - 1) and assigns the returned value as the left child of the root.\\nIt recursively calls the construct function for the right subarray (from idx + 1 to e) and assigns the returned value as the right child of the root.\\nFinally, it returns the constructed root node of the maximum binary tree for the current range.\\n3. findMax function:\\n\\nThis helper function takes three parameters: the input array arr, the start index s, and the end index e of the current range.\\nIt iterates through the elements in the current range and finds the index of the maximum element.\\nIt initializes a variable max with the minimum integer value and idx with -1.\\nIt compares each element in the range with the current maximum value (max) and updates max and idx if a greater value is found.\\nFinally, it returns the index of the maximum element.\\nThe code uses recursion to divide the array into smaller subarrays and construct the maximum binary tree recursively. It constructs the root node based on the maximum value in the current range, assigns the left and right subtrees recursively, and returns the root node.\\n\\n# Complexity\\n- Time complexity: O(n^2) in worst case and O(n) in avg case.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe constructMaximumBinaryTree function calls the construct function, which performs a recursive construction of the maximum binary tree. The construct function divides the array into smaller subarrays and constructs the tree.\\nIn the worst case, each element in the array needs to be compared with every other element to find the maximum. This results in a time complexity of O(n^2), where n is the length of the nums array.\\nHowever, in the average case, the maximum element can be found in O(n) time. Therefore, the average time complexity of the construct function is O(n).\\nThe construct function is called recursively for each subarray, resulting in a total time complexity of O(n^2) in the worst case and O(n) in the average case.\\n\\n- Space complexity:  O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\nThe space complexity is determined by the recursive calls and the stack space required for each call.\\nIn the worst case, when the construct function is called recursively for each subarray, the maximum stack depth is equal to the height of the binary tree. In the worst case, the height of the binary tree can be equal to n, resulting in a space complexity of O(n).\\nAdditionally, the construct function creates new TreeNode objects during the construction process. The number of TreeNode objects created is proportional to the number of elements in the nums array. Therefore, the space complexity for the TreeNode objects is also O(n).\\nOverall, the space complexity is O(n) due to the stack space and the space required for the TreeNode objects.\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode constructMaximumBinaryTree(int[] nums) {\\n        TreeNode root= construct(nums,0,nums.length-1);\\n        return root;\\n    }\\n    private static TreeNode construct(int arr[], int s, int e){\\n        if(s>e)return null;\\n        if(s==e) return new TreeNode(arr[s]);\\n\\n        int idx=findMax(arr,s,e);\\n        TreeNode root=new TreeNode(arr[idx]);\\n        root.left=construct(arr,s,idx-1);\\n        root.right=construct(arr,idx+1,e);\\n\\n        return root;\\n    }\\n\\n    private static int findMax(int arr[], int s, int e){\\n        int max=Integer.MIN_VALUE;\\n        int idx=-1;\\n        for(int i=s;i<=e; i++)\\n        {\\n            if(arr[i]>max){\\n                max=arr[i];\\n                idx=i;\\n            }\\n        }\\n         return idx;\\n    }\\n\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "merge-two-2d-arrays-by-summing-values",
        "description": "You are given two 2D integer arrays nums1 and nums2.\n\nnums1[i] = [idi, vali]\u00a0indicate that the number with the id idi has a value equal to vali.\nnums2[i] = [idi, vali]\u00a0indicate that the number with the id idi has a value equal to vali.\n\nEach array contains unique ids and is sorted in ascending order by id.\nMerge the two arrays into one array that is sorted in ascending order by id, respecting the following conditions:\n\nOnly ids that appear in at least one of the two arrays should be included in the resulting array.\nEach id should be included only once and its value should be the sum of the values of this id in the two arrays. If the id does not exist in one of the two arrays then its value in that array is considered to be 0.\n\nReturn the resulting array. The returned array must be sorted in ascending order by id.",
        "examples": [
            "Input: nums1 = [[1,2],[2,3],[4,5]], nums2 = [[1,4],[3,2],[4,1]]\nOutput: [[1,6],[2,3],[3,2],[4,6]]\nExplanation: The resulting array contains the following:\n- id = 1, the value of this id is 2 + 4 = 6.\n- id = 2, the value of this id is 3.\n- id = 3, the value of this id is 2.\n- id = 4, the value of this id is 5 + 1 = 6.",
            "Input: nums1 = [[2,4],[3,6],[5,5]], nums2 = [[1,3],[4,3]]\nOutput: [[1,3],[2,4],[3,6],[4,3],[5,5]]\nExplanation: There are no common ids, so we just include each id with its value in the resulting list."
        ],
        "constrains": "1 <= nums1.length, nums2.length <= 200\nnums1[i].length == nums2[j].length == 2\n1 <= idi, vali <= 1000\nBoth arrays contain unique ids.\nBoth arrays are in\u00a0strictly ascending order by id.",
        "release_time": 1677788157,
        "oracle_code": "class Solution {\n    public int[][] mergeArrays(int[][] nums1, int[][] nums2) {\n        \n        Map<Integer, Integer> map = new TreeMap<>();\n        int l1 = nums1.length;\n        int l2 = nums2.length;\n\n        for (int i = 0; i < l1; i++) {\n            if (!map.containsKey(nums1[i][0])) {\n                map.put(nums1[i][0], nums1[i][1]);\n            }\n            else {\n                map.put(nums1[i][0], (map.get(nums1[i][0]) + nums1[i][1]));\n            }\n            \n        }\n\n        for (int i = 0; i < l2; i++) {\n            if (!map.containsKey(nums2[i][0])) {\n                map.put(nums2[i][0], nums2[i][1]);\n            }\n            else {\n                map.put(nums2[i][0], (map.get(nums2[i][0]) + nums2[i][1]));\n            }\n            \n        }\n\n        int count = 0;\n        int[][] ans = new int[map.size()][2];\n\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            ans[count][0] = entry.getKey();\n            ans[count][1] = entry.getValue();\n            count++;\n        }\n        \n        return ans;\n    }\n}",
        "content": "# Java\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] mergeArrays(int[][] nums1, int[][] nums2) {\\n        \\n        Map<Integer, Integer> map = new TreeMap<>();\\n        int l1 = nums1.length;\\n        int l2 = nums2.length;\\n\\n        for (int i = 0; i < l1; i++) {\\n            if (!map.containsKey(nums1[i][0])) {\\n                map.put(nums1[i][0], nums1[i][1]);\\n            }\\n            else {\\n                map.put(nums1[i][0], (map.get(nums1[i][0]) + nums1[i][1]));\\n            }\\n            \\n        }\\n\\n        for (int i = 0; i < l2; i++) {\\n            if (!map.containsKey(nums2[i][0])) {\\n                map.put(nums2[i][0], nums2[i][1]);\\n            }\\n            else {\\n                map.put(nums2[i][0], (map.get(nums2[i][0]) + nums2[i][1]));\\n            }\\n            \\n        }\\n\\n        int count = 0;\\n        int[][] ans = new int[map.size()][2];\\n\\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\\n            ans[count][0] = entry.getKey();\\n            ans[count][1] = entry.getValue();\\n            count++;\\n        }\\n        \\n        return ans;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "maximum-value-at-a-given-index-in-a-bounded-array",
        "description": "You are given three positive integers:\u00a0n, index, and maxSum. You want to construct an array nums (0-indexed) that satisfies the following conditions:\n\nnums.length == n\nnums[i] is a positive integer where 0 <= i < n.\nabs(nums[i] - nums[i+1]) <= 1 where 0 <= i < n-1.\nThe sum of all the elements of nums does not exceed maxSum.\nnums[index] is maximized.\n\nReturn nums[index] of the constructed array.\nNote that abs(x) equals x if x >= 0, and -x otherwise.",
        "examples": [
            "Input: n = 4, index = 2,  maxSum = 6\nOutput: 2\nExplanation: nums = [1,2,2,1] is one array that satisfies all the conditions.\nThere are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2].",
            "Input: n = 6, index = 1,  maxSum = 10\nOutput: 3"
        ],
        "constrains": "1 <= n <= maxSum <= 109\n0 <= index < n",
        "release_time": 1686358170,
        "oracle_code": "class Solution {\n    public int maxValue(int n, int index, int maxSum) {\n        int left = 0, right = maxSum - n;\n\n        while (left < right) {\n            int middle = (left + right + 1) / 2;\n            if (isPossible(n, index, maxSum - n, middle))\n                left = middle;\n            else\n                right = middle - 1;\n        }\n        return left + 1;\n    }\n\n    private boolean isPossible(int n, int index, int maxSum, int value) {\n        int leftValue = Math.max(value - index, 0);\n        int rightValue = Math.max(value - ((n - 1) - index), 0);\n\n        long sumBefore = (long) (value + leftValue) * (value - leftValue + 1) / 2;\n        long sumAfter = (long) (value + rightValue) * (value - rightValue + 1) / 2;\n\n        return sumBefore + sumAfter - value <= maxSum;\n    }\n}",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxValue(int n, int index, int maxSum) {\\n        int left = 0, right = maxSum - n;\\n\\n        while (left < right) {\\n            int middle = (left + right + 1) / 2;\\n            if (isPossible(n, index, maxSum - n, middle))\\n                left = middle;\\n            else\\n                right = middle - 1;\\n        }\\n        return left + 1;\\n    }\\n\\n    private boolean isPossible(int n, int index, int maxSum, int value) {\\n        int leftValue = Math.max(value - index, 0);\\n        int rightValue = Math.max(value - ((n - 1) - index), 0);\\n\\n        long sumBefore = (long) (value + leftValue) * (value - leftValue + 1) / 2;\\n        long sumAfter = (long) (value + rightValue) * (value - rightValue + 1) / 2;\\n\\n        return sumBefore + sumAfter - value <= maxSum;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "ways-to-split-array-into-good-subarrays",
        "description": "You are given a binary array nums.\nA subarray of an array is good if it contains exactly one element with the value 1.\nReturn an integer denoting the number of ways to split the array nums into good subarrays. As the number may be too large, return it modulo 109 + 7.\nA subarray is a contiguous non-empty sequence of elements within an array.",
        "examples": [
            "Input: nums = [0,1,0,0,1]\nOutput: 3\nExplanation: There are 3 ways to split nums into good subarrays:\n- [0,1] [0,0,1]\n- [0,1,0] [0,1]\n- [0,1,0,0] [1]",
            "Input: nums = [0,1,0]\nOutput: 1\nExplanation: There is 1 way to split nums into good subarrays:\n- [0,1,0]"
        ],
        "constrains": "1 <= nums.length <= 105\n0 <= nums[i] <= 1",
        "release_time": 1687758678,
        "oracle_code": "class Solution {\n    public int numberOfGoodSubarraySplits(int[] nums) {\n        \n       List<Integer> list = new ArrayList<>();\n        for(int i=0;i<nums.length;i++){\n            if(nums[i]==1) list.add(i);\n        }\n        if(list.size()==0) return 0;\n        if(list.size()==1) return 1;\n        int mod =(int)1e9+7;\n        long res = 1;\n        for(int i=0;i<list.size()-1;i++){\n                long index1 = (long)list.get(i);\n                long index2 = (long)list.get(i+1);\n                res =  ( res%mod * (index2-index1)%mod)%mod;\n                \n            \n        }\n        return (int)res;\n         \n        \n       \n        \n    }\n}",
        "content": "```\\nclass Solution {\\n    public int numberOfGoodSubarraySplits(int[] nums) {\\n        \\n       List<Integer> list = new ArrayList<>();\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==1) list.add(i);\\n        }\\n        if(list.size()==0) return 0;\\n        if(list.size()==1) return 1;\\n        int mod =(int)1e9+7;\\n        long res = 1;\\n        for(int i=0;i<list.size()-1;i++){\\n                long index1 = (long)list.get(i);\\n                long index2 = (long)list.get(i+1);\\n                res =  ( res%mod * (index2-index1)%mod)%mod;\\n                \\n            \\n        }\\n        return (int)res;\\n         \\n        \\n       \\n        \\n    }\\n}",
        "level": "medium"
    },
    {
        "slug": "loud-and-rich",
        "description": "There is a group of n people labeled from 0 to n - 1 where each person has a different amount of money and a different level of quietness.\nYou are given an array richer where richer[i] = [ai, bi] indicates that ai has more money than bi and an integer array quiet where quiet[i] is the quietness of the ith person. All the given data in richer are logically correct (i.e., the data will not lead you to a situation where x is richer than y and y is richer than x at the same time).\nReturn an integer array answer where answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]) among all people who definitely have equal to or more money than the person x.",
        "examples": [
            "Input: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]\nOutput: [5,5,2,5,4,5,6,7]\nExplanation: \nanswer[0] = 5.\nPerson 5 has more money than 3, which has more money than 1, which has more money than 0.\nThe only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0.\nanswer[7] = 7.\nAmong all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7.\nThe other answers can be filled out with similar reasoning.",
            "Input: richer = [], quiet = [0]\nOutput: [0]"
        ],
        "constrains": "n == quiet.length\n1 <= n <= 500\n0 <= quiet[i] < n\nAll the values of quiet are unique.\n0 <= richer.length <= n * (n - 1) / 2\n0 <= ai, bi < n\nai != bi\nAll the pairs of richer are unique.\nThe observations in richer are all logically consistent.",
        "release_time": 1670637012,
        "oracle_code": "class Solution {\n    int ans[];\n    Map<Integer,List<Integer>> map=new HashMap<>();\n    int temp[]=new int[0];\n    int curr_node=0;\n    List<Integer> vis=new ArrayList<Integer>();\n    public int[] loudAndRich(int[][] richer, int[] quiet) {\n        \n        ans=new int[quiet.length];\n        for(int i=0;i<=richer.length;i++){\n            \n            if(!map.containsKey(i)){\n                map.put(i,new ArrayList());\n            }\n            if(i<richer.length && !map.containsKey(richer[i][0])){\n                map.put(richer[i][0],new ArrayList());\n                map.get(richer[i][0]).add(richer[i][1]);\n            }\n            else if(i<richer.length){\n                map.get(richer[i][0]).add(richer[i][1]);\n            }\n        }\n        \n        Comparator<pair> comp=new Comparator<pair>(){\n            public int compare(pair p1,pair p2){\n                if(p1.cost>p2.cost){\n                    return 1;\n                }\n                else{\n                    return -1;\n                }\n\n            }\n        };\n        PriorityQueue<pair> pq=new PriorityQueue<>(comp);\n        for(int i=0;i<quiet.length;i++){\n            ans[i]=-1;\n            pq.add(new pair(i,quiet[i]));\n        }\n        \n        while(!pq.isEmpty()){\n            pair top=pq.poll();\n            //System.out.println(top.node+\" \"+top.cost);\n            curr_node=top.node;\n            if(!vis.contains(top.node)){\n            dfs(top.node);\n            }\n        }\n        return ans;\n       \n    }\n    public void dfs(int node){\n        //System.out.println(node);\n        if(ans[node]==-1){\n            ans[node]=curr_node;\n        }\n        if(!vis.contains(node) && map.containsKey(node)){\n            vis.add(node);\n             \n            for(int i : map.get(node)){\n            dfs(i);\n        \n        }\n        }\n            \n    }\n}\n\nclass pair{\n    int node,cost;\n    pair(int node,int cost){\n        this.node=node;\n        this.cost=cost;\n    }\n}",
        "content": "\\n# Code\\n```\\nclass Solution {\\n    int ans[];\\n    Map<Integer,List<Integer>> map=new HashMap<>();\\n    int temp[]=new int[0];\\n    int curr_node=0;\\n    List<Integer> vis=new ArrayList<Integer>();\\n    public int[] loudAndRich(int[][] richer, int[] quiet) {\\n        \\n        ans=new int[quiet.length];\\n        for(int i=0;i<=richer.length;i++){\\n            \\n            if(!map.containsKey(i)){\\n                map.put(i,new ArrayList());\\n            }\\n            if(i<richer.length && !map.containsKey(richer[i][0])){\\n                map.put(richer[i][0],new ArrayList());\\n                map.get(richer[i][0]).add(richer[i][1]);\\n            }\\n            else if(i<richer.length){\\n                map.get(richer[i][0]).add(richer[i][1]);\\n            }\\n        }\\n        \\n        Comparator<pair> comp=new Comparator<pair>(){\\n            public int compare(pair p1,pair p2){\\n                if(p1.cost>p2.cost){\\n                    return 1;\\n                }\\n                else{\\n                    return -1;\\n                }\\n\\n            }\\n        };\\n        PriorityQueue<pair> pq=new PriorityQueue<>(comp);\\n        for(int i=0;i<quiet.length;i++){\\n            ans[i]=-1;\\n            pq.add(new pair(i,quiet[i]));\\n        }\\n        \\n        while(!pq.isEmpty()){\\n            pair top=pq.poll();\\n            //System.out.println(top.node+\" \"+top.cost);\\n            curr_node=top.node;\\n            if(!vis.contains(top.node)){\\n            dfs(top.node);\\n            }\\n        }\\n        return ans;\\n       \\n    }\\n    public void dfs(int node){\\n        //System.out.println(node);\\n        if(ans[node]==-1){\\n            ans[node]=curr_node;\\n        }\\n        if(!vis.contains(node) && map.containsKey(node)){\\n            vis.add(node);\\n             \\n            for(int i : map.get(node)){\\n            dfs(i);\\n        \\n        }\\n        }\\n            \\n    }\\n}\\n\\nclass pair{\\n    int node,cost;\\n    pair(int node,int cost){\\n        this.node=node;\\n        this.cost=cost;\\n    }\\n}\\n\\n```",
        "level": "medium"
    },
    {
        "slug": "make-costs-of-paths-equal-in-a-binary-tree",
        "description": "You are given an integer n representing the number of nodes in a perfect binary tree consisting of nodes numbered from 1 to n. The root of the tree is node 1 and each node i in the tree has two children where the left child is the node 2 * i and the right child is 2 * i + 1.\nEach node in the tree also has a cost represented by a given 0-indexed integer array cost of size n where cost[i] is the cost of node i + 1. You are allowed to increment the cost of any node by 1 any number of times.\nReturn the minimum number of increments you need to make the cost of paths from the root to each leaf node equal.\nNote:\n\nA perfect binary tree is a tree where each node, except the leaf nodes, has exactly 2 children.\nThe cost of a path is the sum of costs of nodes in the path.",
        "examples": [
            "Input: n = 7, cost = [1,5,2,2,3,3,1]\nOutput: 6\nExplanation: We can do the following increments:\n- Increase the cost of node 4 one time.\n- Increase the cost of node 3 three times.\n- Increase the cost of node 7 two times.\nEach path from the root to a leaf will have a total cost of 9.\nThe total increments we did is 1 + 3 + 2 = 6.\nIt can be shown that this is the minimum answer we can achieve.",
            "Input: n = 3, cost = [5,3,3]\nOutput: 0\nExplanation: The two paths already have equal total costs, so no increments are needed."
        ],
        "constrains": "3 <= n <= 105\nn + 1 is a power of 2\ncost.length == n\n1 <= cost[i] <= 104",
        "release_time": 1684215665,
        "oracle_code": "class Solution {\n    int res = 0;\n    public int minIncrements(int n, int[] cost) {\n        dfs(1, cost);\n        return res;\n    }\n\n    // get the max cost of a path of sub tree root at i;\n    public int dfs(int i, int[] cost) {\n        if (i > cost.length) return 0;\n        int left = dfs(i * 2, cost), right = dfs(i * 2 + 1, cost);\n        // you need keep two child tree has the same cost of path.\n        // best way to tune the root of lower cost path, increase the\n        // lower root, by Math.abs(left - right);\n        res += Math.abs(left - right);\n        return cost[i - 1] + Math.max(left, right);\n    }\n}",
        "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSee comments\\n# Complexity\\nT O(N)\\nS O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    int res = 0;\\n    public int minIncrements(int n, int[] cost) {\\n        dfs(1, cost);\\n        return res;\\n    }\\n\\n    // get the max cost of a path of sub tree root at i;\\n    public int dfs(int i, int[] cost) {\\n        if (i > cost.length) return 0;\\n        int left = dfs(i * 2, cost), right = dfs(i * 2 + 1, cost);\\n        // you need keep two child tree has the same cost of path.\\n        // best way to tune the root of lower cost path, increase the\\n        // lower root, by Math.abs(left - right);\\n        res += Math.abs(left - right);\\n        return cost[i - 1] + Math.max(left, right);\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "find-first-palindromic-string-in-the-array",
        "description": "Given an array of strings words, return the first palindromic string in the array. If there is no such string, return an empty string \"\".\nA string is palindromic if it reads the same forward and backward.",
        "examples": [
            "Input: words = [\"abc\",\"car\",\"ada\",\"racecar\",\"cool\"]\nOutput: \"ada\"\nExplanation: The first string that is palindromic is \"ada\".\nNote that \"racecar\" is also palindromic, but it is not the first.",
            "Input: words = [\"notapalindrome\",\"racecar\"]\nOutput: \"racecar\"\nExplanation: The first and only string that is palindromic is \"racecar\".",
            "Input: words = [\"def\",\"ghi\"]\nOutput: \"\"\nExplanation: There are no palindromic strings, so the empty string is returned."
        ],
        "constrains": "1 <= words.length <= 100\n1 <= words[i].length <= 100\nwords[i] consists only of lowercase English letters.",
        "release_time": 1683601117,
        "oracle_code": "class Solution {\n    public String firstPalindrome(String[] words) {\n        for(String x : words) {\n            StringBuilder SB = new StringBuilder(x);\n            if(x.equals(SB.reverse().toString())) {\n                return x;\n            }\n        }\n        return \"\";\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for(String x : words) {\\n            StringBuilder SB = new StringBuilder(x);\\n            if(x.equals(SB.reverse().toString())) {\\n                return x;\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "erect-the-fence",
        "description": "You are given an array trees where trees[i] = [xi, yi] represents the location of a tree in the garden.\nFence the entire garden using the minimum length of rope, as it is expensive. The garden is well-fenced only if all the trees are enclosed.\nReturn the coordinates of trees that are exactly located on the fence perimeter. You may return the answer in any order.",
        "examples": [
            "Input: trees = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\nOutput: [[1,1],[2,0],[4,2],[3,3],[2,4]]\nExplanation: All the trees will be on the perimeter of the fence except the tree at [2, 2], which will be inside the fence.",
            "Input: trees = [[1,2],[2,2],[4,2]]\nOutput: [[4,2],[2,2],[1,2]]\nExplanation: The fence forms a line that passes through all the trees."
        ],
        "constrains": "1 <= trees.length <= 3000\ntrees[i].length == 2\n0 <= xi, yi <= 100\nAll the given positions are unique.",
        "release_time": 1668873110,
        "oracle_code": "class Solution {\n    \n    public int[][] outerTrees(int[][] trees) {\n        if(trees.length == 3){\n            return trees;\n        }\n        Stack<int[]> upper = new Stack<>();\n        Stack<int[]> lower = new Stack<>();\n        \n        Arrays.sort(trees,(p,q) ->\n                  q[0]-p[0]==0?q[1]-p[1]:q[0]-p[0]);\n        \n        for(int i = 0 ; i < trees.length ; i++){\n            int size = trees.length;\n            while(upper.size() >= 2 && angle(upper.get(upper.size() - 2),upper.get(upper.size() - 1),trees[i]) > 0){\n                upper.pop();  \n                }\n            while(lower.size() >= 2 && angle(lower.get(lower.size() - 2),lower.get(lower.size() - 1),trees[i]) < 0){\n                 lower.pop();  \n              }\n            upper.push(trees[i]);\n            lower.push(trees[i]);\n        }\n        \n        \n        Set<int[]> res= new HashSet<>(lower);\n        res.addAll(upper);\n        return res.toArray(new int[res.size()][]);\n    }\n    \n    public int angle(int[] A , int[] B , int[] C){\n        return (C[0] - A[0]) * (B[1] - A[1]) - (B[0] - A[0]) * (C[1] - A[1]);\n    }\n}",
        "content": "```\\nclass Solution {\\n    \\n    public int[][] outerTrees(int[][] trees) {\\n        if(trees.length == 3){\\n            return trees;\\n        }\\n        Stack<int[]> upper = new Stack<>();\\n        Stack<int[]> lower = new Stack<>();\\n        \\n        Arrays.sort(trees,(p,q) ->\\n                  q[0]-p[0]==0?q[1]-p[1]:q[0]-p[0]);\\n        \\n        for(int i = 0 ; i < trees.length ; i++){\\n            int size = trees.length;\\n            while(upper.size() >= 2 && angle(upper.get(upper.size() - 2),upper.get(upper.size() - 1),trees[i]) > 0){\\n                upper.pop();  \\n                }\\n            while(lower.size() >= 2 && angle(lower.get(lower.size() - 2),lower.get(lower.size() - 1),trees[i]) < 0){\\n                 lower.pop();  \\n              }\\n            upper.push(trees[i]);\\n            lower.push(trees[i]);\\n        }\\n        \\n        \\n        Set<int[]> res= new HashSet<>(lower);\\n        res.addAll(upper);\\n        return res.toArray(new int[res.size()][]);\\n    }\\n    \\n    public int angle(int[] A , int[] B , int[] C){\\n        return (C[0] - A[0]) * (B[1] - A[1]) - (B[0] - A[0]) * (C[1] - A[1]);\\n    }\\n}\\n```\\n\\n**Upvote Please**",
        "level": "hard"
    },
    {
        "slug": "reverse-words-in-a-string",
        "description": "Given an input string s, reverse the order of the words.\nA word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\nReturn a string of the words in reverse order concatenated by a single space.\nNote that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.",
        "examples": [
            "Input: s = \"the sky is blue\"\nOutput: \"blue is sky the\"",
            "Input: s = \"  hello world  \"\nOutput: \"world hello\"\nExplanation: Your reversed string should not contain leading or trailing spaces.",
            "Input: s = \"a good   example\"\nOutput: \"example good a\"\nExplanation: You need to reduce multiple spaces between two words to a single space in the reversed string."
        ],
        "constrains": "1 <= s.length <= 104\ns contains English letters (upper-case and lower-case), digits, and spaces ' '.\nThere is at least one word in s.\n\n\u00a0\nFollow-up:\u00a0If the string data type is mutable in your language, can\u00a0you solve it\u00a0in-place\u00a0with\u00a0O(1)\u00a0extra space?",
        "release_time": 1688410064,
        "oracle_code": "class Solution {\n    public String reverseWords(String s) {\n     s = s.trim();\n     int left = 0, right = s.length() - 1;\n     String ans = \"\";\n     String temp = \"\";\n     //Iterate the string and keep on adding to form a word\n\t//If empty space is encountered then add the current word to the result\n     while(left <= right) {\n         char ch = s.charAt(left);\n         if(ch != ' ')\n         temp += ch;\n         else if(ch == ' ') {\n             if(!ans.equals(\"\"))\n             ans = temp.trim() + \" \" + ans.trim();\n             else \n             ans = temp.trim();\n             temp = \"\";\n         }\n         left ++;\n     }\n//If not empty string then add to the result(Last word is added)\n     if(!temp.equals(\"\")) {\n         if(!ans.equals(\"\"))\n          ans = temp.trim() + \" \" + ans.trim();\n         else \n          ans = temp.trim();\n     }\n     return ans;\n    }\n}",
        "content": "\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String reverseWords(String s) {\\n     s = s.trim();\\n     int left = 0, right = s.length() - 1;\\n     String ans = \"\";\\n     String temp = \"\";\\n     //Iterate the string and keep on adding to form a word\\n\\t//If empty space is encountered then add the current word to the result\\n     while(left <= right) {\\n         char ch = s.charAt(left);\\n         if(ch != \\' \\')\\n         temp += ch;\\n         else if(ch == \\' \\') {\\n             if(!ans.equals(\"\"))\\n             ans = temp.trim() + \" \" + ans.trim();\\n             else \\n             ans = temp.trim();\\n             temp = \"\";\\n         }\\n         left ++;\\n     }\\n//If not empty string then add to the result(Last word is added)\\n     if(!temp.equals(\"\")) {\\n         if(!ans.equals(\"\"))\\n          ans = temp.trim() + \" \" + ans.trim();\\n         else \\n          ans = temp.trim();\\n     }\\n     return ans;\\n    }\\n}\\n```\\n# PLEASE UPVOTE IF IT WAS HELPFULL",
        "level": "medium"
    },
    {
        "slug": "relative-sort-array",
        "description": "Given two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1.\nSort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2. Elements that do not appear in arr2 should be placed at the end of arr1 in ascending order.",
        "examples": [
            "Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]\nOutput: [2,2,2,1,4,3,3,9,6,7,19]",
            "Input: arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]\nOutput: [22,28,8,6,17,44]"
        ],
        "constrains": "1 <= arr1.length, arr2.length <= 1000\n0 <= arr1[i], arr2[i] <= 1000\nAll the elements of arr2 are distinct.\nEach\u00a0arr2[i] is in arr1.",
        "release_time": 1691725804,
        "oracle_code": "import java.util.Arrays;\n\nclass Solution {\n    public int[] relativeSortArray(int[] arr1, int[] arr2) {\n        Arrays.sort(arr1);\n        int[] ans = new int[arr1.length];\n        int start = 0;\n        int end = arr1.length - 1;\n        int index = 0;\n\n        for (int i = 0; i < arr2.length; i++) {\n            int target = arr2[i];\n            start = 0;\n            end = arr1.length - 1;\n\n            while (end >= start) {\n                int mid = start + (end - start) / 2;\n                if (arr1[mid] == target) {\n                    for (int j = start; j <= end; j++) {\n                        if (arr1[j] == target) {\n                            ans[index++] = arr1[j];\n                        }\n                    }\n                    break;\n                }\n                if (arr1[mid] < target) {\n                    start = mid + 1;\n                } else {\n                    end = mid - 1;\n                }\n            }\n        }\n\n        for (int i = 0; i < arr1.length; i++) {\n            if (index == arr1.length) {\n                break;\n            }\n            boolean found = false;\n            for (int num : arr2) {\n                if (arr1[i] == num) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                ans[index++] = arr1[i];\n            }\n        }\n\n        return ans;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport java.util.Arrays;\\n\\nclass Solution {\\n    public int[] relativeSortArray(int[] arr1, int[] arr2) {\\n        Arrays.sort(arr1);\\n        int[] ans = new int[arr1.length];\\n        int start = 0;\\n        int end = arr1.length - 1;\\n        int index = 0;\\n\\n        for (int i = 0; i < arr2.length; i++) {\\n            int target = arr2[i];\\n            start = 0;\\n            end = arr1.length - 1;\\n\\n            while (end >= start) {\\n                int mid = start + (end - start) / 2;\\n                if (arr1[mid] == target) {\\n                    for (int j = start; j <= end; j++) {\\n                        if (arr1[j] == target) {\\n                            ans[index++] = arr1[j];\\n                        }\\n                    }\\n                    break;\\n                }\\n                if (arr1[mid] < target) {\\n                    start = mid + 1;\\n                } else {\\n                    end = mid - 1;\\n                }\\n            }\\n        }\\n\\n        for (int i = 0; i < arr1.length; i++) {\\n            if (index == arr1.length) {\\n                break;\\n            }\\n            boolean found = false;\\n            for (int num : arr2) {\\n                if (arr1[i] == num) {\\n                    found = true;\\n                    break;\\n                }\\n            }\\n            if (!found) {\\n                ans[index++] = arr1[i];\\n            }\\n        }\\n\\n        return ans;\\n    }\\n}\\n\\n```",
        "level": "easy"
    },
    {
        "slug": "domino-and-tromino-tiling",
        "description": "You have two types of tiles: a 2 x 1 domino shape and a tromino shape. You may rotate these shapes.\n\nGiven an integer n, return the number of ways to tile an 2 x n board. Since the answer may be very large, return it modulo 109 + 7.\nIn a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.",
        "examples": [
            "Input: n = 3\nOutput: 5\nExplanation: The five different ways are show above.",
            "Input: n = 1\nOutput: 1"
        ],
        "constrains": "1 <= n <= 1000",
        "release_time": 1671862293,
        "oracle_code": "class Solution {\n    private long[] dp;\n    int MOD = (int)Math.pow(10 , 9) + 7;\n    public long solve(int n){\n        if(n==0) return 1;\n        if(n<3) return n;\n\n        if(dp[n]!=-1) return dp[n];\n\n        return dp[n] = 2*solve(n-1)%MOD+solve(n-3)%MOD;\n    }\n    public int numTilings(int n) {\n        this.dp = new long[n+1];\n        Arrays.fill(dp , -1);\n\n        return (int)solve(n)%MOD;\n    }\n}",
        "content": "# Intuition\\n- The basic approach to solve this problem was by using brute force recursion.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n- Then after realising the over-lapping sub problems in it the whole problem was solved using the memoization technique of Dynamic Programming\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(N*N)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(N)$$ + recursive stack space\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    private long[] dp;\\n    int MOD = (int)Math.pow(10 , 9) + 7;\\n    public long solve(int n){\\n        if(n==0) return 1;\\n        if(n<3) return n;\\n\\n        if(dp[n]!=-1) return dp[n];\\n\\n        return dp[n] = 2*solve(n-1)%MOD+solve(n-3)%MOD;\\n    }\\n    public int numTilings(int n) {\\n        this.dp = new long[n+1];\\n        Arrays.fill(dp , -1);\\n\\n        return (int)solve(n)%MOD;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "minimum-score-triangulation-of-polygon",
        "description": "You have a convex n-sided polygon where each vertex has an integer value. You are given an integer array values where values[i] is the value of the ith vertex (i.e., clockwise order).\nYou will triangulate the polygon into n - 2 triangles. For each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all n - 2 triangles in the triangulation.\nReturn the smallest possible total score that you can achieve with some triangulation of the polygon.",
        "examples": [
            "Input: values = [1,2,3]\nOutput: 6\nExplanation: The polygon is already triangulated, and the score of the only triangle is 6.",
            "Input: values = [3,7,4,5]\nOutput: 144\nExplanation: There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.\nThe minimum score is 144.",
            "Input: values = [1,3,1,4,1,5]\nOutput: 13\nExplanation: The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13."
        ],
        "constrains": "n == values.length\n3 <= n <= 50\n1 <= values[i] <= 100",
        "release_time": 1682753898,
        "oracle_code": "class Solution {\n    int[][] dp;\n    public int minScoreTriangulation(int[] values) {\n        int l=values.length;\n        dp = new int[l][l];\n        for(int[] i : dp) Arrays.fill(i,-1);\n        return solve(values,1,l-1); \n    }\n\n    public int solve(int[] values, int i,int j)\n    {\n        if(i>=j) return 0;\n        if(dp[i][j]!=-1) return dp[i][j];\n        int min=Integer.MAX_VALUE;\n        for(int k=i;k<j;k++)\n        {\n            int temp=solve(values,i,k)+solve(values,k+1,j)+\n                        values[i-1]*values[k]*values[j];\n            min=Math.min(min,temp);\n        }\n\n        return dp[i][j]=min;\n    }\n}",
        "content": "\\n# Complexity\\n- Time complexity: n^2\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: n^2\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    int[][] dp;\\n    public int minScoreTriangulation(int[] values) {\\n        int l=values.length;\\n        dp = new int[l][l];\\n        for(int[] i : dp) Arrays.fill(i,-1);\\n        return solve(values,1,l-1); \\n    }\\n\\n    public int solve(int[] values, int i,int j)\\n    {\\n        if(i>=j) return 0;\\n        if(dp[i][j]!=-1) return dp[i][j];\\n        int min=Integer.MAX_VALUE;\\n        for(int k=i;k<j;k++)\\n        {\\n            int temp=solve(values,i,k)+solve(values,k+1,j)+\\n                        values[i-1]*values[k]*values[j];\\n            min=Math.min(min,temp);\\n        }\\n\\n        return dp[i][j]=min;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "pass-the-pillow",
        "description": "There are n people standing in a line labeled from 1 to n. The first person in the line is holding a pillow initially. Every second, the person holding the pillow passes it to the next person standing in the line. Once the pillow reaches the end of the line, the direction changes, and people continue passing the pillow in the opposite direction.\n\nFor example, once the pillow reaches the nth person they pass it to the n - 1th person, then to the n - 2th person and so on.\n\nGiven the two positive integers n and time, return the index of the person holding the pillow after time seconds.",
        "examples": [
            "Input: n = 4, time = 5\nOutput: 2\nExplanation: People pass the pillow in the following way: 1 -> 2 -> 3 -> 4 -> 3 -> 2.\nAfer five seconds, the pillow is given to the 2nd person.",
            "Input: n = 3, time = 2\nOutput: 3\nExplanation: People pass the pillow in the following way: 1 -> 2 -> 3.\nAfer two seconds, the pillow is given to the 3rd person."
        ],
        "constrains": "2 <= n <= 1000\n1 <= time <= 1000",
        "release_time": 1680694428,
        "oracle_code": "class Solution {\n    public int passThePillow(int n, int time) {\n        int num=(time/(n-1));\n        if(n>time){\n            return time+1;\n        }\n        if(num%2==1){\n            return n-((time%(n-1)));\n        }\n            \n        return (time%(n-1))+1;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int passThePillow(int n, int time) {\\n        int num=(time/(n-1));\\n        if(n>time){\\n            return time+1;\\n        }\\n        if(num%2==1){\\n            return n-((time%(n-1)));\\n        }\\n            \\n        return (time%(n-1))+1;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "find-all-people-with-secret",
        "description": "You are given an integer n indicating there are n people numbered from 0 to n - 1. You are also given a 0-indexed 2D integer array meetings where meetings[i] = [xi, yi, timei] indicates that person xi and person yi have a meeting at timei. A person may attend multiple meetings at the same time. Finally, you are given an integer firstPerson.\nPerson 0 has a secret and initially shares the secret with a person firstPerson at time 0. This secret is then shared every time a meeting takes place with a person that has the secret. More formally, for every meeting, if a person xi has the secret at timei, then they will share the secret with person yi, and vice versa.\nThe secrets are shared instantaneously. That is, a person may receive the secret and share it with people in other meetings within the same time frame.\nReturn a list of all the people that have the secret after all the meetings have taken place. You may return the answer in any order.",
        "examples": [
            "Input: n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1\nOutput: [0,1,2,3,5]\nExplanation:\nAt time 0, person 0 shares the secret with person 1.\nAt time 5, person 1 shares the secret with person 2.\nAt time 8, person 2 shares the secret with person 3.\nAt time 10, person 1 shares the secret with person 5.\u200b\u200b\u200b\u200b\nThus, people 0, 1, 2, 3, and 5 know the secret after all the meetings.",
            "Input: n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3\nOutput: [0,1,3]\nExplanation:\nAt time 0, person 0 shares the secret with person 3.\nAt time 2, neither person 1 nor person 2 know the secret.\nAt time 3, person 3 shares the secret with person 0 and person 1.\nThus, people 0, 1, and 3 know the secret after all the meetings.",
            "Input: n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1\nOutput: [0,1,2,3,4]\nExplanation:\nAt time 0, person 0 shares the secret with person 1.\nAt time 1, person 1 shares the secret with person 2, and person 2 shares the secret with person 3.\nNote that person 2 can share the secret at the same time as receiving it.\nAt time 2, person 3 shares the secret with person 4.\nThus, people 0, 1, 2, 3, and 4 know the secret after all the meetings."
        ],
        "constrains": "2 <= n <= 105\n1 <= meetings.length <= 105\nmeetings[i].length == 3\n0 <= xi, yi <= n - 1\nxi != yi\n1 <= timei <= 105\n1 <= firstPerson <= n - 1",
        "release_time": 1687729516,
        "oracle_code": "class DisjointSet {\n    int[] root;\n    Long[] rank;\n    DisjointSet(int size, Set<Integer> secretKeepers) {\n        root = new int[size];\n        rank = new Long[size];\n        for (int i = 0; i < size; i++) {\n            root[i] = i;\n            rank[i] = secretKeepers.contains(i) ? Integer.MAX_VALUE : 1L;\n        }\n    }\n\n    public int find(int vertex) {\n        if(root[vertex] == vertex) return vertex;\n        return root[vertex] = find(root[vertex]);\n    }\n\n    public void union(int vertex1, int vertex2) {\n        int root1 = find(vertex1);\n        int root2 = find(vertex2);\n        if(root1 != root2) {\n            if(rank[root1] > rank[root2]) {\n                root[root2] = root1;\n            } else if (rank[root2] > rank[root1]) {\n                root[root1] = root2;\n            } else {\n                root[root2] = root1;\n                rank[root1]++;\n            }\n        }\n    }\n\n    public Set<Integer> getAllSecretKeepers(Set<Integer> secretKeepers, Set<Integer> visited) {\n        for (int vertex: visited) {\n            if(secretKeepers.contains(find(vertex)))\n                secretKeepers.add(vertex);\n            else \n                root[vertex] = vertex;\n        }\n        return secretKeepers;\n    }\n}\n\nclass Solution {\n    private int maxTime = Integer.MIN_VALUE;\n    private int minTime = Integer.MAX_VALUE;\n    public List<Integer> findAllPeople(int n, int[][] meetings, int firstPerson) {\n        Set<Integer> secretKeepers = new HashSet<>(List.of(0, firstPerson));\n        Map<Integer, List<Integer[]>> timeToMeetings = getTimeToMeetings(meetings);\n        DisjointSet disjointSet = new DisjointSet(n, secretKeepers);\n        for (int time = minTime; time <= maxTime; time++) {\n            if(!timeToMeetings.containsKey(time)) continue;\n            Set<Integer> visited = new HashSet<>();\n            for (Integer[] meeting: timeToMeetings.get(time)) {\n                int person1 = meeting[0], person2 = meeting[1];\n                disjointSet.union(person1, person2);\n                visited.add(person1);\n                visited.add(person2);\n            }\n            secretKeepers = disjointSet.getAllSecretKeepers(secretKeepers, visited);\n        }\n        return new ArrayList<>(secretKeepers);\n    }\n\n    private Map<Integer, List<Integer[]>> getTimeToMeetings(int[][] meetings) {\n        Map<Integer, List<Integer[]>> timeToMeetings = new HashMap<>();\n        for (int[] meeting: meetings) {\n            maxTime = Math.max(maxTime, meeting[2]);\n            minTime = Math.min(minTime, meeting[2]);\n            timeToMeetings.computeIfAbsent(meeting[2], e-> new ArrayList<>()).add(new Integer[]{meeting[0], meeting[1]});\n        }\n        return timeToMeetings;\n    }\n}",
        "content": "# Code\\n```\\nclass DisjointSet {\\n    int[] root;\\n    Long[] rank;\\n    DisjointSet(int size, Set<Integer> secretKeepers) {\\n        root = new int[size];\\n        rank = new Long[size];\\n        for (int i = 0; i < size; i++) {\\n            root[i] = i;\\n            rank[i] = secretKeepers.contains(i) ? Integer.MAX_VALUE : 1L;\\n        }\\n    }\\n\\n    public int find(int vertex) {\\n        if(root[vertex] == vertex) return vertex;\\n        return root[vertex] = find(root[vertex]);\\n    }\\n\\n    public void union(int vertex1, int vertex2) {\\n        int root1 = find(vertex1);\\n        int root2 = find(vertex2);\\n        if(root1 != root2) {\\n            if(rank[root1] > rank[root2]) {\\n                root[root2] = root1;\\n            } else if (rank[root2] > rank[root1]) {\\n                root[root1] = root2;\\n            } else {\\n                root[root2] = root1;\\n                rank[root1]++;\\n            }\\n        }\\n    }\\n\\n    public Set<Integer> getAllSecretKeepers(Set<Integer> secretKeepers, Set<Integer> visited) {\\n        for (int vertex: visited) {\\n            if(secretKeepers.contains(find(vertex)))\\n                secretKeepers.add(vertex);\\n            else \\n                root[vertex] = vertex;\\n        }\\n        return secretKeepers;\\n    }\\n}\\n\\nclass Solution {\\n    private int maxTime = Integer.MIN_VALUE;\\n    private int minTime = Integer.MAX_VALUE;\\n    public List<Integer> findAllPeople(int n, int[][] meetings, int firstPerson) {\\n        Set<Integer> secretKeepers = new HashSet<>(List.of(0, firstPerson));\\n        Map<Integer, List<Integer[]>> timeToMeetings = getTimeToMeetings(meetings);\\n        DisjointSet disjointSet = new DisjointSet(n, secretKeepers);\\n        for (int time = minTime; time <= maxTime; time++) {\\n            if(!timeToMeetings.containsKey(time)) continue;\\n            Set<Integer> visited = new HashSet<>();\\n            for (Integer[] meeting: timeToMeetings.get(time)) {\\n                int person1 = meeting[0], person2 = meeting[1];\\n                disjointSet.union(person1, person2);\\n                visited.add(person1);\\n                visited.add(person2);\\n            }\\n            secretKeepers = disjointSet.getAllSecretKeepers(secretKeepers, visited);\\n        }\\n        return new ArrayList<>(secretKeepers);\\n    }\\n\\n    private Map<Integer, List<Integer[]>> getTimeToMeetings(int[][] meetings) {\\n        Map<Integer, List<Integer[]>> timeToMeetings = new HashMap<>();\\n        for (int[] meeting: meetings) {\\n            maxTime = Math.max(maxTime, meeting[2]);\\n            minTime = Math.min(minTime, meeting[2]);\\n            timeToMeetings.computeIfAbsent(meeting[2], e-> new ArrayList<>()).add(new Integer[]{meeting[0], meeting[1]});\\n        }\\n        return timeToMeetings;\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "find-all-lonely-numbers-in-the-array",
        "description": "You are given an integer array nums. A number x is lonely when it appears only once, and no adjacent numbers (i.e. x + 1 and x - 1) appear in the array.\nReturn all lonely numbers in nums. You may return the answer in any order.",
        "examples": [
            "Input: nums = [10,6,5,8]\nOutput: [10,8]\nExplanation: \n- 10 is a lonely number since it appears exactly once and 9 and 11 does not appear in nums.\n- 8 is a lonely number since it appears exactly once and 7 and 9 does not appear in nums.\n- 5 is not a lonely number since 6 appears in nums and vice versa.\nHence, the lonely numbers in nums are [10, 8].\nNote that [8, 10] may also be returned.",
            "Input: nums = [1,3,5,3]\nOutput: [1,5]\nExplanation: \n- 1 is a lonely number since it appears exactly once and 0 and 2 does not appear in nums.\n- 5 is a lonely number since it appears exactly once and 4 and 6 does not appear in nums.\n- 3 is not a lonely number since it appears twice.\nHence, the lonely numbers in nums are [1, 5].\nNote that [5, 1] may also be returned."
        ],
        "constrains": "1 <= nums.length <= 105\n0 <= nums[i] <= 106",
        "release_time": 1672209386,
        "oracle_code": "class Solution {\n    public List<Integer> findLonely(int[] arr) {\n        HashMap<Integer, Integer> map = new HashMap<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        \n        for (int i : arr) map.put(i, map.getOrDefault(i, 0) + 1);\n        for (int i : arr) if (map.get(i) == 1 && !map.containsKey(i - 1) && !map.containsKey(i + 1)) list.add(i);\n        return list;\n    }\n}",
        "content": "\\n# Code\\n```\\nclass Solution {\\n    public List<Integer> findLonely(int[] arr) {\\n        HashMap<Integer, Integer> map = new HashMap<>();\\n        ArrayList<Integer> list = new ArrayList<>();\\n        \\n        for (int i : arr) map.put(i, map.getOrDefault(i, 0) + 1);\\n        for (int i : arr) if (map.get(i) == 1 && !map.containsKey(i - 1) && !map.containsKey(i + 1)) list.add(i);\\n        return list;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "sort-characters-by-frequency",
        "description": "Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.\nReturn the sorted string. If there are multiple answers, return any of them.",
        "examples": [
            "Input: s = \"tree\"\nOutput: \"eert\"\nExplanation: 'e' appears twice while 'r' and 't' both appear once.\nSo 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer.",
            "Input: s = \"cccaaa\"\nOutput: \"aaaccc\"\nExplanation: Both 'c' and 'a' appear three times, so both \"cccaaa\" and \"aaaccc\" are valid answers.\nNote that \"cacaca\" is incorrect, as the same characters must be together.",
            "Input: s = \"Aabb\"\nOutput: \"bbAa\"\nExplanation: \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\nNote that 'A' and 'a' are treated as two different characters."
        ],
        "constrains": "1 <= s.length <= 5 * 105\ns consists of uppercase and lowercase English letters and digits.",
        "release_time": 1670065857,
        "oracle_code": "class Solution {\n    public String frequencySort(String s) {\n        char[] arr = new char[256];\n    for(int i=0; i<s.length(); i++){\n        arr[s.charAt(i)]++;    \n    }\n    \n    StringBuilder sb = new StringBuilder();\n    int max = -1;\n    while(max != 0){\n        max = -1;\n        char maxi = 0;\n        for(char i=0; i<arr.length; i++){\n            if(arr[i] > max){\n                max = arr[i];\n                maxi = i;\n            }\n        }\n        for(int i=0; i<max; i++){\n            sb.append(maxi);   \n        }\n        arr[maxi] = 0;\n    }\n    return sb.toString();\n        \n    }\n}",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public String frequencySort(String s) {\\n        char[] arr = new char[256];\\n    for(int i=0; i<s.length(); i++){\\n        arr[s.charAt(i)]++;    \\n    }\\n    \\n    StringBuilder sb = new StringBuilder();\\n    int max = -1;\\n    while(max != 0){\\n        max = -1;\\n        char maxi = 0;\\n        for(char i=0; i<arr.length; i++){\\n            if(arr[i] > max){\\n                max = arr[i];\\n                maxi = i;\\n            }\\n        }\\n        for(int i=0; i<max; i++){\\n            sb.append(maxi);   \\n        }\\n        arr[maxi] = 0;\\n    }\\n    return sb.toString();\\n        \\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "find-the-distinct-difference-array",
        "description": "You are given a 0-indexed array nums of length n.\nThe distinct difference array of nums is an array diff of length n such that diff[i] is equal to the number of distinct elements in the suffix nums[i + 1, ..., n - 1] subtracted from the number of distinct elements in the prefix nums[0, ..., i].\nReturn the distinct difference array of nums.\nNote that nums[i, ..., j] denotes the subarray of nums starting at index i and ending at index j inclusive. Particularly, if i > j then nums[i, ..., j] denotes an empty subarray.",
        "examples": [
            "Input: nums = [1,2,3,4,5]\nOutput: [-3,-1,1,3,5]\nExplanation: For index i = 0, there is 1 element in the prefix and 4 distinct elements in the suffix. Thus, diff[0] = 1 - 4 = -3.\nFor index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1.\nFor index i = 2, there are 3 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 3 - 2 = 1.\nFor index i = 3, there are 4 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 4 - 1 = 3.\nFor index i = 4, there are 5 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 5 - 0 = 5.",
            "Input: nums = [3,2,3,4,2]\nOutput: [-2,-1,0,2,3]\nExplanation: For index i = 0, there is 1 element in the prefix and 3 distinct elements in the suffix. Thus, diff[0] = 1 - 3 = -2.\nFor index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1.\nFor index i = 2, there are 2 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 2 - 2 = 0.\nFor index i = 3, there are 3 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 3 - 1 = 2.\nFor index i = 4, there are 3 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 3 - 0 = 3."
        ],
        "constrains": "1 <= n == nums.length\u00a0<= 50\n1 <= nums[i] <= 50",
        "release_time": 1683444191,
        "oracle_code": "class Solution {\n    public int[] distinctDifferenceArray(int[] nums) {\n        int n=nums.length;\n        int ans[]=new int[n];\n        \n        for(int i=0;i<n;i++){\n            Set<Integer>set1=new HashSet<>();\n            Set<Integer>set2=new HashSet<>();\n            \n            for(int j=0;j<=i;j++){\n                set1.add(nums[j]);\n            }\n            for(int j=i+1;j<n;j++){\n                set2.add(nums[j]);\n            }\n            \n            ans[i]= set1.size() - set2.size();\n        }\n        return ans;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] distinctDifferenceArray(int[] nums) {\\n        int n=nums.length;\\n        int ans[]=new int[n];\\n        \\n        for(int i=0;i<n;i++){\\n            Set<Integer>set1=new HashSet<>();\\n            Set<Integer>set2=new HashSet<>();\\n            \\n            for(int j=0;j<=i;j++){\\n                set1.add(nums[j]);\\n            }\\n            for(int j=i+1;j<n;j++){\\n                set2.add(nums[j]);\\n            }\\n            \\n            ans[i]= set1.size() - set2.size();\\n        }\\n        return ans;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "to-lower-case",
        "description": "Given a string s, return the string after replacing every uppercase letter with the same lowercase letter.",
        "examples": [
            "Input: s = \"Hello\"\nOutput: \"hello\"",
            "Input: s = \"here\"\nOutput: \"here\"",
            "Input: s = \"LOVELY\"\nOutput: \"lovely\""
        ],
        "constrains": "1 <= s.length <= 100\ns consists of printable ASCII characters.",
        "release_time": 1689583806,
        "oracle_code": "class Solution {\n    public String toLowerCase(String s) {\n        return s.toLowerCase();\n        \n    }\n}",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public String toLowerCase(String s) {\\n        return s.toLowerCase();\\n        \\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "count-negative-numbers-in-a-sorted-matrix",
        "description": "Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.",
        "examples": [
            "Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]\nOutput: 8\nExplanation: There are 8 negatives number in the matrix.",
            "Input: grid = [[3,2],[1,0]]\nOutput: 0"
        ],
        "constrains": "m == grid.length\nn == grid[i].length\n1 <= m, n <= 100\n-100 <= grid[i][j] <= 100",
        "release_time": 1686193447,
        "oracle_code": "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        ROWS, COLS = len(grid), len(grid[0])\n        negatives = 0\n        col = 0\n        for row in range(ROWS - 1, -1, -1):\n            while col < COLS and grid[row][col] >= 0:\n                col += 1\n            negatives += COLS - col\n        return negatives",
        "content": "# Intuition\\nThe key idea is to take advantage of the sorted nature of the matrix, where both the rows and columns are sorted in non-increasing order. This means that once we find a negative number in a row, all the following numbers in that row will also be negative. Similarly, if a cell at the top of a column is negative, all the cells below it in that column will also be negative.\\n\\n# Approach\\nNegative numbers will form a staircase. So we start from the bottom-left, and follow along the staircase. For each row, we find the edge of the staircase, add all the count of elements to the right to the answer, and then move up a row and repeat.\\n\\n# Complexity\\n- Time complexity: O(m + n) - We visit each row and column at most once.\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def countNegatives(self, grid: List[List[int]]) -> int:\\n        ROWS, COLS = len(grid), len(grid[0])\\n        negatives = 0\\n        col = 0\\n        for row in range(ROWS - 1, -1, -1):\\n            while col < COLS and grid[row][col] >= 0:\\n                col += 1\\n            negatives += COLS - col\\n        return negatives\\n\\n```\\n\\n# Get Faster Interview Prep Results with Top Algos\\nWe all know how time-consuming it is to prepare for interviews and how frustratingly difficult it is to improve. We made **Top Algos** - a tool recommends the perfect algorithm problem based on your current skill level to help you improve the fastest in the shortest amount of time. Top Algos is your personalized coach that learns your skill level and finds the best problem you need to solve to improve.\\n\\nThe beta version of the product is available for **free** right now! You can sign up at https://topalgos.xyz/.",
        "level": "easy"
    },
    {
        "slug": "baseball-game",
        "description": "You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record.\nYou are given a list of strings operations, where operations[i] is the ith operation you must apply to the record and is one of the following:\n\nAn integer x.\n\n\t\nRecord a new score of x.\n\n\n'+'.\n\t\nRecord a new score that is the sum of the previous two scores.\n\n\n'D'.\n\t\nRecord a new score that is the double of the previous score.\n\n\n'C'.\n\t\nInvalidate the previous score, removing it from the record.\n\n\n\nReturn the sum of all the scores on the record after applying all the operations.\nThe test cases are generated such that the answer and all intermediate calculations fit in a 32-bit integer and that all operations are valid.",
        "examples": [
            "Input: ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]\nOutput: 30\nExplanation:\n\"5\" - Add 5 to the record, record is now [5].\n\"2\" - Add 2 to the record, record is now [5, 2].\n\"C\" - Invalidate and remove the previous score, record is now [5].\n\"D\" - Add 2 * 5 = 10 to the record, record is now [5, 10].\n\"+\" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].\nThe total sum is 5 + 10 + 15 = 30.",
            "Input: ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]\nOutput: 27\nExplanation:\n\"5\" - Add 5 to the record, record is now [5].\n\"-2\" - Add -2 to the record, record is now [5, -2].\n\"4\" - Add 4 to the record, record is now [5, -2, 4].\n\"C\" - Invalidate and remove the previous score, record is now [5, -2].\n\"D\" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].\n\"9\" - Add 9 to the record, record is now [5, -2, -4, 9].\n\"+\" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].\n\"+\" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].\nThe total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.",
            "Input: ops = [\"1\",\"C\"]\nOutput: 0\nExplanation:\n\"1\" - Add 1 to the record, record is now [1].\n\"C\" - Invalidate and remove the previous score, record is now [].\nSince the record is empty, the total sum is 0."
        ],
        "constrains": "1 <= operations.length <= 1000\noperations[i] is \"C\", \"D\", \"+\", or a string representing an integer in the range [-3 * 104, 3 * 104].\nFor operation \"+\", there will always be at least two previous scores on the record.\nFor operations \"C\" and \"D\", there will always be at least one previous score on the record.",
        "release_time": 1689567966,
        "oracle_code": "class Solution {\n    public int calPoints(String[] operations) {\n\n        Stack<Integer> stack = new Stack<>();\n        \n        for(int i=0; i<operations.length; i++){\n            if(operations[i].equals(\"C\")){\n                stack.pop();\n            }else if(operations[i].equals(\"D\")){\n                stack.push(stack.peek() * 2);\n            }else if(operations[i].equals(\"+\") && stack.size()>=2){\n                int value1 = stack.pop();\n                int value2 = stack.pop();\n                int value = value1+ value2;\n                //push value2 back to the stack frist\n                stack.push(value2);\n                stack.push(value1);\n                stack.push(value);\n            }else {\n                stack.push(Integer.parseInt(operations[i]));\n            }\n        }\n        \n        System.out.println(\"Stack\" + stack);\n\n        int sum =0;\n        while (!stack.isEmpty()){\n            sum += stack.pop();\n        }\n        \n        return sum;\n    }\n}",
        "content": "# Approach1: Use Stack\\n# Approach2: Use Dequeue\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int calPoints(String[] operations) {\\n\\n        Stack<Integer> stack = new Stack<>();\\n        \\n        for(int i=0; i<operations.length; i++){\\n            if(operations[i].equals(\"C\")){\\n                stack.pop();\\n            }else if(operations[i].equals(\"D\")){\\n                stack.push(stack.peek() * 2);\\n            }else if(operations[i].equals(\"+\") && stack.size()>=2){\\n                int value1 = stack.pop();\\n                int value2 = stack.pop();\\n                int value = value1+ value2;\\n                //push value2 back to the stack frist\\n                stack.push(value2);\\n                stack.push(value1);\\n                stack.push(value);\\n            }else {\\n                stack.push(Integer.parseInt(operations[i]));\\n            }\\n        }\\n        \\n        System.out.println(\"Stack\" + stack);\\n\\n        int sum =0;\\n        while (!stack.isEmpty()){\\n            sum += stack.pop();\\n        }\\n        \\n        return sum;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "check-if-one-string-swap-can-make-strings-equal",
        "description": "You are given two strings s1 and s2 of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.\nReturn true if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. Otherwise, return false.",
        "examples": [
            "Input: s1 = \"bank\", s2 = \"kanb\"\nOutput: true\nExplanation: For example, swap the first character with the last character of s2 to make \"bank\".",
            "Input: s1 = \"attack\", s2 = \"defend\"\nOutput: false\nExplanation: It is impossible to make them equal with one string swap.",
            "Input: s1 = \"kelb\", s2 = \"kelb\"\nOutput: true\nExplanation: The two strings are already equal, so no string swap operation is required."
        ],
        "constrains": "1 <= s1.length, s2.length <= 100\ns1.length == s2.length\ns1 and s2 consist of only lowercase English letters.",
        "release_time": 1679756521,
        "oracle_code": "class Solution {\n    public boolean areAlmostEqual(String s1, String s2) {\n        if(s1.equals(s2))\n        return true;\n        ArrayList<Character> ts=new ArrayList<>();\n        ArrayList<Character> ts1=new ArrayList<>();\n        int count=0;\n        for(int i=0;i<s1.length();i++){\n            if(s1.charAt(i)!=s2.charAt(i)){\n            ts.add(s1.charAt(i));\n            ts1.add(s2.charAt(i));    \n        }\n        }\n        for(Character co:ts){\n            if(!(ts1.contains(co)))\n            return false;\n        }\n        return (ts.size()==2 && ts1.size()==2)?true:false;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean areAlmostEqual(String s1, String s2) {\\n        if(s1.equals(s2))\\n        return true;\\n        ArrayList<Character> ts=new ArrayList<>();\\n        ArrayList<Character> ts1=new ArrayList<>();\\n        int count=0;\\n        for(int i=0;i<s1.length();i++){\\n            if(s1.charAt(i)!=s2.charAt(i)){\\n            ts.add(s1.charAt(i));\\n            ts1.add(s2.charAt(i));    \\n        }\\n        }\\n        for(Character co:ts){\\n            if(!(ts1.contains(co)))\\n            return false;\\n        }\\n        return (ts.size()==2 && ts1.size()==2)?true:false;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "delete-characters-to-make-fancy-string",
        "description": "A fancy string is a string where no three consecutive characters are equal.\nGiven a string s, delete the minimum possible number of characters from s to make it fancy.\nReturn the final string after the deletion. It can be shown that the answer will always be unique.",
        "examples": [
            "Input: s = \"leeetcode\"\nOutput: \"leetcode\"\nExplanation:\nRemove an 'e' from the first group of 'e's to create \"leetcode\".\nNo three consecutive characters are equal, so return \"leetcode\".",
            "Input: s = \"aaabaaaa\"\nOutput: \"aabaa\"\nExplanation:\nRemove an 'a' from the first group of 'a's to create \"aabaaaa\".\nRemove two 'a's from the second group of 'a's to create \"aabaa\".\nNo three consecutive characters are equal, so return \"aabaa\".",
            "Input: s = \"aab\"\nOutput: \"aab\"\nExplanation: No three consecutive characters are equal, so return \"aab\"."
        ],
        "constrains": "1 <= s.length <= 105\ns consists only of lowercase English letters.",
        "release_time": 1628352102,
        "oracle_code": "class Solution {\n    public String makeFancyString(String s) {\n        char prev = s.charAt (0);\n        int freq = 1;\n        StringBuilder res = new StringBuilder ();\n        res.append (s.charAt (0));\n        for (int i = 1; i < s.length (); i++) {\n            if (s.charAt (i) == prev)\n                freq++;\n            else {\n                prev = s.charAt (i);\n                freq = 1;\n            }\n            if (freq < 3)\n                res.append (s.charAt (i));\n        }\n        return res.toString ();\n    }\n}",
        "content": "*------Please **upvote!** if you like the solution and explanation.  Please put your doubts/queries in the comments section below.  I will try my best to answer them.------*\\n\\n***Intuition:*** If a character is repeating continuously, we will only pick it at most twice in a row.  This is kind of a Greedy idea where we pick characters such that the concatenated frequency is < 3.\\n\\n***Algorithm:***\\n\\n1.\\tAppend the first character to the result (no point deleting it!).\\n2.\\tKeep a **prev** variable and a **freq** variable marking the frequency of the character seen just before. Initialize **prev** with the first character of the string and **freq** with 1.\\n3.\\tIf the current character is equal to prev, increment **freq** by 1, else change **prev** to the current character and reset **freq = 1**.\\n4.\\tIf **freq < 3**, append the current character to the result, else skip the character.\\n5.\\tAfter the loop ends, return the resultant string.\\n\\nAvoid direct string concatenation because it takes more time as compared to StringBuilder and may cause TLE.\\n\\n```\\nclass Solution {\\n    public String makeFancyString(String s) {\\n        char prev = s.charAt (0);\\n        int freq = 1;\\n        StringBuilder res = new StringBuilder ();\\n        res.append (s.charAt (0));\\n        for (int i = 1; i < s.length (); i++) {\\n            if (s.charAt (i) == prev)\\n                freq++;\\n            else {\\n                prev = s.charAt (i);\\n                freq = 1;\\n            }\\n            if (freq < 3)\\n                res.append (s.charAt (i));\\n        }\\n        return res.toString ();\\n    }\\n}\\n```\\n\\nPlease **upvote!** if you like the solution and explanation.\\n",
        "level": "easy"
    },
    {
        "slug": "rectangle-overlap",
        "description": "An axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.\nTwo rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.\nGiven two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.",
        "examples": [
            "Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]\nOutput: true",
            "Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]\nOutput: false",
            "Input: rec1 = [0,0,1,1], rec2 = [2,2,3,3]\nOutput: false"
        ],
        "constrains": "rec1.length == 4\nrec2.length == 4\n-109 <= rec1[i], rec2[i] <= 109\nrec1 and rec2 represent a valid rectangle with a non-zero area.",
        "release_time": 1679422504,
        "oracle_code": "class Solution {\n    public boolean isRectangleOverlap(int[] rec1, int[] rec2) {\n        int left = Math.max(rec1[0],rec2[0]);\n        int right = Math.min(rec1[2], rec2[2]);\n        int top = Math.min(rec1[3],rec2[3]);\n        int bottom = Math.max(rec1[1], rec2[1]);\n        if(left < right && bottom < top)\n        return true;\n        return false;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isRectangleOverlap(int[] rec1, int[] rec2) {\\n        int left = Math.max(rec1[0],rec2[0]);\\n        int right = Math.min(rec1[2], rec2[2]);\\n        int top = Math.min(rec1[3],rec2[3]);\\n        int bottom = Math.max(rec1[1], rec2[1]);\\n        if(left < right && bottom < top)\\n        return true;\\n        return false;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "count-and-say",
        "description": "The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n\ncountAndSay(1) = \"1\"\ncountAndSay(n) is the way you would \"say\" the digit string from countAndSay(n-1), which is then converted into a different digit string.\n\nTo determine how you \"say\" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.\nFor example, the saying and conversion for digit string \"3322251\":\n\nGiven a positive integer n, return the nth term of the count-and-say sequence.",
        "examples": [
            "Input: n = 1\nOutput: \"1\"\nExplanation: This is the base case.",
            "Input: n = 4\nOutput: \"1211\"\nExplanation:\ncountAndSay(1) = \"1\"\ncountAndSay(2) = say \"1\" = one 1 = \"11\"\ncountAndSay(3) = say \"11\" = two 1's = \"21\"\ncountAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\""
        ],
        "constrains": "1 <= n <= 30",
        "release_time": 1666065881,
        "oracle_code": "class Solution {\n    String convert(String s)\n    {\n        char prevCh = s.charAt(0);\n        int prevCount = 1; //stores count of consecutive same digits\n        StringBuilder ans = new StringBuilder();\n        for (int i = 1; i < s.length(); i++)\n        {\n            char currCh = s.charAt(i);\n            if (currCh != prevCh)   \n            {\n                ans.append(Integer.toString(prevCount));\n                ans.append(prevCh);\n                prevCount = 1; //reset count\n                prevCh = currCh;\n            }\n            else prevCount++;\n        }\n        ans.append(Integer.toString(prevCount));\n        ans.append(prevCh);\n        return ans.toString();\n    }\n    public String countAndSay(int n) \n    {\n        String prevStr = \"1\";\n        for (int i = 2; i <= n; i++)\n        {\n            String cnsNum = convert(prevStr); //cns  = \"count and say Num\"\n            prevStr = cnsNum; //remember (dp) the previous built string\n        }\n        return prevStr;\n        \n        \n    }\n}",
        "content": "```\\nclass Solution {\\n    String convert(String s)\\n    {\\n        char prevCh = s.charAt(0);\\n        int prevCount = 1; //stores count of consecutive same digits\\n        StringBuilder ans = new StringBuilder();\\n        for (int i = 1; i < s.length(); i++)\\n        {\\n            char currCh = s.charAt(i);\\n            if (currCh != prevCh)   \\n            {\\n                ans.append(Integer.toString(prevCount));\\n                ans.append(prevCh);\\n                prevCount = 1; //reset count\\n                prevCh = currCh;\\n            }\\n            else prevCount++;\\n        }\\n        ans.append(Integer.toString(prevCount));\\n        ans.append(prevCh);\\n        return ans.toString();\\n    }\\n    public String countAndSay(int n) \\n    {\\n        String prevStr = \"1\";\\n        for (int i = 2; i <= n; i++)\\n        {\\n            String cnsNum = convert(prevStr); //cns  = \"count and say Num\"\\n            prevStr = cnsNum; //remember (dp) the previous built string\\n        }\\n        return prevStr;\\n        \\n        \\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "subarray-product-less-than-k",
        "description": "Given an array of integers nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k.",
        "examples": [
            "Input: nums = [10,5,2,6], k = 100\nOutput: 8\nExplanation: The 8 subarrays that have product less than 100 are:\n[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]\nNote that [10, 5, 2] is not included as the product of 100 is not strictly less than k.",
            "Input: nums = [1,2,3], k = 0\nOutput: 0"
        ],
        "constrains": "1 <= nums.length <= 3 * 104\n1 <= nums[i] <= 1000\n0 <= k <= 106",
        "release_time": 1689616329,
        "oracle_code": "class Solution {\n    public int numSubarrayProductLessThanK(int[] nums, int k) {\n        int i = 0,n = nums.length,product = 1,result = 0;\n        for(int j = 0;j<n;j++)\n        {\n            product = product*nums[j];\n            while(i<=j && product>=k)\n            {\n                product = product/nums[i];\n                i++;\n            }\n            result += j-i+1;\n        }\n        return result;\n    }\n}",
        "content": "# Java Code\\n```\\nclass Solution {\\n    public int numSubarrayProductLessThanK(int[] nums, int k) {\\n        int i = 0,n = nums.length,product = 1,result = 0;\\n        for(int j = 0;j<n;j++)\\n        {\\n            product = product*nums[j];\\n            while(i<=j && product>=k)\\n            {\\n                product = product/nums[i];\\n                i++;\\n            }\\n            result += j-i+1;\\n        }\\n        return result;\\n    }\\n}\\n```\\n\\n> ### *Please don\\'t forget to upvote if you\\'ve liked my solution.* \\u2B06\\uFE0F",
        "level": "medium"
    },
    {
        "slug": "maximum-sum-of-an-hourglass",
        "description": "You are given an m x n integer matrix grid.\nWe define an hourglass as a part of the matrix with the following form:\n\nReturn the maximum sum of the elements of an hourglass.\nNote that an hourglass cannot be rotated and must be entirely contained within the matrix.",
        "examples": [
            "Input: grid = [[6,2,1,3],[4,2,1,5],[9,2,8,7],[4,1,2,9]]\nOutput: 30\nExplanation: The cells shown above represent the hourglass with the maximum sum: 6 + 2 + 1 + 2 + 9 + 2 + 8 = 30.",
            "Input: grid = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: 35\nExplanation: There is only one hourglass in the matrix, with the sum: 1 + 2 + 3 + 5 + 7 + 8 + 9 = 35."
        ],
        "constrains": "m == grid.length\nn == grid[i].length\n3 <= m, n <= 150\n0 <= grid[i][j] <= 106",
        "release_time": 1665324662,
        "oracle_code": "class Solution {\n    public int maxSum(int[][] grid) {\n        int max = -1, m = grid.length, n = grid[0].length;\n        for (int row = 0; row < m - 2; row++) {\n            for (int col = 0; col < n - 2; col++) {\n                int temp = grid[row][col] + grid[row][col + 1] + grid[row][col + 2];\n                temp += grid[row + 1][col + 1];\n                temp += grid[row + 2][col] + grid[row + 2][col + 1] + grid[row + 2][col + 2];\n                if (max < temp) {\n                    max = temp;\n                }\n            }\n        }\n        return max;\n    }\n}",
        "content": "# Code\\n```\\nclass Solution {\\n    public int maxSum(int[][] grid) {\\n        int max = -1, m = grid.length, n = grid[0].length;\\n        for (int row = 0; row < m - 2; row++) {\\n            for (int col = 0; col < n - 2; col++) {\\n                int temp = grid[row][col] + grid[row][col + 1] + grid[row][col + 2];\\n                temp += grid[row + 1][col + 1];\\n                temp += grid[row + 2][col] + grid[row + 2][col + 1] + grid[row + 2][col + 2];\\n                if (max < temp) {\\n                    max = temp;\\n                }\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "maximum-number-of-points-from-grid-queries",
        "description": "You are given an m x n integer matrix grid and an array queries of size k.\nFind an array answer of size k such that for each integer queries[i] you start in the top left cell of the matrix and repeat the following process:\n\nIf queries[i] is strictly greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any adjacent cell in all 4 directions: up, down, left, and right.\nOtherwise, you do not get any points, and you end this process.\n\nAfter the process, answer[i] is the maximum number of points you can get. Note that for each query you are allowed to visit the same cell multiple times.\nReturn the resulting array answer.",
        "examples": [
            "Input: grid = [[1,2,3],[2,5,7],[3,5,1]], queries = [5,6,2]\nOutput: [5,8,1]\nExplanation: The diagrams above show which cells we visit to get points for each query.",
            "Input: grid = [[5,2,1],[1,1,2]], queries = [3]\nOutput: [0]\nExplanation: We can not get any points because the value of the top left cell is already greater than or equal to 3."
        ],
        "constrains": "m == grid.length\nn == grid[i].length\n2 <= m, n <= 1000\n4 <= m * n <= 105\nk == queries.length\n1 <= k <= 104\n1 <= grid[i][j], queries[i] <= 106",
        "release_time": 1670731767,
        "oracle_code": "class Solution {\n    public int[] maxPoints(int[][] a, int[] q) {\n        \n        int n = a.length;\n        int m = a[0].length;\n        \n        int l = q.length;\n        int[][] p = new int[l][2];\n        \n        for(int i = 0 ; i < l ; i++) {\n            \n            p[i][0] = i;\n            p[i][1] = q[i];\n        }\n        \n        Arrays.sort(p, (o1,o2)-> {\n            \n            if(o1[1] == o2[1]) {\n                \n                Integer.compare(o1[0],o2[0]);\n            }\n            \n            return Integer.compare(o1[1],o2[1]);\n        });\n        \n        PriorityQueue<int[]> qu = new PriorityQueue<>((o1,o2)->{\n            \n            return Integer.compare(a[o1[0]][o1[1]],a[o2[0]][o2[1]]);\n        });\n        \n        qu.add(new int[]{0,0});\n        \n        boolean[][] v = new boolean[n][m];\n        int cnt = 0;\n        int idx = 0;\n        \n        while(qu.size() > 0 && idx < l) {\n            \n            int[] f = qu.remove();\n            int r = f[0] , c = f[1];\n            \n            if(v[r][c]) continue;\n            \n            v[r][c] = true;\n            \n            if(a[r][c] < p[idx][1]) {\n                \n                cnt++;\n            }\n            else{\n                \n                q[p[idx][0]] = cnt;\n                idx++;\n                qu.add(f);\n                v[r][c] = false;\n                continue;\n            }\n            \n            if(c+1 < m && v[r][c+1] == false) qu.add(new int[]{r,c+1});\n            if(r+1 < n && v[r+1][c] == false) qu.add(new int[]{r+1,c});\n            if(r-1 >=0 && v[r-1][c] == false) qu.add(new int[]{r-1,c});\n            if(c-1 >= 0 && v[r][c-1] == false) qu.add(new int[]{r,c-1});\n        }\n        \n        while(idx < l) {\n            \n            q[p[idx][0]] = cnt;\n            idx++;\n        }\n        \n        return q;\n    }\n}",
        "content": "# Intuition\\nUse the concept of offline query.\\n\\n# Approach\\nFirst sort the query and then use priorityqueue to get min value cell.\\nif value is less than query update count \\nelse cnt is ans for ith query.\\n\\n\\n# Complexity\\n- Time complexity: O(n*m*log(n*m))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n*m)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] maxPoints(int[][] a, int[] q) {\\n        \\n        int n = a.length;\\n        int m = a[0].length;\\n        \\n        int l = q.length;\\n        int[][] p = new int[l][2];\\n        \\n        for(int i = 0 ; i < l ; i++) {\\n            \\n            p[i][0] = i;\\n            p[i][1] = q[i];\\n        }\\n        \\n        Arrays.sort(p, (o1,o2)-> {\\n            \\n            if(o1[1] == o2[1]) {\\n                \\n                Integer.compare(o1[0],o2[0]);\\n            }\\n            \\n            return Integer.compare(o1[1],o2[1]);\\n        });\\n        \\n        PriorityQueue<int[]> qu = new PriorityQueue<>((o1,o2)->{\\n            \\n            return Integer.compare(a[o1[0]][o1[1]],a[o2[0]][o2[1]]);\\n        });\\n        \\n        qu.add(new int[]{0,0});\\n        \\n        boolean[][] v = new boolean[n][m];\\n        int cnt = 0;\\n        int idx = 0;\\n        \\n        while(qu.size() > 0 && idx < l) {\\n            \\n            int[] f = qu.remove();\\n            int r = f[0] , c = f[1];\\n            \\n            if(v[r][c]) continue;\\n            \\n            v[r][c] = true;\\n            \\n            if(a[r][c] < p[idx][1]) {\\n                \\n                cnt++;\\n            }\\n            else{\\n                \\n                q[p[idx][0]] = cnt;\\n                idx++;\\n                qu.add(f);\\n                v[r][c] = false;\\n                continue;\\n            }\\n            \\n            if(c+1 < m && v[r][c+1] == false) qu.add(new int[]{r,c+1});\\n            if(r+1 < n && v[r+1][c] == false) qu.add(new int[]{r+1,c});\\n            if(r-1 >=0 && v[r-1][c] == false) qu.add(new int[]{r-1,c});\\n            if(c-1 >= 0 && v[r][c-1] == false) qu.add(new int[]{r,c-1});\\n        }\\n        \\n        while(idx < l) {\\n            \\n            q[p[idx][0]] = cnt;\\n            idx++;\\n        }\\n        \\n        return q;\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "subtract-the-product-and-sum-of-digits-of-an-integer",
        "description": "Given an integer number n, return the difference between the product of its digits and the sum of its digits.",
        "examples": [
            "Input: n = 234\nOutput: 15 \nExplanation: \nProduct of digits = 2 * 3 * 4 = 24 \nSum of digits = 2 + 3 + 4 = 9 \nResult = 24 - 9 = 15",
            "Input: n = 4421\nOutput: 21\nExplanation: \nProduct of digits = 4 * 4 * 2 * 1 = 32 \nSum of digits = 4 + 4 + 2 + 1 = 11 \nResult = 32 - 11 = 21"
        ],
        "constrains": "1 <= n <= 10^5",
        "release_time": 1683965436,
        "oracle_code": "class Solution {\n    public int subtractProductAndSum(int n) {\n        int prod=1;\n        int sum=0;\n        while(n>0) {\n            int rem=n%10;\n            sum+=rem;\n            prod*=rem;\n            n/=10;\n        }\n        return prod-sum;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int subtractProductAndSum(int n) {\\n        int prod=1;\\n        int sum=0;\\n        while(n>0) {\\n            int rem=n%10;\\n            sum+=rem;\\n            prod*=rem;\\n            n/=10;\\n        }\\n        return prod-sum;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "minimum-distance-to-the-target-element",
        "description": "Given an integer array nums (0-indexed) and two integers target and start, find an index i such that nums[i] == target and abs(i - start) is minimized. Note that\u00a0abs(x)\u00a0is the absolute value of x.\nReturn abs(i - start).\nIt is guaranteed that target exists in nums.",
        "examples": [
            "Input: nums = [1,2,3,4,5], target = 5, start = 3\nOutput: 1\nExplanation: nums[4] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1.",
            "Input: nums = [1], target = 1, start = 0\nOutput: 0\nExplanation: nums[0] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0.",
            "Input: nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0\nOutput: 0\nExplanation: Every value of nums is 1, but nums[0] minimizes abs(i - start), which is abs(0 - 0) = 0."
        ],
        "constrains": "1 <= nums.length <= 1000\n1 <= nums[i] <= 104\n0 <= start < nums.length\ntarget is in nums.",
        "release_time": 1687435674,
        "oracle_code": "class Solution {\n    public int getMinDistance(int[] nums, int target, int start) {\n     int n = nums.length;\n     int min = Integer.MAX_VALUE;\n     for(int i=0;i<n;i++){\n         if(nums[i]==target){\n          if(Math.abs(i-start)<min){\n              min = Math.abs(i-start);\n          }   \n         }\n     }\n     return min;   \n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n     int n = nums.length;\\n     int min = Integer.MAX_VALUE;\\n     for(int i=0;i<n;i++){\\n         if(nums[i]==target){\\n          if(Math.abs(i-start)<min){\\n              min = Math.abs(i-start);\\n          }   \\n         }\\n     }\\n     return min;   \\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "tuple-with-same-product",
        "description": "Given an array nums of distinct positive integers, return the number of tuples (a, b, c, d) such that a * b = c * d where a, b, c, and d are elements of nums, and a != b != c != d.",
        "examples": [
            "Input: nums = [2,3,4,6]\nOutput: 8\nExplanation: There are 8 valid tuples:\n(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)\n(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)",
            "Input: nums = [1,2,4,5,10]\nOutput: 16\nExplanation: There are 16 valid tuples:\n(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)\n(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)\n(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,5,4)\n(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)"
        ],
        "constrains": "1 <= nums.length <= 1000\n1 <= nums[i] <= 104\nAll elements in nums are distinct.",
        "release_time": 1611201483,
        "oracle_code": "class Solution {\n    public int tupleSameProduct(int[] nums) {\n        \n        if(nums.length < 4){\n            return 0;\n        }\n        \n        int res = 0;\n        \n        HashMap<Integer, Integer> map = new HashMap<>();\n        \n        for(int i = 0; i < nums.length - 1; i++){\n            \n            for(int j = i + 1; j < nums.length; j++){\n                \n                int val = nums[i] * nums[j];\n                map.put(val, map.getOrDefault(val, 0) + 1);\n            }\n        }\n        \n        for(int key : map.keySet()){\n            \n            int val = map.get(key);\n            \n            if(val > 1){\n                res += val * (val - 1) * 4;    // (val * (val - 1) / 2) * 8\n            }\n        }\n        \n        return res;\n    }\n}",
        "content": "Main idea :\\nA possible sequence can have 8 possible arrangements\\na * b = c * d\\nWe can\\'t choose all 4 numbers (a, b, c, d) from the array as it will increase time complexity ( O(n^4) )\\nBut we can choose 2 numbers as O(n^2) solution is allowed because of constraints\\nWe will store the product of a and b in a HashMap corresponding to its frequency(Why : Because then we can compare it with c * d)\\nSince all elements are distinct, there won\\'t be any duplicacy ( a != b != c != d )\\nTo get the solution we have to choose 2 equal products ( Since a * b = c * d ) (a * b = first pair and c * d = second pair)\\nnC2 = n * (n - 1) / 2\\nThen we have to multiply this by 8 because a possible sequence can have 8 arrangements\\n\\n```\\nclass Solution {\\n    public int tupleSameProduct(int[] nums) {\\n        \\n        if(nums.length < 4){\\n            return 0;\\n        }\\n        \\n        int res = 0;\\n        \\n        HashMap<Integer, Integer> map = new HashMap<>();\\n        \\n        for(int i = 0; i < nums.length - 1; i++){\\n            \\n            for(int j = i + 1; j < nums.length; j++){\\n                \\n                int val = nums[i] * nums[j];\\n                map.put(val, map.getOrDefault(val, 0) + 1);\\n            }\\n        }\\n        \\n        for(int key : map.keySet()){\\n            \\n            int val = map.get(key);\\n            \\n            if(val > 1){\\n                res += val * (val - 1) * 4;    // (val * (val - 1) / 2) * 8\\n            }\\n        }\\n        \\n        return res;\\n    }\\n}\\n```\\nIf you liked this post, Please Upvote",
        "level": "medium"
    },
    {
        "slug": "queens-that-can-attack-the-king",
        "description": "On a 0-indexed 8 x 8 chessboard, there can be multiple black queens ad one white king.\nYou are given a 2D integer array queens where queens[i] = [xQueeni, yQueeni] represents the position of the ith black queen on the chessboard. You are also given an integer array king of length 2 where king = [xKing, yKing] represents the position of the white king.\nReturn the coordinates of the black queens that can directly attack the king. You may return the answer in any order.",
        "examples": [
            "Input: queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]\nOutput: [[0,1],[1,0],[3,3]]\nExplanation: The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes).",
            "Input: queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]\nOutput: [[2,2],[3,4],[4,4]]\nExplanation: The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes)."
        ],
        "constrains": "1 <= queens.length < 64\nqueens[i].length == king.length == 2\n0 <= xQueeni, yQueeni, xKing, yKing < 8\nAll the given positions are unique.",
        "release_time": 1604566770,
        "oracle_code": "class Solution {\n    public List<List<Integer>> queensAttacktheKing(int[][] queens, int[] king) {\n        boolean[][] q = new boolean[8][8];\n\t\t//Mark all the positions of queen on a 8 X 8 board.\n        for (int[] queen: queens) {\n            q[queen[0]][queen[1]] = true;\n        }\n        List<List<Integer>> output = new ArrayList<>();\n\t\t//Specify all the moves of the queen\n        int[][] moves = {{-1,-1}, {0,-1}, {1,-1},{1,0}, {1,1}, {0,1}, {-1,1}, {-1,0}};\n        for(int i = 0; i < moves.length; i++){\n            int k = king[0] + moves[i][0];\n            int l = king[1] + moves[i][1];\n            while(k >= 0 && l >=0 && k < 8 && l < 8){\n                if(q[k][l]){\n                    List<Integer> pair = new ArrayList<>();\n                    pair.add(k);\n                    pair.add(l);\n                    output.add(pair);\n                    break;\n                }\n                k = k + moves[i][0];\n                l = l + moves[i][1];\n            }\n        }\n        \n        return output;\n    }\n}",
        "content": "The basic idea here is to move to all the 8 possible directions from king and see if any of the spot is occupied by a queen. If occupied then add that position to output and don\\'t move in that direction since all other queens in that direction will be blocked by this queen.\\n\\n\\n\\n\\n```\\nclass Solution {\\n    public List<List<Integer>> queensAttacktheKing(int[][] queens, int[] king) {\\n        boolean[][] q = new boolean[8][8];\\n\\t\\t//Mark all the positions of queen on a 8 X 8 board.\\n        for (int[] queen: queens) {\\n            q[queen[0]][queen[1]] = true;\\n        }\\n        List<List<Integer>> output = new ArrayList<>();\\n\\t\\t//Specify all the moves of the queen\\n        int[][] moves = {{-1,-1}, {0,-1}, {1,-1},{1,0}, {1,1}, {0,1}, {-1,1}, {-1,0}};\\n        for(int i = 0; i < moves.length; i++){\\n            int k = king[0] + moves[i][0];\\n            int l = king[1] + moves[i][1];\\n            while(k >= 0 && l >=0 && k < 8 && l < 8){\\n                if(q[k][l]){\\n                    List<Integer> pair = new ArrayList<>();\\n                    pair.add(k);\\n                    pair.add(l);\\n                    output.add(pair);\\n                    break;\\n                }\\n                k = k + moves[i][0];\\n                l = l + moves[i][1];\\n            }\\n        }\\n        \\n        return output;\\n    }\\n}\\n\\n```",
        "level": "medium"
    },
    {
        "slug": "smallest-range-covering-elements-from-k-lists",
        "description": "You have k lists of sorted integers in non-decreasing\u00a0order. Find the smallest range that includes at least one number from each of the k lists.\nWe define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.",
        "examples": [
            "Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]\nOutput: [20,24]\nExplanation: \nList 1: [4, 10, 15, 24,26], 24 is in range [20,24].\nList 2: [0, 9, 12, 20], 20 is in range [20,24].\nList 3: [5, 18, 22, 30], 22 is in range [20,24].",
            "Input: nums = [[1,2,3],[1,2,3],[1,2,3]]\nOutput: [1,1]"
        ],
        "constrains": "nums.length == k\n1 <= k <= 3500\n1 <= nums[i].length <= 50\n-105 <= nums[i][j] <= 105\nnums[i]\u00a0is sorted in non-decreasing order.",
        "release_time": 1674752084,
        "oracle_code": "class Solution {\n    public int[] smallestRange(List<List<Integer>> nums) {\n        int k = nums.size();\n        List<Pair<Integer,Integer>> list = new ArrayList<>();\n        for(int i = 0;i<k;i++){\n            List<Integer> l = nums.get(i);\n            for(int nu : l){\n                list.add(new Pair(nu,i));\n            }\n        }\n        \n        Collections.sort(list,(a,b)-> a.getKey()-b.getKey());\n        int[] ans = new int[2];\n        ans[1] = ans[0] = Integer.MAX_VALUE; \n        int i = 0,j=0;\n        List<Integer> store = new ArrayList<>();\n        HashMap<Integer,Integer> mp = new HashMap<>();\n        int totalType = 0;\n        \n        while(j<list.size()){\n            int nu = list.get(j).getKey();\n            int type = list.get(j).getValue();\n            store.add(nu);\n            int val = mp.getOrDefault(type,0);\n            mp.put(type,val+1);\n            totalType++;\n            if(mp.size()<k){\n                j++;\n            }else if(mp.size()==k){\n                if(ans[0]==ans[1] && ans[1] == Integer.MAX_VALUE){\n                    ans[0] = store.get(0);\n                    ans[1] = store.get(store.size()-1);\n                }\n                int dif = store.get(store.size()-1)-store.get(0);\n                if(dif<ans[1]-ans[0]){\n                    ans[0] = store.get(0);\n                    ans[1] = store.get(store.size()-1);\n                }  \n                \n                while(mp.size()==k){\n                    dif = store.get(store.size()-1)-store.get(0);\n                    if(dif<ans[1]-ans[0]){\n                        ans[0] = store.get(0);\n                        ans[1] = store.get(store.size()-1);\n                    }\n                    store.remove(0);\n                    int t = list.get(i).getValue();\n                    int vv = (int) mp.get(t);\n                    mp.put(t,vv-1);\n                    if(vv==1){\n                        mp.remove(t);\n                    }\n                    i++;\n                }\n                \n                j++;\n                \n            }\n   \n        }\n        \n        \n        return ans;\n    }\n}",
        "content": "```\\nclass Solution {\\n    public int[] smallestRange(List<List<Integer>> nums) {\\n        int k = nums.size();\\n        List<Pair<Integer,Integer>> list = new ArrayList<>();\\n        for(int i = 0;i<k;i++){\\n            List<Integer> l = nums.get(i);\\n            for(int nu : l){\\n                list.add(new Pair(nu,i));\\n            }\\n        }\\n        \\n        Collections.sort(list,(a,b)-> a.getKey()-b.getKey());\\n        int[] ans = new int[2];\\n        ans[1] = ans[0] = Integer.MAX_VALUE; \\n        int i = 0,j=0;\\n        List<Integer> store = new ArrayList<>();\\n        HashMap<Integer,Integer> mp = new HashMap<>();\\n        int totalType = 0;\\n        \\n        while(j<list.size()){\\n            int nu = list.get(j).getKey();\\n            int type = list.get(j).getValue();\\n            store.add(nu);\\n            int val = mp.getOrDefault(type,0);\\n            mp.put(type,val+1);\\n            totalType++;\\n            if(mp.size()<k){\\n                j++;\\n            }else if(mp.size()==k){\\n                if(ans[0]==ans[1] && ans[1] == Integer.MAX_VALUE){\\n                    ans[0] = store.get(0);\\n                    ans[1] = store.get(store.size()-1);\\n                }\\n                int dif = store.get(store.size()-1)-store.get(0);\\n                if(dif<ans[1]-ans[0]){\\n                    ans[0] = store.get(0);\\n                    ans[1] = store.get(store.size()-1);\\n                }  \\n                \\n                while(mp.size()==k){\\n                    dif = store.get(store.size()-1)-store.get(0);\\n                    if(dif<ans[1]-ans[0]){\\n                        ans[0] = store.get(0);\\n                        ans[1] = store.get(store.size()-1);\\n                    }\\n                    store.remove(0);\\n                    int t = list.get(i).getValue();\\n                    int vv = (int) mp.get(t);\\n                    mp.put(t,vv-1);\\n                    if(vv==1){\\n                        mp.remove(t);\\n                    }\\n                    i++;\\n                }\\n                \\n                j++;\\n                \\n            }\\n   \\n        }\\n        \\n        \\n        return ans;\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "optimal-partition-of-string",
        "description": "Given a string s, partition the string into one or more substrings such that the characters in each substring are unique. That is, no letter appears in a single substring more than once.\nReturn the minimum number of substrings in such a partition.\nNote that each character should belong to exactly one substring in a partition.",
        "examples": [
            "Input: s = \"abacaba\"\nOutput: 4\nExplanation:\nTwo possible partitions are (\"a\",\"ba\",\"cab\",\"a\") and (\"ab\",\"a\",\"ca\",\"ba\").\nIt can be shown that 4 is the minimum number of substrings needed.",
            "Input: s = \"ssssss\"\nOutput: 6\nExplanation:\nThe only valid partition is (\"s\",\"s\",\"s\",\"s\",\"s\",\"s\")."
        ],
        "constrains": "1 <= s.length <= 105\ns consists of only English lowercase letters.",
        "release_time": 1692452053,
        "oracle_code": "class Solution {\n    public int partitionString(String s) {\n        char[] arr = s.toCharArray();\n        int i = 0;\n        int count = 0;\n        \n        while (i < arr.length) {\n            int j = i + 1;\n            boolean[] seen = new boolean[26]; // To track characters seen in the current substring\n            \n            seen[arr[i] - 'a'] = true; // Mark the first character as seen\n            \n            while (j < arr.length && !seen[arr[j] - 'a']) {\n                seen[arr[j] - 'a'] = true; // Mark new characters as seen\n                j++;\n            }\n            \n            count++; // Increment the count for each substring\n            i = j; // Move i to the next substring\n        }\n        \n        return count;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int partitionString(String s) {\\n        char[] arr = s.toCharArray();\\n        int i = 0;\\n        int count = 0;\\n        \\n        while (i < arr.length) {\\n            int j = i + 1;\\n            boolean[] seen = new boolean[26]; // To track characters seen in the current substring\\n            \\n            seen[arr[i] - \\'a\\'] = true; // Mark the first character as seen\\n            \\n            while (j < arr.length && !seen[arr[j] - \\'a\\']) {\\n                seen[arr[j] - \\'a\\'] = true; // Mark new characters as seen\\n                j++;\\n            }\\n            \\n            count++; // Increment the count for each substring\\n            i = j; // Move i to the next substring\\n        }\\n        \\n        return count;\\n    }\\n}\\n\\n```",
        "level": "medium"
    },
    {
        "slug": "guess-number-higher-or-lower",
        "description": "We are playing the Guess Game. The game is as follows:\nI pick a number from 1 to n. You have to guess which number I picked.\nEvery time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.\nYou call a pre-defined API int guess(int num), which returns three possible results:\n\n-1: Your guess is higher than the number I picked (i.e. num > pick).\n1: Your guess is lower than the number I picked (i.e. num < pick).\n0: your guess is equal to the number I picked (i.e. num == pick).\n\nReturn the number that I picked.",
        "examples": [
            "Input: n = 10, pick = 6\nOutput: 6",
            "Input: n = 1, pick = 1\nOutput: 1",
            "Input: n = 2, pick = 1\nOutput: 1"
        ],
        "constrains": "1 <= n <= 231 - 1\n1 <= pick <= n",
        "release_time": 1689963688,
        "oracle_code": "/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * int guess(int num);\n */\n\npublic class Solution extends GuessGame {\n    public int guessNumber(int n) {\n        int low=0,high=n;\n        while(low<=high)\n        {\n            int mid=low+(high-low)/2;\n            int x= guess(mid);\n            if(x==0) \n            {\n                return mid;\n            }\n            else if(x==-1)\n            {\n                high=mid-1;\n            }\n            else\n            {\n                low = mid+1;\n            }\n        }\n        return -1;\n    }\n}",
        "content": "# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int low=0,high=n;\\n        while(low<=high)\\n        {\\n            int mid=low+(high-low)/2;\\n            int x= guess(mid);\\n            if(x==0) \\n            {\\n                return mid;\\n            }\\n            else if(x==-1)\\n            {\\n                high=mid-1;\\n            }\\n            else\\n            {\\n                low = mid+1;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "sort-even-and-odd-indices-independently",
        "description": "You are given a 0-indexed integer array nums. Rearrange the values of nums according to the following rules:\n\nSort the values at odd indices of nums in non-increasing order.\n\n\t\nFor example, if nums = [4,1,2,3] before this step, it becomes [4,3,2,1] after. The values at odd indices 1 and 3 are sorted in non-increasing order.\n\n\nSort the values at even indices of nums in non-decreasing order.\n\t\nFor example, if nums = [4,1,2,3] before this step, it becomes [2,1,4,3] after. The values at even indices 0 and 2 are sorted in non-decreasing order.\n\n\n\nReturn the array formed after rearranging the values of nums.",
        "examples": [
            "Input: nums = [4,1,2,3]\nOutput: [2,3,4,1]\nExplanation: \nFirst, we sort the values present at odd indices (1 and 3) in non-increasing order.\nSo, nums changes from [4,1,2,3] to [4,3,2,1].\nNext, we sort the values present at even indices (0 and 2) in non-decreasing order.\nSo, nums changes from [4,1,2,3] to [2,3,4,1].\nThus, the array formed after rearranging the values is [2,3,4,1].",
            "Input: nums = [2,1]\nOutput: [2,1]\nExplanation: \nSince there is exactly one odd index and one even index, no rearrangement of values takes place.\nThe resultant array formed is [2,1], which is the same as the initial array."
        ],
        "constrains": "1 <= nums.length <= 100\n1 <= nums[i] <= 100",
        "release_time": 1678770695,
        "oracle_code": "class Solution {\n    public int[] sortEvenOdd(int[] nums) {\n        PriorityQueue<Integer> queue = new PriorityQueue<>();\n        for(int i=0;i<nums.length;i+=2){\n            queue.add(nums[i]);\n        }\n        for(int i=0;i<nums.length;i+=2){\n            nums[i]=queue.poll();\n        }\n        queue = new PriorityQueue<>(new MaxHeap());\n        for(int i=1;i<nums.length;i+=2){\n            queue.add(nums[i]);\n        }\n        for(int i=1;i<nums.length;i+=2){\n            nums[i]=queue.poll();\n        }\n        return nums;\n    }\n}\nclass MaxHeap implements Comparator<Integer>{\n    public int compare(Integer ca,Integer cb){\n        return cb-ca;\n    }\n}",
        "content": "\\n> # Approach\\nLet\\'s use some data structutes to solve this problem,By adding even indexed numbers into MinHeap we can sort the data in ascending order,By adding odd indexed numbers into Maxheap we can sort the data in descending order. \\n<!-- Describe your approach to solving the problem. -->\\n\\n> # Complexity\\n- Time complexity: O(n log(n))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n) for Priority Queue\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n> # Code\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        PriorityQueue<Integer> queue = new PriorityQueue<>();\\n        for(int i=0;i<nums.length;i+=2){\\n            queue.add(nums[i]);\\n        }\\n        for(int i=0;i<nums.length;i+=2){\\n            nums[i]=queue.poll();\\n        }\\n        queue = new PriorityQueue<>(new MaxHeap());\\n        for(int i=1;i<nums.length;i+=2){\\n            queue.add(nums[i]);\\n        }\\n        for(int i=1;i<nums.length;i+=2){\\n            nums[i]=queue.poll();\\n        }\\n        return nums;\\n    }\\n}\\nclass MaxHeap implements Comparator<Integer>{\\n    public int compare(Integer ca,Integer cb){\\n        return cb-ca;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "binary-search-tree-iterator",
        "description": "Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\n\nBSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\nboolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\nint next() Moves the pointer to the right, then returns the number at the pointer.\n\nNotice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\nYou may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.",
        "examples": [
            "Input\n[\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\nOutput\n[null, 3, 7, true, 9, true, 15, true, 20, false]\n\nExplanation\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next();    // return 3\nbSTIterator.next();    // return 7\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 9\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 15\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 20\nbSTIterator.hasNext(); // return False"
        ],
        "constrains": "The number of nodes in the tree is in the range [1, 105].\n0 <= Node.val <= 106\nAt most 105 calls will be made to hasNext, and next.",
        "release_time": 1678769853,
        "oracle_code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass BSTIterator {\n    Stack<TreeNode>s=new Stack<TreeNode>();\n    public BSTIterator(TreeNode root) {\n        pushAll(root);\n    }\n    \n    public int next() {\n        TreeNode temp=s.pop();\n        pushAll(temp.right);\n        return temp.val;\n    }\n    \n    public boolean hasNext() {\n        return !s.isEmpty();\n    }\n    public void pushAll(TreeNode node){\n        while(node!=null){\n            s.push(node);\n            node=node.left;\n        }\n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator obj = new BSTIterator(root);\n * int param_1 = obj.next();\n * boolean param_2 = obj.hasNext();\n */",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(H)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass BSTIterator {\\n    Stack<TreeNode>s=new Stack<TreeNode>();\\n    public BSTIterator(TreeNode root) {\\n        pushAll(root);\\n    }\\n    \\n    public int next() {\\n        TreeNode temp=s.pop();\\n        pushAll(temp.right);\\n        return temp.val;\\n    }\\n    \\n    public boolean hasNext() {\\n        return !s.isEmpty();\\n    }\\n    public void pushAll(TreeNode node){\\n        while(node!=null){\\n            s.push(node);\\n            node=node.left;\\n        }\\n    }\\n}\\n\\n/**\\n * Your BSTIterator object will be instantiated and called as such:\\n * BSTIterator obj = new BSTIterator(root);\\n * int param_1 = obj.next();\\n * boolean param_2 = obj.hasNext();\\n */\\n```",
        "level": "medium"
    },
    {
        "slug": "minimum-amount-of-time-to-fill-cups",
        "description": "You have a water dispenser that can dispense cold, warm, and hot water. Every second, you can either fill up 2 cups with different types of water, or 1 cup of any type of water.\nYou are given a 0-indexed integer array amount of length 3 where amount[0], amount[1], and amount[2] denote the number of cold, warm, and hot water cups you need to fill respectively. Return the minimum number of seconds needed to fill up all the cups.",
        "examples": [
            "Input: amount = [1,4,2]\nOutput: 4\nExplanation: One way to fill up the cups is:\nSecond 1: Fill up a cold cup and a warm cup.\nSecond 2: Fill up a warm cup and a hot cup.\nSecond 3: Fill up a warm cup and a hot cup.\nSecond 4: Fill up a warm cup.\nIt can be proven that 4 is the minimum number of seconds needed.",
            "Input: amount = [5,4,4]\nOutput: 7\nExplanation: One way to fill up the cups is:\nSecond 1: Fill up a cold cup, and a hot cup.\nSecond 2: Fill up a cold cup, and a warm cup.\nSecond 3: Fill up a cold cup, and a warm cup.\nSecond 4: Fill up a warm cup, and a hot cup.\nSecond 5: Fill up a cold cup, and a hot cup.\nSecond 6: Fill up a cold cup, and a warm cup.\nSecond 7: Fill up a hot cup.",
            "Input: amount = [5,0,0]\nOutput: 5\nExplanation: Every second, we fill up a cold cup."
        ],
        "constrains": "amount.length == 3\n0 <= amount[i] <= 100",
        "release_time": 1674567895,
        "oracle_code": "class Solution {\n    public int fillCups(int[] amount) {\n        Arrays.sort(amount);\n        int ans = 0;\n        int lo=0, hi=2;\n        if(amount[0] == 0) lo++;\n        if(lo==1 && amount[1]==0) return amount[2];\n\n        else if(lo==1){\n            ans += amount[hi];\n            return ans;\n        }\n        while(amount[lo] != 0){\n            ans++;\n            amount[lo]--;\n            amount[hi]--;\n            if(amount[hi-1] > amount[hi]){\n                int temp = amount[hi-1];\n                amount[hi-1] = amount[hi];\n                amount[hi] = temp;\n            }\n        }\n\n        ans += amount[2];\n        return ans;\n    }\n}",
        "content": "# Intuition\\nJust keep filling the least and most required cups together\\n\\n# Approach\\nSort the array. Keep removing the smallest value and the largest value by 1, until the smallest one is zero, then increase the answer by the left out max value\\n\\n# Complexity\\n- Time complexity:\\nO(smallest value)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int fillCups(int[] amount) {\\n        Arrays.sort(amount);\\n        int ans = 0;\\n        int lo=0, hi=2;\\n        if(amount[0] == 0) lo++;\\n        if(lo==1 && amount[1]==0) return amount[2];\\n\\n        else if(lo==1){\\n            ans += amount[hi];\\n            return ans;\\n        }\\n        while(amount[lo] != 0){\\n            ans++;\\n            amount[lo]--;\\n            amount[hi]--;\\n            if(amount[hi-1] > amount[hi]){\\n                int temp = amount[hi-1];\\n                amount[hi-1] = amount[hi];\\n                amount[hi] = temp;\\n            }\\n        }\\n\\n        ans += amount[2];\\n        return ans;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "jump-game-iv",
        "description": "Given an array of\u00a0integers arr, you are initially positioned at the first index of the array.\nIn one step you can jump from index i to index:\n\ni + 1 where:\u00a0i + 1 < arr.length.\ni - 1 where:\u00a0i - 1 >= 0.\nj where: arr[i] == arr[j] and i != j.\n\nReturn the minimum number of steps to reach the last index of the array.\nNotice that you can not jump outside of the array at any time.",
        "examples": [
            "Input: arr = [100,-23,-23,404,100,23,23,23,3,404]\nOutput: 3\nExplanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.",
            "Input: arr = [7]\nOutput: 0\nExplanation: Start index is the last index. You do not need to jump.",
            "Input: arr = [7,6,9,6,9,6,9,7]\nOutput: 1\nExplanation: You can jump directly from index 0 to index 7 which is last index of the array."
        ],
        "constrains": "1 <= arr.length <= 5 * 104\n-108 <= arr[i] <= 108",
        "release_time": 1677998298,
        "oracle_code": "class Solution {\n    public int minJumps(int[] arr) {\n        Map<Integer,ArrayList<Integer>>hm=new HashMap<>();\n        for(int i=0;i<arr.length;i++){\n            if(hm.containsKey(arr[i])){\n                ArrayList<Integer>al=hm.get(arr[i]);\n                al.add(i);\n                hm.put(arr[i],al);\n            }\n            else{\n                ArrayList<Integer>al=new ArrayList<>();\n                al.add(i);\n                hm.put(arr[i],al);\n            }\n        }\n        boolean vis[]=new boolean[arr.length];\n        Queue<Integer>q=new LinkedList<>();\n        q.add(0);\n        int cnt=0;\n        while(!q.isEmpty()){\n            for(int k=q.size();k>0;k--){\n                int n=q.remove();\n                vis[n]=true;\n                if(n==arr.length-1) return cnt;\n                ArrayList<Integer>al=hm.get(arr[n]);\n                al.add(n-1);\n                al.add(n+1);\n                for(int i:al){\n                    if(i>=0&&i<arr.length&&!vis[i]){\n                        q.add(i);\n                    }\n                }\n                al.clear();\n            }\n            cnt++;\n        }\n        return 0;\n    }\n}",
        "content": "# Code\\n```\\nclass Solution {\\n    public int minJumps(int[] arr) {\\n        Map<Integer,ArrayList<Integer>>hm=new HashMap<>();\\n        for(int i=0;i<arr.length;i++){\\n            if(hm.containsKey(arr[i])){\\n                ArrayList<Integer>al=hm.get(arr[i]);\\n                al.add(i);\\n                hm.put(arr[i],al);\\n            }\\n            else{\\n                ArrayList<Integer>al=new ArrayList<>();\\n                al.add(i);\\n                hm.put(arr[i],al);\\n            }\\n        }\\n        boolean vis[]=new boolean[arr.length];\\n        Queue<Integer>q=new LinkedList<>();\\n        q.add(0);\\n        int cnt=0;\\n        while(!q.isEmpty()){\\n            for(int k=q.size();k>0;k--){\\n                int n=q.remove();\\n                vis[n]=true;\\n                if(n==arr.length-1) return cnt;\\n                ArrayList<Integer>al=hm.get(arr[n]);\\n                al.add(n-1);\\n                al.add(n+1);\\n                for(int i:al){\\n                    if(i>=0&&i<arr.length&&!vis[i]){\\n                        q.add(i);\\n                    }\\n                }\\n                al.clear();\\n            }\\n            cnt++;\\n        }\\n        return 0;\\n    }\\n}\\n```\\nUPVOTE IF U LIKE THE APPROACH",
        "level": "hard"
    },
    {
        "slug": "clone-graph",
        "description": "Given a reference of a node in a connected undirected graph.\nReturn a deep copy (clone) of the graph.\nEach node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\n\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n}\n\n\u00a0\nTest case format:\nFor simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.\nAn adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\nThe given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.",
        "examples": [
            "Input: adjList = [[2,4],[1,3],[2,4],[1,3]]\nOutput: [[2,4],[1,3],[2,4],[1,3]]\nExplanation: There are 4 nodes in the graph.\n1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).",
            "Input: adjList = [[]]\nOutput: [[]]\nExplanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.",
            "Input: adjList = []\nOutput: []\nExplanation: This an empty graph, it does not have any nodes."
        ],
        "constrains": "The number of nodes in the graph is in the range [0, 100].\n1 <= Node.val <= 100\nNode.val is unique for each node.\nThere are no repeated edges and no self-loops in the graph.\nThe Graph is connected and all nodes can be visited starting from the given node.",
        "release_time": 1680964761,
        "oracle_code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    public void dfs(Node node, HashMap<Node, Node> dict)\n    {\n        for (Node nd : node.neighbors) {\n            if (!dict.containsKey(nd))\n                dict.put(nd, new Node(nd.val));\n            dict.get(node).neighbors.add(dict.get(nd));\n        }\n        for (Node nd : node.neighbors)\n        {\n            if (dict.get(nd).neighbors.size() == 0)\n                dfs(nd, dict);\n        }\n    }\n    public Node cloneGraph(Node node) {\n        HashMap<Node, Node> dict = new HashMap<>();\n        if (node != null) {\n            dict.put(node, new Node(node.val));\n            dfs(node, dict);\n            return dict.get(node);\n        }\n        return null;\n    }\n}",
        "content": "\\n```\\n/*\\n// Definition for a Node.\\nclass Node {\\n    public int val;\\n    public List<Node> neighbors;\\n    public Node() {\\n        val = 0;\\n        neighbors = new ArrayList<Node>();\\n    }\\n    public Node(int _val) {\\n        val = _val;\\n        neighbors = new ArrayList<Node>();\\n    }\\n    public Node(int _val, ArrayList<Node> _neighbors) {\\n        val = _val;\\n        neighbors = _neighbors;\\n    }\\n}\\n*/\\n\\nclass Solution {\\n    public void dfs(Node node, HashMap<Node, Node> dict)\\n    {\\n        for (Node nd : node.neighbors) {\\n            if (!dict.containsKey(nd))\\n                dict.put(nd, new Node(nd.val));\\n            dict.get(node).neighbors.add(dict.get(nd));\\n        }\\n        for (Node nd : node.neighbors)\\n        {\\n            if (dict.get(nd).neighbors.size() == 0)\\n                dfs(nd, dict);\\n        }\\n    }\\n    public Node cloneGraph(Node node) {\\n        HashMap<Node, Node> dict = new HashMap<>();\\n        if (node != null) {\\n            dict.put(node, new Node(node.val));\\n            dfs(node, dict);\\n            return dict.get(node);\\n        }\\n        return null;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "count-good-nodes-in-binary-tree",
        "description": "Given a binary tree root, a node X in the tree is named\u00a0good if in the path from root to X there are no nodes with a value greater than X.\nReturn the number of good nodes in the binary tree.",
        "examples": [
            "Input: root = [3,1,4,3,null,1,5]\r\nOutput: 4\r\nExplanation: Nodes in blue are good.\r\nRoot Node (3) is always a good node.\r\nNode 4 -> (3,4) is the maximum value in the path starting from the root.\r\nNode 5 -> (3,4,5) is the maximum value in the path\r\nNode 3 -> (3,1,3) is the maximum value in the path.",
            "Input: root = [3,3,null,4,2]\r\nOutput: 3\r\nExplanation: Node 2 -> (3, 3, 2) is not good, because \"3\" is higher than it.",
            "Input: root = [1]\r\nOutput: 1\r\nExplanation: Root is considered as good."
        ],
        "constrains": "The number of nodes in the binary tree is in the range\u00a0[1, 10^5].\nEach node's value is between [-10^4, 10^4].",
        "release_time": 1690560837,
        "oracle_code": "class Solution {\n    int count = 0;\n    \n    public void countGoodNodes(TreeNode root, int maximum) {\n            if(root!=null) {\n                if (maximum <= root.val) {\n                    maximum = root.val;\n                    count++;\n                }\n            countGoodNodes(root.left,maximum);\n            countGoodNodes(root.right, maximum);\n        } \n    }\n\n    public int goodNodes(TreeNode root) {\n        int maximum = root.val;\n        countGoodNodes(root,  maximum);\n        return count;\n    }\n}",
        "content": "# Code\\n```\\nclass Solution {\\n    int count = 0;\\n    \\n    public void countGoodNodes(TreeNode root, int maximum) {\\n            if(root!=null) {\\n                if (maximum <= root.val) {\\n                    maximum = root.val;\\n                    count++;\\n                }\\n            countGoodNodes(root.left,maximum);\\n            countGoodNodes(root.right, maximum);\\n        } \\n    }\\n\\n    public int goodNodes(TreeNode root) {\\n        int maximum = root.val;\\n        countGoodNodes(root,  maximum);\\n        return count;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "populating-next-right-pointers-in-each-node",
        "description": "You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\n\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\nInitially, all next pointers are set to NULL.",
        "examples": [
            "Input: root = [1,2,3,4,5,6,7]\nOutput: [1,#,2,3,#,4,5,6,7,#]\nExplanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.",
            "Input: root = []\nOutput: []"
        ],
        "constrains": "The number of nodes in the tree is in the range [0, 212 - 1].\n-1000 <= Node.val <= 1000\n\n\u00a0\nFollow-up:\n\nYou may only use constant extra space.\nThe recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.",
        "release_time": 1681981449,
        "oracle_code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node next;\n\n    public Node() {}\n    \n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, Node _left, Node _right, Node _next) {\n        val = _val;\n        left = _left;\n        right = _right;\n        next = _next;\n    }\n};\n*/\n\nclass Solution {\n    \n    public static void convert(List<Node> ca){\n\n        for(int i = 0;i<ca.size() - 1;i++){\n            ca.get(i).next = ca.get(i+1);\n\n        }\n        ca.get(ca.size()-1).next = null;\n        \n    }   \n\n    public static void helper(Node node){\n        \n        if(node == null){\n            return;\n        }\n\n        Queue<Node> q = new LinkedList<>();\n\n        List<Node> ca = new ArrayList<>();\n\n        q.add(node);\n\n        while(q.size() > 0){\n            int count = q.size();\n            for(int i = 0;i<count;i++){\n                Node rem = q.remove();\n                ca.add(rem);\n                if(rem.left != null){\n                    q.add(rem.left);\n                }\n                if(rem.right != null){\n                    q.add(rem.right);\n                }\n\n            }\n            convert(ca);\n            ca = new ArrayList<>();\n        }\n\n\n    }\n    \n    \n    public Node connect(Node root) {\n        helper(root);\n        return root;\n    }\n}",
        "content": "# Approach\\n- Create a new user defined function called helper that will do all the setting up of the next.pointers\\n- In the helper function, define a queue and an arraylist named q and child array respectively.\\n- The progression through each level will be simple, that is --> Take the root node, pass it in the queue and while the queue is not empty, empty out the whole level as you check for children of each node you remove.\\n- Append the children in the child array and connect all the next pointers in the child array to the other one with a new user defined function called convert.\\n- Add all the left and right nodes if they exist to the queue.\\n- Voila, all the next connections are done.\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(n)\\n\\n# Code\\n```\\n/*\\n// Definition for a Node.\\nclass Node {\\n    public int val;\\n    public Node left;\\n    public Node right;\\n    public Node next;\\n\\n    public Node() {}\\n    \\n    public Node(int _val) {\\n        val = _val;\\n    }\\n\\n    public Node(int _val, Node _left, Node _right, Node _next) {\\n        val = _val;\\n        left = _left;\\n        right = _right;\\n        next = _next;\\n    }\\n};\\n*/\\n\\nclass Solution {\\n    \\n    public static void convert(List<Node> ca){\\n\\n        for(int i = 0;i<ca.size() - 1;i++){\\n            ca.get(i).next = ca.get(i+1);\\n\\n        }\\n        ca.get(ca.size()-1).next = null;\\n        \\n    }   \\n\\n    public static void helper(Node node){\\n        \\n        if(node == null){\\n            return;\\n        }\\n\\n        Queue<Node> q = new LinkedList<>();\\n\\n        List<Node> ca = new ArrayList<>();\\n\\n        q.add(node);\\n\\n        while(q.size() > 0){\\n            int count = q.size();\\n            for(int i = 0;i<count;i++){\\n                Node rem = q.remove();\\n                ca.add(rem);\\n                if(rem.left != null){\\n                    q.add(rem.left);\\n                }\\n                if(rem.right != null){\\n                    q.add(rem.right);\\n                }\\n\\n            }\\n            convert(ca);\\n            ca = new ArrayList<>();\\n        }\\n\\n\\n    }\\n    \\n    \\n    public Node connect(Node root) {\\n        helper(root);\\n        return root;\\n    }\\n}\\n```\\n\\n![images.jpeg](https://assets.leetcode.com/users/images/f3a43c1f-7852-4199-989f-1ef61f24348d_1681981342.642561.jpeg)\\n",
        "level": "medium"
    },
    {
        "slug": "jewels-and-stones",
        "description": "You're given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. Each character in stones is a type of stone you have. You want to know how many of the stones you have are also jewels.\nLetters are case sensitive, so \"a\" is considered a different type of stone from \"A\".",
        "examples": [
            "Input: jewels = \"aA\", stones = \"aAAbbbb\"\nOutput: 3",
            "Input: jewels = \"z\", stones = \"ZZ\"\nOutput: 0"
        ],
        "constrains": "1 <=\u00a0jewels.length, stones.length <= 50\njewels and stones consist of only English letters.\nAll the characters of\u00a0jewels are unique.",
        "release_time": 1689949381,
        "oracle_code": "class Solution {\n    public int numJewelsInStones(String jewels, String stones) {\n        int count = 0;\n\n        for(int i=0; i<stones.length(); i++){\n            char c = stones.charAt(i);\n            if(jewels.contains(String.valueOf(c))){\n                count++;\n            }\n        }\n        return count;\n    }\n}",
        "content": "# Code\\n```\\nclass Solution {\\n    public int numJewelsInStones(String jewels, String stones) {\\n        int count = 0;\\n\\n        for(int i=0; i<stones.length(); i++){\\n            char c = stones.charAt(i);\\n            if(jewels.contains(String.valueOf(c))){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "stamping-the-grid",
        "description": "You are given an m x n binary matrix grid where each cell is either 0 (empty) or 1 (occupied).\nYou are then given stamps of size stampHeight x stampWidth. We want to fit the stamps such that they follow the given restrictions and requirements:\n\nCover all the empty cells.\nDo not cover any of the occupied cells.\nWe can put as many stamps as we want.\nStamps can overlap with each other.\nStamps are not allowed to be rotated.\nStamps must stay completely inside the grid.\n\nReturn true if it is possible to fit the stamps while following the given restrictions and requirements. Otherwise, return false.",
        "examples": [
            "Input: grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampHeight = 4, stampWidth = 3\nOutput: true\nExplanation: We have two overlapping stamps (labeled 1 and 2 in the image) that are able to cover all the empty cells.",
            "Input: grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampHeight = 2, stampWidth = 2 \nOutput: false \nExplanation: There is no way to fit the stamps onto all the empty cells without the stamps going outside the grid."
        ],
        "constrains": "m == grid.length\nn == grid[r].length\n1 <= m, n <= 105\n1 <= m * n <= 2 * 105\ngrid[r][c] is either 0 or 1.\n1 <= stampHeight, stampWidth <= 105",
        "release_time": 1641658225,
        "oracle_code": "public class Solution {\n    private static final int FILLED = 1;\n\n    public boolean possibleToStamp(int[][] grid, int stampHeight, int stampWidth) {\n        // fill empty space with negative number, which indicates consecutive number of rows that have been empty\n        int height = grid.length, width = grid[0].length;\n        int[] pre = new int[width];\n        Arrays.fill(pre, 1);\n        for (int r = 0; r < height; r++) {\n            for (int c = 0; c < width; c++) {\n                if (grid[r][c] != FILLED) {\n                    grid[r][c] = pre[c] == 1 ? -1: Math.max(pre[c] - 1, -stampHeight);\n                }\n            }\n            pre = grid[r];\n        }\n\n        // scan each height, and once we find consecutive `grid` of `-stampHeight` of length `stampWidth` or longer,\n        // replace the `grid` value with `FILLED`\n        for (int r = stampHeight - 1; r < height; r++) {\n            int cnt = 0;\n            for (int c = 0; c < width; c++) {\n                if (grid[r][c] == -stampHeight) cnt++;\n                else cnt = 0;\n                if (cnt == stampWidth) fill(grid, r, c, stampHeight, stampWidth);\n                if (cnt > stampWidth) fill(grid, r, c, stampHeight, 1);\n                // width set to 1 for performance; the previous width 0 - cnt would have been already filled\n            }\n        }\n\n        // check if there is remaining cell of value that is not `FILLED`\n        for (int[] ints : grid) {\n            for (int v: ints) {\n                if (v != FILLED) return false;\n            }\n        }\n        return true;\n    }\n\n    private void fill(int[][] grid, int r, int c, int height, int width) {\n        for (int i = c - width + 1; i <= c; i++) {\n            int j = r;\n            while (j >= r - height + 1 && grid[j][i] != FILLED)\n                grid[j--][i] = FILLED;\n        }\n    }\n}",
        "content": "I recorded consecutive empty rows, filled all fillable spots by 1, and then confirmed if everything is filled\\nPlease see the comments for more detailed explanation\\n\\nGiven grid of size `m` x `n`\\nTime Complexity O(mn)\\nMemory O(n) since we use the existing grid // need pre = O(n)\\n\\n```\\npublic class Solution {\\n    private static final int FILLED = 1;\\n\\n    public boolean possibleToStamp(int[][] grid, int stampHeight, int stampWidth) {\\n        // fill empty space with negative number, which indicates consecutive number of rows that have been empty\\n        int height = grid.length, width = grid[0].length;\\n        int[] pre = new int[width];\\n        Arrays.fill(pre, 1);\\n        for (int r = 0; r < height; r++) {\\n            for (int c = 0; c < width; c++) {\\n                if (grid[r][c] != FILLED) {\\n                    grid[r][c] = pre[c] == 1 ? -1: Math.max(pre[c] - 1, -stampHeight);\\n                }\\n            }\\n            pre = grid[r];\\n        }\\n\\n        // scan each height, and once we find consecutive `grid` of `-stampHeight` of length `stampWidth` or longer,\\n        // replace the `grid` value with `FILLED`\\n        for (int r = stampHeight - 1; r < height; r++) {\\n            int cnt = 0;\\n            for (int c = 0; c < width; c++) {\\n                if (grid[r][c] == -stampHeight) cnt++;\\n                else cnt = 0;\\n                if (cnt == stampWidth) fill(grid, r, c, stampHeight, stampWidth);\\n                if (cnt > stampWidth) fill(grid, r, c, stampHeight, 1);\\n                // width set to 1 for performance; the previous width 0 - cnt would have been already filled\\n            }\\n        }\\n\\n        // check if there is remaining cell of value that is not `FILLED`\\n        for (int[] ints : grid) {\\n            for (int v: ints) {\\n                if (v != FILLED) return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    private void fill(int[][] grid, int r, int c, int height, int width) {\\n        for (int i = c - width + 1; i <= c; i++) {\\n            int j = r;\\n            while (j >= r - height + 1 && grid[j][i] != FILLED)\\n                grid[j--][i] = FILLED;\\n        }\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "special-array-with-x-elements-greater-than-or-equal-x",
        "description": "You are given an array nums of non-negative integers. nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x.\nNotice that x does not have to be an element in nums.\nReturn x if the array is special, otherwise, return -1. It can be proven that if nums is special, the value for x is unique.",
        "examples": [
            "Input: nums = [3,5]\nOutput: 2\nExplanation: There are 2 values (3 and 5) that are greater than or equal to 2.",
            "Input: nums = [0,0]\nOutput: -1\nExplanation: No numbers fit the criteria for x.\nIf x = 0, there should be 0 numbers >= x, but there are 2.\nIf x = 1, there should be 1 number >= x, but there are 0.\nIf x = 2, there should be 2 numbers >= x, but there are 0.\nx cannot be greater since there are only 2 numbers in nums.",
            "Input: nums = [0,4,3,0,4]\nOutput: 3\nExplanation: There are 3 values that are greater than or equal to 3."
        ],
        "constrains": "1 <= nums.length <= 100\n0 <= nums[i] <= 1000",
        "release_time": 1691442100,
        "oracle_code": "class Solution {\n    public int countPossibility(int []nums,int x){\n        int cnt=0;\n        for(int n:nums) if(n>=x) cnt++;\n        return cnt;\n    }\n    public int specialArray(int[] nums) {\n        int maxi=Integer.MIN_VALUE,start=1,mid=0;\n        for(int x:nums) maxi=Math.max(maxi,x);\n        int end = maxi;\n        while(start<=end){\n            mid = (start+end)/2;\n            int check = countPossibility(nums,mid);\n            if(check==mid) return mid;\n            if(mid<check) start=mid+1;\n            else end=mid-1;\n        }\n        return -1;\n    }\n}",
        "content": "# Intuition\\n  First of all we will discuss Why Binary Search, even if the array is not sorted . Look here the array is not sorted but lemme tell you if we have some range so we can definitely apply binary search on range because range is something which will always be in a sorted fashion for example suppose we have the range [5,20] so here 5 to 20 means 5,6,7,8,9,10...till 20 which is sorted in itself. So remember we can apply Binary Search on **range** too.\\n\\nNow, here the array is not sorted so what left? Can we figure out some range? Yes we definitely can !! Just observe this atleast we will be having 1 such element which will be greater than other elements , right? so our range will definitely start from 1 now what will be the ending point ? It will definitely be the maximum element of an array. Now we have the range [1,max_element] on which we can apply Binary Search.\\n\\nNow we can apply standard binary search algorithm here which consist of 4 steps :\\nStep 1 : Calculate the mid point.\\nStep 2 : If the mid meets the desire result we will simply returns it.\\nStep 3 : a) If the mid has more greater number than obviously the numbers which are present before to mid will also has the greater numbers so in this situation it would be like a time waste to search in the left half , rather we can reduce our search space and will eliminate the left half and can jump to the right half.\\nStep 4 : b) Otherwise we will simply jump to left part instead of searching in right half.\\n\\n# Approach\\n  Binary Search Algorithm.\\n\\n# Complexity\\n- Time complexity:\\n  O(max)*logn\\n\\n- Space complexity:\\n  O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPossibility(int []nums,int x){\\n        int cnt=0;\\n        for(int n:nums) if(n>=x) cnt++;\\n        return cnt;\\n    }\\n    public int specialArray(int[] nums) {\\n        int maxi=Integer.MIN_VALUE,start=1,mid=0;\\n        for(int x:nums) maxi=Math.max(maxi,x);\\n        int end = maxi;\\n        while(start<=end){\\n            mid = (start+end)/2;\\n            int check = countPossibility(nums,mid);\\n            if(check==mid) return mid;\\n            if(mid<check) start=mid+1;\\n            else end=mid-1;\\n        }\\n        return -1;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "count-common-words-with-one-occurrence",
        "description": "Given two string arrays words1 and words2, return the number of strings that appear exactly once in each\u00a0of the two arrays.",
        "examples": [
            "Input: words1 = [\"leetcode\",\"is\",\"amazing\",\"as\",\"is\"], words2 = [\"amazing\",\"leetcode\",\"is\"]\nOutput: 2\nExplanation:\n- \"leetcode\" appears exactly once in each of the two arrays. We count this string.\n- \"amazing\" appears exactly once in each of the two arrays. We count this string.\n- \"is\" appears in each of the two arrays, but there are 2 occurrences of it in words1. We do not count this string.\n- \"as\" appears once in words1, but does not appear in words2. We do not count this string.\nThus, there are 2 strings that appear exactly once in each of the two arrays.",
            "Input: words1 = [\"b\",\"bb\",\"bbb\"], words2 = [\"a\",\"aa\",\"aaa\"]\nOutput: 0\nExplanation: There are no strings that appear in each of the two arrays.",
            "Input: words1 = [\"a\",\"ab\"], words2 = [\"a\",\"a\",\"a\",\"ab\"]\nOutput: 1\nExplanation: The only string that appears exactly once in each of the two arrays is \"ab\"."
        ],
        "constrains": "1 <= words1.length, words2.length <= 1000\n1 <= words1[i].length, words2[j].length <= 30\nwords1[i] and words2[j] consists only of lowercase English letters.",
        "release_time": 1685170196,
        "oracle_code": "class Solution {\n    public int countWords(String[] words1, String[] words2) {\n        Map<String, Integer> map1 = new HashMap<>();\n        Map<String, Integer> map2 = new HashMap<>();\n\n        for (String s: words1){\n            if(map1.containsKey(s)) map1.put(s, map1.get(s)+1);\n            else map1.put(s, 1);\n        }\n        for (String s: words2){\n            if(map2.containsKey(s)) map2.put(s, map2.get(s)+1);\n            else map2.put(s, 1);\n        }\n        int count = 0;\n        for(String i : words1){\n            if(map1.get(i) == 1 && map2.getOrDefault(i,0) == 1 ){\n                count++;\n            }\n        }\n\n        return count;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countWords(String[] words1, String[] words2) {\\n        Map<String, Integer> map1 = new HashMap<>();\\n        Map<String, Integer> map2 = new HashMap<>();\\n\\n        for (String s: words1){\\n            if(map1.containsKey(s)) map1.put(s, map1.get(s)+1);\\n            else map1.put(s, 1);\\n        }\\n        for (String s: words2){\\n            if(map2.containsKey(s)) map2.put(s, map2.get(s)+1);\\n            else map2.put(s, 1);\\n        }\\n        int count = 0;\\n        for(String i : words1){\\n            if(map1.get(i) == 1 && map2.getOrDefault(i,0) == 1 ){\\n                count++;\\n            }\\n        }\\n\\n        return count;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "max-consecutive-ones",
        "description": "Given a binary array nums, return the maximum number of consecutive 1's in the array.",
        "examples": [
            "Input: nums = [1,1,0,1,1,1]\nOutput: 3\nExplanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.",
            "Input: nums = [1,0,1,1,0,1]\nOutput: 2"
        ],
        "constrains": "1 <= nums.length <= 105\nnums[i] is either 0 or 1.",
        "release_time": 1676866256,
        "oracle_code": "class Solution {\n    public int findMaxConsecutiveOnes(int[] nums) {\n        int count=0;\n        int max=0;\n        for(int i=0;i<nums.length;i++){\n            if(nums[i]==1){\n                count++;\n            }else{\n                count=0;\n            }\n            max=Math.max(count,max);\n        }\n        return max;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findMaxConsecutiveOnes(int[] nums) {\\n        int count=0;\\n        int max=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==1){\\n                count++;\\n            }else{\\n                count=0;\\n            }\\n            max=Math.max(count,max);\\n        }\\n        return max;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "perfect-number",
        "description": "A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that can divide x evenly.\nGiven an integer n, return true if n is a perfect number, otherwise return false.",
        "examples": [
            "Input: num = 28\nOutput: true\nExplanation: 28 = 1 + 2 + 4 + 7 + 14\n1, 2, 4, 7, and 14 are all divisors of 28.",
            "Input: num = 7\nOutput: false"
        ],
        "constrains": "1 <= num <= 108",
        "release_time": 1683370625,
        "oracle_code": "class Solution {\n    public boolean checkPerfectNumber(int num) {\n        if(num==1){\n            return false;\n        }\n        int sum=1;\n        for(int i =2 ;i*i<=num;i++){\n            if(num%i==0){\n                sum+=i+ num/i;  \n            }\n        }\n        if(num==sum){\n            return true;\n        }\n        return false;\n    }\n}",
        "content": "![image.png](https://assets.leetcode.com/users/images/9efca421-50e2-4af1-94b6-5c5dcba4cc28_1683370607.0372207.png)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean checkPerfectNumber(int num) {\\n        if(num==1){\\n            return false;\\n        }\\n        int sum=1;\\n        for(int i =2 ;i*i<=num;i++){\\n            if(num%i==0){\\n                sum+=i+ num/i;  \\n            }\\n        }\\n        if(num==sum){\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\\n```",
        "level": "easy"
    },
    {
        "slug": "minimize-the-maximum-difference-of-pairs",
        "description": "You are given a 0-indexed integer array nums and an integer p. Find p pairs of indices of nums such that the maximum difference amongst all the pairs is minimized. Also, ensure no index appears more than once amongst the p pairs.\nNote that for a pair of elements at the index i and j, the difference of this pair is |nums[i] - nums[j]|, where |x| represents the absolute value of x.\nReturn the minimum maximum difference among all p pairs. We define the maximum of an empty set to be zero.",
        "examples": [
            "Input: nums = [10,1,2,7,1,3], p = 2\nOutput: 1\nExplanation: The first pair is formed from the indices 1 and 4, and the second pair is formed from the indices 2 and 5. \nThe maximum difference is max(|nums[1] - nums[4]|, |nums[2] - nums[5]|) = max(0, 1) = 1. Therefore, we return 1.",
            "Input: nums = [4,2,1,2], p = 1\nOutput: 0\nExplanation: Let the indices 1 and 3 form a pair. The difference of that pair is |2 - 2| = 0, which is the minimum we can attain."
        ],
        "constrains": "1 <= nums.length <= 105\n0 <= nums[i] <= 109\n0 <= p <= (nums.length)/2",
        "release_time": 1691551599,
        "oracle_code": "class Solution {\n    public int minimizeMax(int[] A, int p) {\n        int n = A.length;\n        Arrays.sort(A);\n        int l = 0;\n        int r = A[n-1]-A[0];\n        int mid;\n        while(l<r){\n            mid = (l+r)/2;\n            if(helper(A, mid, p)>=p) r = mid;\n            else l = mid +1;\n        }\n        return l;\n    }\n    \n    public int helper(int [] A, int diff, int p){\n        int i = 1; int count = 0;\n        while(i<A.length){\n            if(A[i]-A[i-1]<=diff){\n                i++;\n                count++;\n            }\n            i++;\n        }\n        return count;\n    }\n}",
        "content": "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kvEVrnNuIUc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\\n\\n```\\nclass Solution {\\n    public int minimizeMax(int[] A, int p) {\\n        int n = A.length;\\n        Arrays.sort(A);\\n        int l = 0;\\n        int r = A[n-1]-A[0];\\n        int mid;\\n        while(l<r){\\n            mid = (l+r)/2;\\n            if(helper(A, mid, p)>=p) r = mid;\\n            else l = mid +1;\\n        }\\n        return l;\\n    }\\n    \\n    public int helper(int [] A, int diff, int p){\\n        int i = 1; int count = 0;\\n        while(i<A.length){\\n            if(A[i]-A[i-1]<=diff){\\n                i++;\\n                count++;\\n            }\\n            i++;\\n        }\\n        return count;\\n    }\\n}\\n```\\n\\n```\\nclass Solution {\\npublic:\\n    int minimizeMax(vector<int>& A, int p) {\\n        int n = A.size();\\n        sort(A.begin(), A.end());\\n        int l = 0;\\n        int r = A[n - 1] - A[0];\\n        int mid;\\n        while (l < r) {\\n            mid = (l + r) / 2;\\n            if (helper(A, mid, p) >= p) {\\n                r = mid;\\n            } else {\\n                l = mid + 1;\\n            }\\n        }\\n        return l;\\n    }\\n\\n    int helper(vector<int>& A, int diff, int p) {\\n        int i = 1, count = 0;\\n        while (i < A.size()) {\\n            if (A[i] - A[i - 1] <= diff) {\\n                i++;\\n                count++;\\n            }\\n            i++;\\n        }\\n        return count;\\n    }\\n};\\n```\\n\\n```\\nclass Solution:\\n    def minimizeMax(self, A: List[int], p: int) -> int:\\n        n = len(A)\\n        A.sort()\\n        l, r = 0, A[n - 1] - A[0]\\n        while l < r:\\n            mid = (l + r) // 2\\n            if self.helper(A, mid, p) >= p:\\n                r = mid\\n            else:\\n                l = mid + 1\\n        return l\\n    \\n    def helper(self, A: List[int], diff: int, p: int) -> int:\\n        i, count = 1, 0\\n        while i < len(A):\\n            if A[i] - A[i - 1] <= diff:\\n                i += 1\\n                count += 1\\n            i += 1\\n        return count\\n\\n```",
        "level": "medium"
    },
    {
        "slug": "account-balance-after-rounded-purchase",
        "description": "Initially, you have a bank account balance of 100 dollars.\nYou are given an integer purchaseAmount representing the amount you will spend on a purchase in dollars.\nAt the store where you will make the purchase, the purchase amount is rounded to the nearest multiple of 10. In other words, you pay a non-negative amount, roundedAmount, such that roundedAmount is a multiple of 10 and abs(roundedAmount - purchaseAmount) is minimized.\nIf there is more than one nearest multiple of 10, the largest multiple is chosen.\nReturn an integer denoting your account balance after making a purchase worth purchaseAmount dollars from the store.\nNote: 0 is considered to be a multiple of 10 in this problem.",
        "examples": [
            "Input: purchaseAmount = 9\nOutput: 90\nExplanation: In this example, the nearest multiple of 10 to 9 is 10. Hence, your account balance becomes 100 - 10 = 90.",
            "Input: purchaseAmount = 15\nOutput: 80\nExplanation: In this example, there are two nearest multiples of 10 to 15: 10 and 20. So, the larger multiple, 20, is chosen.\nHence, your account balance becomes 100 - 20 = 80."
        ],
        "constrains": "0 <= purchaseAmount <= 100",
        "release_time": 1691437848,
        "oracle_code": "class Solution {\n    public int accountBalanceAfterPurchase(int amt) {\n        if(amt%10 == 0)\n        {\n            return 100-amt;\n        }\n        int ans=100-amt;\n        return amt%10 >= 5 ? (ans/10)*10 : ((ans/10)+1)*10;\n    }\n}",
        "content": "# Complexity\\n- Time complexity: $$O(1)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int accountBalanceAfterPurchase(int amt) {\\n        if(amt%10 == 0)\\n        {\\n            return 100-amt;\\n        }\\n        int ans=100-amt;\\n        return amt%10 >= 5 ? (ans/10)*10 : ((ans/10)+1)*10;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "is-graph-bipartite",
        "description": "There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:\n\nThere are no self-edges (graph[u] does not contain u).\nThere are no parallel edges (graph[u] does not contain duplicate values).\nIf v is in graph[u], then u is in graph[v] (the graph is undirected).\nThe graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.\n\nA graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.\nReturn true if and only if it is bipartite.",
        "examples": [
            "Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]\nOutput: false\nExplanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.",
            "Input: graph = [[1,3],[0,2],[1,3],[0,2]]\nOutput: true\nExplanation: We can partition the nodes into two sets: {0, 2} and {1, 3}."
        ],
        "constrains": "graph.length == n\n1 <= n <= 100\n0 <= graph[u].length < n\n0 <= graph[u][i] <= n - 1\ngraph[u]\u00a0does not contain\u00a0u.\nAll the values of graph[u] are unique.\nIf graph[u] contains v, then graph[v] contains u.",
        "release_time": 1684457315,
        "oracle_code": "class Solution {\n\tint[] colors;\n    public boolean isBipartite(int[][] graph) {\n        HashMap<Integer, ArrayList<Integer>> adj = new HashMap<Integer, ArrayList<Integer>>();\n\t\tcolors = new int[graph.length];\n\t\t\n\t\tfor (int i = 0; i < graph.length; i++) {\n\t\t\tadj.putIfAbsent(i, new ArrayList<Integer>());\n\t\t\tfor(int j=0;j<graph[i].length;j++){\n                adj.get(i).add(graph[i][j]);\n            }\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < colors.length; i++) {\n\t\t\tif(colors[i]==0 && adj.get(i)==null) {\n\t\t\t\tcolors[i]=1;\n\t\t\t}\n\t\t\telse if(colors[i]==0 && !(adj.get(i)==null)) {\n\t\t\t\tif(!bfs(adj, i)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t\n\tprivate boolean bfs(HashMap<Integer, ArrayList<Integer>> adj, int node) {\n\t\tArrayList<Integer> que = new ArrayList<Integer>();\n\t\tque.add(node);\n\t\tcolors[node] = 1;\n\t\tint c =0;\n\t\twhile(que.size()>0) {\n\t\t\t\n\t\t\tfor(int i=0;i<adj.get(que.get(0)).size();i++) {\n\t\t\t\tif(colors[adj.get(que.get(0)).get(i)]==0) {\n\t\t\t\t\tif(colors[que.get(0)]==1) {\n\t\t\t\t\t\tcolors[adj.get(que.get(0)).get(i)] = 2;\n\t\t\t\t\t\tque.add(adj.get(que.get(0)).get(i));\n\t\t\t\t\t}\n\t\t\t\t\telse if(colors[que.get(0)]==2) {\n\t\t\t\t\t\tcolors[adj.get(que.get(0)).get(i)] = 1;\n\t\t\t\t\t\tque.add(adj.get(que.get(0)).get(i));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(colors[que.get(0)]==colors[adj.get(que.get(0)).get(i)]) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n            }\n\t\t\tque.remove(0);\n\t\t}\n\t\treturn true\t;\n\t}\n}",
        "content": "# PLEASE UPVOTE!!!\\n\\n# Intuition & Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing BFS and Graph Coloring Approach.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\nN is no of edges\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(N)\\nN is no of edges\\n\\n# Code\\n```\\nclass Solution {\\n\\tint[] colors;\\n    public boolean isBipartite(int[][] graph) {\\n        HashMap<Integer, ArrayList<Integer>> adj = new HashMap<Integer, ArrayList<Integer>>();\\n\\t\\tcolors = new int[graph.length];\\n\\t\\t\\n\\t\\tfor (int i = 0; i < graph.length; i++) {\\n\\t\\t\\tadj.putIfAbsent(i, new ArrayList<Integer>());\\n\\t\\t\\tfor(int j=0;j<graph[i].length;j++){\\n                adj.get(i).add(graph[i][j]);\\n            }\\n\\t\\t}\\n\\t\\t\\n\\t\\tfor (int i = 0; i < colors.length; i++) {\\n\\t\\t\\tif(colors[i]==0 && adj.get(i)==null) {\\n\\t\\t\\t\\tcolors[i]=1;\\n\\t\\t\\t}\\n\\t\\t\\telse if(colors[i]==0 && !(adj.get(i)==null)) {\\n\\t\\t\\t\\tif(!bfs(adj, i)) {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n\\t\\n\\tprivate boolean bfs(HashMap<Integer, ArrayList<Integer>> adj, int node) {\\n\\t\\tArrayList<Integer> que = new ArrayList<Integer>();\\n\\t\\tque.add(node);\\n\\t\\tcolors[node] = 1;\\n\\t\\tint c =0;\\n\\t\\twhile(que.size()>0) {\\n\\t\\t\\t\\n\\t\\t\\tfor(int i=0;i<adj.get(que.get(0)).size();i++) {\\n\\t\\t\\t\\tif(colors[adj.get(que.get(0)).get(i)]==0) {\\n\\t\\t\\t\\t\\tif(colors[que.get(0)]==1) {\\n\\t\\t\\t\\t\\t\\tcolors[adj.get(que.get(0)).get(i)] = 2;\\n\\t\\t\\t\\t\\t\\tque.add(adj.get(que.get(0)).get(i));\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse if(colors[que.get(0)]==2) {\\n\\t\\t\\t\\t\\t\\tcolors[adj.get(que.get(0)).get(i)] = 1;\\n\\t\\t\\t\\t\\t\\tque.add(adj.get(que.get(0)).get(i));\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tif(colors[que.get(0)]==colors[adj.get(que.get(0)).get(i)]) {\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t}\\n            }\\n\\t\\t\\tque.remove(0);\\n\\t\\t}\\n\\t\\treturn true\\t;\\n\\t}\\n}\\n\\n```",
        "level": "medium"
    },
    {
        "slug": "two-sum-ii-input-array-is-sorted",
        "description": "Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <\u00a0numbers.length.\nReturn the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.\nThe tests are generated such that there is exactly one solution. You may not use the same element twice.\nYour solution must use only constant extra space.",
        "examples": [
            "Input: numbers = [2,7,11,15], target = 9\nOutput: [1,2]\nExplanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].",
            "Input: numbers = [2,3,4], target = 6\nOutput: [1,3]\nExplanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].",
            "Input: numbers = [-1,0], target = -1\nOutput: [1,2]\nExplanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2]."
        ],
        "constrains": "2 <= numbers.length <= 3 * 104\n-1000 <= numbers[i] <= 1000\nnumbers is sorted in non-decreasing order.\n-1000 <= target <= 1000\nThe tests are generated such that there is exactly one solution.",
        "release_time": 1680722540,
        "oracle_code": "class Solution {\n    public int[] twoSum(int[] numbers, int target) {\n                int left = 0;\n        int right = numbers.length - 1;\n        int tmp;\n        while (left < right)\n        {\n            if (numbers[left] + numbers[right] == target) break;\n            tmp = target - numbers[right];\n            while (numbers[left] < tmp) left++;\n            if (numbers[left] + numbers[right] == target) break;\n            tmp = target - numbers[left];\n            while (numbers[right] > tmp) right--;\n        }\n        return new int[]{left + 1, right + 1};\n    }\n}",
        "content": "\\n```\\nclass Solution {\\n    public int[] twoSum(int[] numbers, int target) {\\n                int left = 0;\\n        int right = numbers.length - 1;\\n        int tmp;\\n        while (left < right)\\n        {\\n            if (numbers[left] + numbers[right] == target) break;\\n            tmp = target - numbers[right];\\n            while (numbers[left] < tmp) left++;\\n            if (numbers[left] + numbers[right] == target) break;\\n            tmp = target - numbers[left];\\n            while (numbers[right] > tmp) right--;\\n        }\\n        return new int[]{left + 1, right + 1};\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "sum-of-mutated-array-closest-to-target",
        "description": "Given an integer array arr and a target value target, return the integer value such that when we change all the integers larger than value in the given array to be equal to value, the sum of the array gets as close as possible (in absolute difference) to target.\nIn case of a tie, return the minimum such integer.\nNotice that the answer is not neccesarilly a number from arr.",
        "examples": [
            "Input: arr = [4,9,3], target = 10\nOutput: 3\nExplanation: When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer.",
            "Input: arr = [2,3,5], target = 10\nOutput: 5",
            "Input: arr = [60864,25176,27249,21296,20204], target = 56803\nOutput: 11361"
        ],
        "constrains": "1 <= arr.length <= 104\n1 <= arr[i], target <= 105",
        "release_time": 1680185953,
        "oracle_code": "class Solution {\n    public int findBestValue(int[] arr, int target) {\n      int n = arr.length;\n        int lo = 0, hi = 0;\n        for (int i = 0; i < n; i++) {\n            hi = Math.max(hi, arr[i]);\n        }\n        \n        while (lo < hi) {\n            int mid = lo + (hi - lo) / 2;\n            int sum = 0;\n            for (int i = 0; i < n; i++) {\n                sum += Math.min(arr[i], mid);\n            }\n            if (sum >= target) {\n                hi = mid;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        \n        int sum1 = 0, sum2 = 0;\n        for (int i = 0; i < n; i++) {\n            sum1 += Math.min(arr[i], lo);\n            sum2 += Math.min(arr[i], lo - 1);\n        }\n        \n        return Math.abs(sum2 - target) <= Math.abs(sum1 - target) ? lo - 1 : lo;\n    }\n}",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int findBestValue(int[] arr, int target) {\\n      int n = arr.length;\\n        int lo = 0, hi = 0;\\n        for (int i = 0; i < n; i++) {\\n            hi = Math.max(hi, arr[i]);\\n        }\\n        \\n        while (lo < hi) {\\n            int mid = lo + (hi - lo) / 2;\\n            int sum = 0;\\n            for (int i = 0; i < n; i++) {\\n                sum += Math.min(arr[i], mid);\\n            }\\n            if (sum >= target) {\\n                hi = mid;\\n            } else {\\n                lo = mid + 1;\\n            }\\n        }\\n        \\n        int sum1 = 0, sum2 = 0;\\n        for (int i = 0; i < n; i++) {\\n            sum1 += Math.min(arr[i], lo);\\n            sum2 += Math.min(arr[i], lo - 1);\\n        }\\n        \\n        return Math.abs(sum2 - target) <= Math.abs(sum1 - target) ? lo - 1 : lo;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "count-unguarded-cells-in-the-grid",
        "description": "You are given two integers m and n representing a 0-indexed m x n grid. You are also given two 2D integer arrays guards and walls where guards[i] = [rowi, coli] and walls[j] = [rowj, colj] represent the positions of the ith guard and jth wall respectively.\nA guard can see every cell in the four cardinal directions (north, east, south, or west) starting from their position unless obstructed by a wall or another guard. A cell is guarded if there is at least one guard that can see it.\nReturn the number of unoccupied cells that are not guarded.",
        "examples": [
            "Input: m = 4, n = 6, guards = [[0,0],[1,1],[2,3]], walls = [[0,1],[2,2],[1,4]]\nOutput: 7\nExplanation: The guarded and unguarded cells are shown in red and green respectively in the above diagram.\nThere are a total of 7 unguarded cells, so we return 7.",
            "Input: m = 3, n = 3, guards = [[1,1]], walls = [[0,1],[1,0],[2,1],[1,2]]\nOutput: 4\nExplanation: The unguarded cells are shown in green in the above diagram.\nThere are a total of 4 unguarded cells, so we return 4."
        ],
        "constrains": "1 <= m, n <= 105\n2 <= m * n <= 105\n1 <= guards.length, walls.length <= 5 * 104\n2 <= guards.length + walls.length <= m * n\nguards[i].length == walls[j].length == 2\n0 <= rowi, rowj < m\n0 <= coli, colj < n\nAll the positions in guards and walls are unique.",
        "release_time": 1651346958,
        "oracle_code": "class Solution {\n    public int countUnguarded(int m, int n, int[][] guards, int[][] walls) {\n        int[][] res = new int[m][n];   //We create the matrix with the proper dimension\n        int result = 0, cnti, cntj;\n        for(int[] i : walls){       //We insert all the walls\n            res[i[0]][i[1]] = 2;\n        }\n        for(int[] i : guards){      //We insert all the guards\n            res[i[0]][i[1]] = 1;  \n        }\n        for(int i = 0; i < res.length;i++){\n            for(int j = 0; j < res[i].length;j++){\n                if(res[i][j] == 1){     //If we found a guard...\n                    cnti = i;   //Position of the guard\n                    cntj = j;   //Position of the guard\n                    while(cnti-1 != -1 && res[cnti-1][cntj] != 2 && res[cnti-1][cntj] != 1){  //If we can go up in the matrix...\n                        res[cnti-1][cntj] = 3;\n                        cnti--;\n                    }\n                    cnti = i;  //We reset the value to the initial one\n                    while(cnti+1 != m && res[cnti+1][cntj] != 2 && res[cnti+1][cntj] != 1){   //If we can go down in the matrix...\n                        res[cnti+1][cntj] = 3;\n                        cnti++;\n                    }\n                    cnti = i;  //We reset the value to the initial one\n                    while(cntj-1 != -1 && res[cnti][cntj-1] != 2 && res[cnti][cntj-1] != 1){  //If we can go to left in the matrix...\n                        res[cnti][cntj-1] = 3;\n                        cntj--;\n                    }\n                    cntj = j;  //We reset the value to the initial one\n                    while(cntj+1 != n && res[cnti][cntj+1] != 2 && res[cnti][cntj+1] != 1){  //If we can go to rigth in the matrix...\n                        res[cnti][cntj+1] = 3;\n                        cntj++;\n                    }\n                }\n            }\n        }\n        for(int[] i : res){   //Once we have marked the correct squares in the matrix...\n            for(int j : i){\n                if(j == 0){   //If we find a '0', we add one to the counter as it is an unguarded cell\n                    result++;\n                }\n            }\n        }\n        return result;  //We return the number of unguarded cells\n    }\n}",
        "content": "# | JAVA | Step by step Solution -->\\n1. We wil create a matrix call `res` with dimensions (`m`,`n`). When created, the matrix will contain only zeros.\\n    Zeros represent unguarded cells.\\n\\n2. We add the walls to the correct positions in `res`, the same case for the guards. \\n    Walls will be represented in `res` with the number 2 and guards using the number 1.\\n\\t\\n3. We start parsing the matrix, if we find a 1 (guard), we try to change the respective cells \\n    affected in `res` with the number 3 until we face a wall or another guard.\\n\\t\\n4. Once all the guards have guarded their respective cells, we parse the matrix again, if we find\\n    a zero (unguarded cell) we add one to the counter (`result`).\\n\\n5. We return `result` :). Hope you have understand it!! \\n\\nLeave a like and a comment if you have any question.\\n\\n```\\nclass Solution {\\n    public int countUnguarded(int m, int n, int[][] guards, int[][] walls) {\\n        int[][] res = new int[m][n];   //We create the matrix with the proper dimension\\n        int result = 0, cnti, cntj;\\n        for(int[] i : walls){       //We insert all the walls\\n            res[i[0]][i[1]] = 2;\\n        }\\n        for(int[] i : guards){      //We insert all the guards\\n            res[i[0]][i[1]] = 1;  \\n        }\\n        for(int i = 0; i < res.length;i++){\\n            for(int j = 0; j < res[i].length;j++){\\n                if(res[i][j] == 1){     //If we found a guard...\\n                    cnti = i;   //Position of the guard\\n                    cntj = j;   //Position of the guard\\n                    while(cnti-1 != -1 && res[cnti-1][cntj] != 2 && res[cnti-1][cntj] != 1){  //If we can go up in the matrix...\\n                        res[cnti-1][cntj] = 3;\\n                        cnti--;\\n                    }\\n                    cnti = i;  //We reset the value to the initial one\\n                    while(cnti+1 != m && res[cnti+1][cntj] != 2 && res[cnti+1][cntj] != 1){   //If we can go down in the matrix...\\n                        res[cnti+1][cntj] = 3;\\n                        cnti++;\\n                    }\\n                    cnti = i;  //We reset the value to the initial one\\n                    while(cntj-1 != -1 && res[cnti][cntj-1] != 2 && res[cnti][cntj-1] != 1){  //If we can go to left in the matrix...\\n                        res[cnti][cntj-1] = 3;\\n                        cntj--;\\n                    }\\n                    cntj = j;  //We reset the value to the initial one\\n                    while(cntj+1 != n && res[cnti][cntj+1] != 2 && res[cnti][cntj+1] != 1){  //If we can go to rigth in the matrix...\\n                        res[cnti][cntj+1] = 3;\\n                        cntj++;\\n                    }\\n                }\\n            }\\n        }\\n        for(int[] i : res){   //Once we have marked the correct squares in the matrix...\\n            for(int j : i){\\n                if(j == 0){   //If we find a \\'0\\', we add one to the counter as it is an unguarded cell\\n                    result++;\\n                }\\n            }\\n        }\\n        return result;  //We return the number of unguarded cells\\n    }\\n}\\n```\\n\\n",
        "level": "medium"
    },
    {
        "slug": "robot-return-to-origin",
        "description": "There is a robot starting at the position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.\nYou are given a string moves that represents the move sequence of the robot where moves[i] represents its ith move. Valid moves are 'R' (right), 'L' (left), 'U' (up), and 'D' (down).\nReturn true if the robot returns to the origin after it finishes all of its moves, or false otherwise.\nNote: The way that the robot is \"facing\" is irrelevant. 'R' will always make the robot move to the right once, 'L' will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.",
        "examples": [
            "Input: moves = \"UD\"\nOutput: true\nExplanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.",
            "Input: moves = \"LL\"\nOutput: false\nExplanation: The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves."
        ],
        "constrains": "1 <= moves.length <= 2 * 104\nmoves only contains the characters 'U', 'D', 'L' and 'R'.",
        "release_time": 1684399544,
        "oracle_code": "class Solution {\n    public boolean judgeCircle(String moves) {\n        int point[] = {0,0};\n        int move[][] = new int[][]{{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n        for (Character m: moves.toCharArray()) {\n            int ind = 0;\n            switch (m)\n            {\n                case 'U': {\n                    ind = 0;\n                    break;\n                }\n                case 'D': {\n                    ind = 1;\n                    break;\n                }\n                case 'L': {\n                    ind = 2;\n                    break;\n                }\n                case 'R': {\n                    ind = 3;\n                    break;\n                }\n            }\n            point[0] += move[ind][0];\n            point[1] += move[ind][1];\n        }\n        return point[0] == 0 && point[1] == 0;\n    }\n}",
        "content": "\\n```\\nclass Solution {\\n    public boolean judgeCircle(String moves) {\\n        int point[] = {0,0};\\n        int move[][] = new int[][]{{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\\n        for (Character m: moves.toCharArray()) {\\n            int ind = 0;\\n            switch (m)\\n            {\\n                case \\'U\\': {\\n                    ind = 0;\\n                    break;\\n                }\\n                case \\'D\\': {\\n                    ind = 1;\\n                    break;\\n                }\\n                case \\'L\\': {\\n                    ind = 2;\\n                    break;\\n                }\\n                case \\'R\\': {\\n                    ind = 3;\\n                    break;\\n                }\\n            }\\n            point[0] += move[ind][0];\\n            point[1] += move[ind][1];\\n        }\\n        return point[0] == 0 && point[1] == 0;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "h-index-ii",
        "description": "Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations is sorted in ascending order, return the researcher's h-index.\nAccording to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.\nYou must write an algorithm that runs in logarithmic time.",
        "examples": [
            "Input: citations = [0,1,3,5,6]\nOutput: 3\nExplanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.",
            "Input: citations = [1,2,100]\nOutput: 2"
        ],
        "constrains": "n == citations.length\n1 <= n <= 105\n0 <= citations[i] <= 1000\ncitations is sorted in ascending order.",
        "release_time": 1689538082,
        "oracle_code": "class Solution {\n    public int hIndex(int[] citations) {\n        // O(n) Time Complexity\n        // int n = citations.length;\n        // int index = 0;\n        // while(index < n && n - index > citations[index]){\n        //     index++;\n        // }\n        // return n - index;\n\n        // O(logn) Time Complexity // Binary Search:- Since Sorted Array\n        int left = 0, right = citations.length - 1;\n        int n = citations.length;\n        while(left <= right){\n            int mid = left + (right - left) / 2;\n            if(citations[mid] == n - mid) return n - mid;\n            else if(citations[mid] < n - mid) left = mid + 1;\n            else right = mid - 1;\n        }\n        return n - left;\n    }\n}",
        "content": "# Complexity\\n- Time complexity: $$O(logn)$$ \\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        // O(n) Time Complexity\\n        // int n = citations.length;\\n        // int index = 0;\\n        // while(index < n && n - index > citations[index]){\\n        //     index++;\\n        // }\\n        // return n - index;\\n\\n        // O(logn) Time Complexity // Binary Search:- Since Sorted Array\\n        int left = 0, right = citations.length - 1;\\n        int n = citations.length;\\n        while(left <= right){\\n            int mid = left + (right - left) / 2;\\n            if(citations[mid] == n - mid) return n - mid;\\n            else if(citations[mid] < n - mid) left = mid + 1;\\n            else right = mid - 1;\\n        }\\n        return n - left;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "find-the-distinct-difference-array",
        "description": "You are given a 0-indexed array nums of length n.\nThe distinct difference array of nums is an array diff of length n such that diff[i] is equal to the number of distinct elements in the suffix nums[i + 1, ..., n - 1] subtracted from the number of distinct elements in the prefix nums[0, ..., i].\nReturn the distinct difference array of nums.\nNote that nums[i, ..., j] denotes the subarray of nums starting at index i and ending at index j inclusive. Particularly, if i > j then nums[i, ..., j] denotes an empty subarray.",
        "examples": [
            "Input: nums = [1,2,3,4,5]\nOutput: [-3,-1,1,3,5]\nExplanation: For index i = 0, there is 1 element in the prefix and 4 distinct elements in the suffix. Thus, diff[0] = 1 - 4 = -3.\nFor index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1.\nFor index i = 2, there are 3 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 3 - 2 = 1.\nFor index i = 3, there are 4 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 4 - 1 = 3.\nFor index i = 4, there are 5 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 5 - 0 = 5.",
            "Input: nums = [3,2,3,4,2]\nOutput: [-2,-1,0,2,3]\nExplanation: For index i = 0, there is 1 element in the prefix and 3 distinct elements in the suffix. Thus, diff[0] = 1 - 3 = -2.\nFor index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1.\nFor index i = 2, there are 2 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 2 - 2 = 0.\nFor index i = 3, there are 3 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 3 - 1 = 2.\nFor index i = 4, there are 3 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 3 - 0 = 3."
        ],
        "constrains": "1 <= n == nums.length\u00a0<= 50\n1 <= nums[i] <= 50",
        "release_time": 1683432177,
        "oracle_code": "class Solution {\n    public int[] distinctDifferenceArray(int[] nums) {\n        int n=nums.length;\n        int[] d=new int[n];\n        for (int i = 0; i < n; i++) {\n            Set<Integer> pre=new HashSet<>();\n            for (int j = 0; j <= i; j++) {\n                pre.add(nums[j]);\n            }\n            Set<Integer> suf=new HashSet<>();\n            for (int j = i + 1; j < n; j++) {\n                suf.add(nums[j]);\n            }\n            d[i]=pre.size()-suf.size();\n        }\n        return d;\n    }\n}",
        "content": "\\n# Code\\n```\\nclass Solution {\\n    public int[] distinctDifferenceArray(int[] nums) {\\n        int n=nums.length;\\n        int[] d=new int[n];\\n        for (int i = 0; i < n; i++) {\\n            Set<Integer> pre=new HashSet<>();\\n            for (int j = 0; j <= i; j++) {\\n                pre.add(nums[j]);\\n            }\\n            Set<Integer> suf=new HashSet<>();\\n            for (int j = i + 1; j < n; j++) {\\n                suf.add(nums[j]);\\n            }\\n            d[i]=pre.size()-suf.size();\\n        }\\n        return d;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "add-edges-to-make-degrees-of-all-nodes-even",
        "description": "There is an undirected graph consisting of n nodes numbered from 1 to n. You are given the integer n and a 2D array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi. The graph can be disconnected.\nYou can add at most two additional edges (possibly none) to this graph so that there are no repeated edges and no self-loops.\nReturn true if it is possible to make the degree of each node in the graph even, otherwise return false.\nThe degree of a node is the number of edges connected to it.",
        "examples": [
            "Input: n = 5, edges = [[1,2],[2,3],[3,4],[4,2],[1,4],[2,5]]\nOutput: true\nExplanation: The above diagram shows a valid way of adding an edge.\nEvery node in the resulting graph is connected to an even number of edges.",
            "Input: n = 4, edges = [[1,2],[3,4]]\nOutput: true\nExplanation: The above diagram shows a valid way of adding two edges.",
            "Input: n = 4, edges = [[1,2],[1,3],[1,4]]\nOutput: false\nExplanation: It is not possible to obtain a valid graph with adding at most 2 edges."
        ],
        "constrains": "3 <= n <= 105\n2 <= edges.length <= 105\nedges[i].length == 2\n1 <= ai, bi <= n\nai != bi\nThere are no repeated edges.",
        "release_time": 1671336101,
        "oracle_code": "class Solution:\n    def isPossible(self, n: int, edges: List[List[int]]) -> bool:\n        graph = defaultdict(set)\n        for a, b in edges:\n            graph[a].add(b)\n            graph[b].add(a)\n        odds = [a for a in graph if len(graph[a]) % 2 == 1]\n        if not odds:\n            return True\n        elif len(odds) > 4 or len(odds) == 1 or len(odds) == 3:\n            return False\n        elif len(odds) == 2:\n            a, b = odds[0], odds[1]\n            if a not in graph[b]:\n                return True\n            for i in range(1, n + 1):\n                if i not in graph[a] and i not in graph[b]:\n                    return True\n            return False\n        else:\n            a, b, c, d = odds[0], odds[1], odds[2], odds[3]\n            if a not in graph[b] and c not in graph[d]:\n                return True\n            if a not in graph[c] and b not in graph[d]:\n                return True\n            if a not in graph[d] and b not in graph[c]:\n                return True\n            return False",
        "content": "**Observation**\\nThe key is to note that we can add **at most** two additional edges (possibly none) to the graph.\\n\\n**Implementation**\\nStep 1: Build the graph by going through all edges.\\nStep 2: Find every node with an odd degree.\\nStep 3: Consider each of the case where the number of the nodes with an odd degree is 0, 1, 2, 3, 4, and > 4.\\n\\n**Solution**\\n```\\nclass Solution:\\n    def isPossible(self, n: int, edges: List[List[int]]) -> bool:\\n        graph = defaultdict(set)\\n        for a, b in edges:\\n            graph[a].add(b)\\n            graph[b].add(a)\\n        odds = [a for a in graph if len(graph[a]) % 2 == 1]\\n        if not odds:\\n            return True\\n        elif len(odds) > 4 or len(odds) == 1 or len(odds) == 3:\\n            return False\\n        elif len(odds) == 2:\\n            a, b = odds[0], odds[1]\\n            if a not in graph[b]:\\n                return True\\n            for i in range(1, n + 1):\\n                if i not in graph[a] and i not in graph[b]:\\n                    return True\\n            return False\\n        else:\\n            a, b, c, d = odds[0], odds[1], odds[2], odds[3]\\n            if a not in graph[b] and c not in graph[d]:\\n                return True\\n            if a not in graph[c] and b not in graph[d]:\\n                return True\\n            if a not in graph[d] and b not in graph[c]:\\n                return True\\n            return False\\n```",
        "level": "hard"
    },
    {
        "slug": "group-the-people-given-the-group-size-they-belong-to",
        "description": "There are n people\u00a0that are split into some unknown number of groups. Each person is labeled with a\u00a0unique ID\u00a0from\u00a00\u00a0to\u00a0n - 1.\nYou are given an integer array\u00a0groupSizes, where groupSizes[i]\u00a0is the size of the group that person\u00a0i\u00a0is in. For example, if\u00a0groupSizes[1] = 3, then\u00a0person\u00a01\u00a0must be in a\u00a0group of size\u00a03.\nReturn\u00a0a list of groups\u00a0such that\u00a0each person\u00a0i\u00a0is in a group of size\u00a0groupSizes[i].\nEach person should\u00a0appear in\u00a0exactly one group,\u00a0and every person must be in a group. If there are\u00a0multiple answers, return any of them. It is guaranteed that there will be at least one valid solution for the given input.",
        "examples": [
            "Input: groupSizes = [3,3,3,3,3,1,3]\nOutput: [[5],[0,1,2],[3,4,6]]\nExplanation: \nThe first group is [5]. The size is 1, and groupSizes[5] = 1.\nThe second group is [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.\nThe third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6] = 3.\nOther possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].",
            "Input: groupSizes = [2,1,3,3,3,2]\nOutput: [[1],[0,5],[2,3,4]]"
        ],
        "constrains": "groupSizes.length == n\n1 <= n\u00a0<= 500\n1 <=\u00a0groupSizes[i] <= n",
        "release_time": 1687491634,
        "oracle_code": "class Solution {\n    public List<List<Integer>> groupThePeople(int[] groupSizes) {\n        ArrayList<List<Integer>> list =  new ArrayList<>();\n        HashMap<Integer, ArrayList<Integer>> hm = new HashMap<>();\n\n        for(int i = 0 ; i < groupSizes.length; i++){\n            if(hm.containsKey(groupSizes[i])){\n                hm.get(groupSizes[i]).add(i);\n            }\n            else{\n            \tArrayList<Integer> newL = new ArrayList<>();\n            \tnewL.add(i);\n                hm.put(groupSizes[i], newL);      \n            }\n\n            if(hm.get(groupSizes[i]).size() == groupSizes[i]){\n                list.add(hm.get(groupSizes[i]));\n                hm.remove(groupSizes[i]);\n            }\n        }\n            \n        return list;\n    }\n}\n// UP-VOTE IF HELPFUL",
        "content": "# Complexity\\n- Time complexity:\\nO(n)\\nWhere n is the size of the array groupSizes\\n\\n- Space complexity:\\nO(n)\\nWhere n is the size of the array groupSizes\\n\\n# Code\\n```\\nclass Solution {\\n    public List<List<Integer>> groupThePeople(int[] groupSizes) {\\n        ArrayList<List<Integer>> list =  new ArrayList<>();\\n        HashMap<Integer, ArrayList<Integer>> hm = new HashMap<>();\\n\\n        for(int i = 0 ; i < groupSizes.length; i++){\\n            if(hm.containsKey(groupSizes[i])){\\n                hm.get(groupSizes[i]).add(i);\\n            }\\n            else{\\n            \\tArrayList<Integer> newL = new ArrayList<>();\\n            \\tnewL.add(i);\\n                hm.put(groupSizes[i], newL);      \\n            }\\n\\n            if(hm.get(groupSizes[i]).size() == groupSizes[i]){\\n                list.add(hm.get(groupSizes[i]));\\n                hm.remove(groupSizes[i]);\\n            }\\n        }\\n            \\n        return list;\\n    }\\n}\\n// UP-VOTE IF HELPFUL\\n```",
        "level": "medium"
    },
    {
        "slug": "largest-number-after-digit-swaps-by-parity",
        "description": "You are given a positive integer num. You may swap any two digits of num that have the same parity (i.e. both odd digits or both even digits).\nReturn the largest possible value of num after any number of swaps.",
        "examples": [
            "Input: num = 1234\nOutput: 3412\nExplanation: Swap the digit 3 with the digit 1, this results in the number 3214.\nSwap the digit 2 with the digit 4, this results in the number 3412.\nNote that there may be other sequences of swaps but it can be shown that 3412 is the largest possible number.\nAlso note that we may not swap the digit 4 with the digit 1 since they are of different parities.",
            "Input: num = 65875\nOutput: 87655\nExplanation: Swap the digit 8 with the digit 6, this results in the number 85675.\nSwap the first digit 5 with the digit 7, this results in the number 87655.\nNote that there may be other sequences of swaps but it can be shown that 87655 is the largest possible number."
        ],
        "constrains": "1 <= num <= 109",
        "release_time": 1669374075,
        "oracle_code": "class Solution {\n    public int largestInteger(int num) {\n        String numString = \"\"+ num;\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        for(Character c : numString.toCharArray()){\n            int n = Character.getNumericValue(c);\n            if(n%2==0){\n                even.add(n);\n            }else{\n                odd.add(n);\n            }\n        }\n        Collections.sort(even, Collections.reverseOrder());\n        Collections.sort(odd, Collections.reverseOrder());\n        String res =\"\";\n        int one=0, two=0;\n        for(int i=0; i<numString.length(); i++){\n            int n = Character.getNumericValue(numString.charAt(i));\n            if(n%2==0){\n                res += even.get(one);\n                one++;\n            }else{\n                res += odd.get(two);\n                two++;\n            }\n        }\n        return Integer.parseInt(res);\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nused string and list to store the even and odd elements\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nconverted num in string then added all values from string to even and odd list as per its type;\\nthen sorted both string in desc order\\nas we check from the original string if got even number we will put max even number from even list and incresed even list pointer same for the odd number\\n\\nConverted result string to integer to get int res and returned it\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int largestInteger(int num) {\\n        String numString = \"\"+ num;\\n        List<Integer> even = new ArrayList<>();\\n        List<Integer> odd = new ArrayList<>();\\n        for(Character c : numString.toCharArray()){\\n            int n = Character.getNumericValue(c);\\n            if(n%2==0){\\n                even.add(n);\\n            }else{\\n                odd.add(n);\\n            }\\n        }\\n        Collections.sort(even, Collections.reverseOrder());\\n        Collections.sort(odd, Collections.reverseOrder());\\n        String res =\"\";\\n        int one=0, two=0;\\n        for(int i=0; i<numString.length(); i++){\\n            int n = Character.getNumericValue(numString.charAt(i));\\n            if(n%2==0){\\n                res += even.get(one);\\n                one++;\\n            }else{\\n                res += odd.get(two);\\n                two++;\\n            }\\n        }\\n        return Integer.parseInt(res);\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "stone-game-v",
        "description": "There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue.\nIn each round of the game, Alice divides the row into two non-empty rows (i.e. left row and right row), then Bob calculates the value of each row which is the sum of the values of all the stones in this row. Bob throws away the row which has the maximum value, and Alice's score increases by the value of the remaining row. If the value of the two rows are equal, Bob lets Alice decide which row will be thrown away. The next round starts with the remaining row.\nThe game ends when there is only one stone remaining. Alice's is initially zero.\nReturn the maximum score that Alice can obtain.",
        "examples": [
            "Input: stoneValue = [6,2,3,4,5,5]\nOutput: 18\nExplanation: In the first round, Alice divides the row to [6,2,3], [4,5,5]. The left row has the value 11 and the right row has value 14. Bob throws away the right row and Alice's score is now 11.\nIn the second round Alice divides the row to [6], [2,3]. This time Bob throws away the left row and Alice's score becomes 16 (11 + 5).\nThe last round Alice has only one choice to divide the row which is [2], [3]. Bob throws away the right row and Alice's score is now 18 (16 + 2). The game ends because only one stone is remaining in the row.",
            "Input: stoneValue = [7,7,7,7,7,7,7]\nOutput: 28",
            "Input: stoneValue = [4]\nOutput: 0"
        ],
        "constrains": "1 <= stoneValue.length <= 500\n1 <= stoneValue[i] <= 106",
        "release_time": 1603754086,
        "oracle_code": "class Solution {\n    public int stoneGameV(int[] stoneValue) {\n        int n = stoneValue.length;\n        int[] pre = new int[n+1];\n        for(int i = 1; i <= n; i++) {\n            pre[i] = pre[i-1] + stoneValue[i-1];\n        }\n        int[][] dp = new int[n][n];\n        for(int l = 1; l < n; l++) {\n            for(int i = 0; i < n-l; i++) {\n                int j = i+l, res = 0;\n                for(int k = i; k < j; k++) {\n                    int left = pre[k+1] - pre[i], right = pre[j+1] - pre[k+1];\n                    if(left < right) {\n                        res = Math.max(res, left + dp[i][k]);\n                    } else if(left > right) {\n                        res = Math.max(res, right + dp[k+1][j]);\n                    } else {\n                        res = Math.max(res, left + dp[i][k]);\n                        res = Math.max(res, right + dp[k+1][j]);\n                    }\n                }\n                dp[i][j] = res;\n            }\n        }\n        return dp[0][n-1];\n    }\n}",
        "content": "**O(n^3)**\\n\\n**Basic approach**\\ndp[i][j]: max score you can obtain from stones[i..j]\\nsum[i][j]: sum of stoneValues[i..j]\\nTry all possible k i.e. k goes from i to j-1:\\nwe have 2 choices for score: **sum[i][k] + dp[i][k]** and **sum[k+1][j] + dp[k+1][j]**\\nbut we can only pick the side where sum is smaller or either of them when both sides are equal.\\nTake the maximum score from all of these choices and we have computed dp[i][j].\\nIn all my codes, I am building the dp table bottom-up i.e. dp[0][1], dp[1][2] gets calculated before dp[0][2].\\n\\n```\\nclass Solution {\\n    public int stoneGameV(int[] stoneValue) {\\n        int n = stoneValue.length;\\n        int[] pre = new int[n+1];\\n        for(int i = 1; i <= n; i++) {\\n            pre[i] = pre[i-1] + stoneValue[i-1];\\n        }\\n        int[][] dp = new int[n][n];\\n        for(int l = 1; l < n; l++) {\\n            for(int i = 0; i < n-l; i++) {\\n                int j = i+l, res = 0;\\n                for(int k = i; k < j; k++) {\\n                    int left = pre[k+1] - pre[i], right = pre[j+1] - pre[k+1];\\n                    if(left < right) {\\n                        res = Math.max(res, left + dp[i][k]);\\n                    } else if(left > right) {\\n                        res = Math.max(res, right + dp[k+1][j]);\\n                    } else {\\n                        res = Math.max(res, left + dp[i][k]);\\n                        res = Math.max(res, right + dp[k+1][j]);\\n                    }\\n                }\\n                dp[i][j] = res;\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n}\\n```\\n\\n**O(n^2 log n)**\\n\\n**Optimization**\\nAs k goes from i to j in stones[i..j], sum of left part sum[i][k] increases continuously and it remains a valid subarray for our consideration for calculating dp[i][j] until the point when it becomes greater than right half. From that point onwards, all the right ones are valid subarrays for consideration. We can find this critical k (= **k\\'**) using binary search. Forget about boundary cases and equal halves etc for now, just try to understand the general idea.\\n\\ndp[i][j] = max( max(sum[i][k] + dp[i][k]) for k: i to **k\\'**, max(sum[k][j] + dp[k][j]) for k: **k\\'**+1 to j )\\n(refer to the code for exact condition for all cases)\\n\\nIf we have to calculate first and second terms in above by iterating from k: i to **k\\'** or k: **k\\'**+1 to j, then it\\'d take O(n) time and we are back to first solution. What we can instead do is maintain 2 more arrays defined as:\\nleft[i][j] = max( sum[i][k] + dp[i][k] for k: i to j )\\nright[i][j] = max( sum[k][j] + dp[k][j] for k: i to j )\\n\\nand use them to redefine dp[i][j] = max( left[i][**k\\'**], right[**k\\'**+1][j] )\\n\\nNote that left and right arrays can also be calculated along with dp table so they don\\'t increase our worst case time complexity.\\n\\nleft[i][j] = max( left[i][j-1],  sum[i][j] + dp[i][j] )\\nright[i][j] = max( right[i+1][j],  sum[i][j] + dp[i][j] )\\n\\nWith these ideas in mind and taking care of boundary cases like **k\\'** == i or **k\\'** == j and equal halves etc, we have our solution ready.\\n\\n```\\nclass Solution {\\n    // returns first index where sum of left half >= sum of right half\\n    private int search(int[] pre, int l, int r) {\\n        int sum = pre[r+1] - pre[l], L = l;\\n        while(l < r) {\\n            int m = l + ((r - l) >> 1);\\n            if(((pre[m+1] - pre[L]) << 1) >= sum) {\\n                r = m;\\n            } else {\\n                l = m + 1;\\n            }\\n        }\\n        return l;\\n    }\\n    public int stoneGameV(int[] stoneValue) {\\n        int n = stoneValue.length;\\n        int[] pre = new int[n+1];\\n        for(int i = 1; i <= n; i++) {\\n            pre[i] = pre[i-1] + stoneValue[i-1];\\n        }\\n        int[][] dp = new int[n][n], left = new int[n][n], right = new int[n][n];\\n        for(int i = 0; i < n; i++) {\\n            left[i][i] = right[i][i] = stoneValue[i];\\n        }\\n        for(int l = 1; l < n; l++) {\\n            for(int i = 0; i < n-l; i++) {\\n                int j = i+l, k = search(pre, i, j);\\n                int sum = pre[j+1] - pre[i], leftHalf = pre[k+1] - pre[i];\\n                if((leftHalf << 1) == sum) {    // equal parts\\n                    dp[i][j] = Math.max(left[i][k], right[k+1][j]);\\n                } else {    // left half > right half\\n                    dp[i][j] = Math.max(k == i ? 0 : left[i][k-1], k == j ? 0 : right[k+1][j]);\\n                }\\n                left[i][j] = Math.max(left[i][j-1], sum + dp[i][j]);\\n                right[i][j] = Math.max(right[i+1][j], sum + dp[i][j]);\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n}\\n```\\n\\n**O(n^2)**\\n\\n**Optimization**\\nWe can optimize the previous solution even further by getting rid of the binary search step needed to find the critical k (= **k\\'**) of stones[i..j].\\nBinary search is great when we need the answer for arbitrary i and j but why not calculate dp[i][j] in such an order where we could leverage the **k\\'** information from previous i and j.\\n\\nSuppose we know the **k\\'** for stones[i..j], what do we know about **k\\'** for stones[i..j+1]? It is either the same or it got shifted a few places to the right.\\nAnd so if we calculate dp values in the order: dp[i][i], dp[i][i+1], dp[i][i+2], ..., dp[i][j], we can essentially keep track of **k\\'** as we go within that same linear time bound.\\n\\nUsing this idea, we implement the final solution. Couple of pointers about my code:\\n* mid: represents **k\\'** or first index such that left half >= right half\\n* with i < j, max[i][j] represents left[i][j] of previous solution i.e. max(dp[i][i], dp[i][i+1], dp[i][i+2] .. dp[i][j]) and max[j][i] represents right[i][j] of previous solution i.e. max(dp[i][j], dp[i+1][j], dp[i+2][j] .. dp[j][j]). We could have used two different arrays left and right just like previous solution but this trick saves space.\\n* I am traversing in the order: dp[j][j], dp[j-1,j], dp[j-2, j], .., dp[i][j] instead of the above mentioned order but the idea remains same.\\n\\n```\\nclass Solution {\\n    public int stoneGameV(int[] stoneValue) {\\n        int n = stoneValue.length;\\n        int[][] dp = new int[n][n], max = new int[n][n];\\n        for(int i = 0; i < n; i++) {\\n            max[i][i] = stoneValue[i];\\n        }\\n        for(int j = 1; j < n; j++) {\\n            int mid = j, sum = stoneValue[j], rightHalf = 0;\\n            for(int i = j-1; i >= 0; i--) {\\n                sum += stoneValue[i];\\n                while((rightHalf + stoneValue[mid]) * 2 <= sum) {\\n                    rightHalf += stoneValue[mid--];\\n                }\\n                dp[i][j] = rightHalf * 2 == sum ? max[i][mid] : (mid == i ? 0 : max[i][mid - 1]);\\n                dp[i][j] = Math.max(dp[i][j], mid == j ? 0 : max[j][mid + 1]);\\n                max[i][j] = Math.max(max[i][j - 1], dp[i][j] + sum);\\n                max[j][i] = Math.max(max[j][i + 1], dp[i][j] + sum);\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "next-permutation",
        "description": "A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\n\nFor example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].\n\nThe next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\n\nFor example, the next permutation of arr = [1,2,3] is [1,3,2].\nSimilarly, the next permutation of arr = [2,3,1] is [3,1,2].\nWhile the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\n\nGiven an array of integers nums, find the next permutation of nums.\nThe replacement must be in place and use only constant extra memory.",
        "examples": [
            "Input: nums = [1,2,3]\nOutput: [1,3,2]",
            "Input: nums = [3,2,1]\nOutput: [1,2,3]",
            "Input: nums = [1,1,5]\nOutput: [1,5,1]"
        ],
        "constrains": "1 <= nums.length <= 100\n0 <= nums[i] <= 100",
        "release_time": 1689771556,
        "oracle_code": "class Solution {\n    public void nextPermutation(int[] n) {\n        //breakpoint\n       if(  n==null || n.length<=1)return;\n\t\t\n\t\tint i = n.length-2;\n\n\t\twhile(i>=0 && n[i]>=n[i+1])i--;\n\t\t\n\t\tint j=n.length-1;\n\t\t\n\t\tif(i>=0) {\n\t\t\twhile(n[j]<=n[i])j--;\n\t\t\tswap(n,i,j);\n\t\t}\n\t\t\n\t\treverse(n,i+1,n.length-1);\n\t\t\n\t\tfor(int p=0;p<n.length;p++) {\n\t\t\tSystem.out.println(n[p]);\n\t\t}\n\t\t\n\t}\n\tpublic static void swap(int n[],int i,int j) {\n\t\tint temp=n[i];\n\t\tn[i]=n[j];\n\t\tn[j]=temp;\n\t}\n\tpublic static void reverse(int n[],int i,int j) {\n\t\twhile(i<j) {\n\t\t\tswap(n,i,j);\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t}\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n-\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Find the breakpoint(position where n[i]<n[i+1])\\n- Then find the element which greater than breakpoint but is the smallest\\n- Swap the variables i.e breakpoint and the other variable which we have find\\n- Then reverse the remaning array \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(3N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\n    public void nextPermutation(int[] n) {\\n        //breakpoint\\n       if(  n==null || n.length<=1)return;\\n\\t\\t\\n\\t\\tint i = n.length-2;\\n\\n\\t\\twhile(i>=0 && n[i]>=n[i+1])i--;\\n\\t\\t\\n\\t\\tint j=n.length-1;\\n\\t\\t\\n\\t\\tif(i>=0) {\\n\\t\\t\\twhile(n[j]<=n[i])j--;\\n\\t\\t\\tswap(n,i,j);\\n\\t\\t}\\n\\t\\t\\n\\t\\treverse(n,i+1,n.length-1);\\n\\t\\t\\n\\t\\tfor(int p=0;p<n.length;p++) {\\n\\t\\t\\tSystem.out.println(n[p]);\\n\\t\\t}\\n\\t\\t\\n\\t}\\n\\tpublic static void swap(int n[],int i,int j) {\\n\\t\\tint temp=n[i];\\n\\t\\tn[i]=n[j];\\n\\t\\tn[j]=temp;\\n\\t}\\n\\tpublic static void reverse(int n[],int i,int j) {\\n\\t\\twhile(i<j) {\\n\\t\\t\\tswap(n,i,j);\\n\\t\\t\\ti++;\\n\\t\\t\\tj--;\\n\\t\\t}\\n\\t}\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "implement-trie-prefix-tree",
        "description": "A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\nImplement the Trie class:\n\nTrie() Initializes the trie object.\nvoid insert(String word) Inserts the string word into the trie.\nboolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\nboolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.",
        "examples": [
            "Input\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\nOutput\n[null, null, true, false, true, null, true]\n\nExplanation\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True"
        ],
        "constrains": "1 <= word.length, prefix.length <= 2000\nword and prefix consist only of lowercase English letters.\nAt most 3 * 104 calls in total will be made to insert, search, and startsWith.",
        "release_time": 1682938465,
        "oracle_code": "class Node{\n    Node links[]= new Node[26];\n    boolean flag=false;\n    public Node(){\n\n    }\n    boolean contains(char ch){\n        return (links[ch-'a']!=null);\n    }\n    void put(char ch, Node node){\n        links[ch-'a']=node;\n    }\n    Node get(char ch){\n        return links[ch-'a'];\n    }\n    boolean isEnd(){\n        return flag;\n    }\n    void setEnd(){\n        flag=true;\n    }\n\n}\nclass Trie {\nprivate static Node root;\n    public Trie() {\n        root=new Node();\n    }\n    \n    public void insert(String word) {\n        Node node=root;\n        for(int i=0;i<word.length();i++){\n            if(!node.contains(word.charAt(i))){\n                node.put(word.charAt(i),new Node());\n            }\n            node=node.get(word.charAt(i));\n        }\n        node.setEnd();\n    }\n    \n    public boolean search(String word) {\n        Node node=root;\n        for(int i=0;i<word.length();i++){\n            if(!node.contains(word.charAt(i))){\n                return false;\n            }\n            node=node.get(word.charAt(i));\n        }\n        if(node.isEnd())\n            return true;\n        return false;\n    }\n    \n    public boolean startsWith(String prefix) {\n        Node node=root;\n        for(int i=0;i<prefix.length();i++){\n            if(!node.contains(prefix.charAt(i))){\n                return false;\n            }\n            node=node.get(prefix.charAt(i));\n        }\n        return true;\n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * boolean param_2 = obj.search(word);\n * boolean param_3 = obj.startsWith(prefix);\n */",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Node{\\n    Node links[]= new Node[26];\\n    boolean flag=false;\\n    public Node(){\\n\\n    }\\n    boolean contains(char ch){\\n        return (links[ch-\\'a\\']!=null);\\n    }\\n    void put(char ch, Node node){\\n        links[ch-\\'a\\']=node;\\n    }\\n    Node get(char ch){\\n        return links[ch-\\'a\\'];\\n    }\\n    boolean isEnd(){\\n        return flag;\\n    }\\n    void setEnd(){\\n        flag=true;\\n    }\\n\\n}\\nclass Trie {\\nprivate static Node root;\\n    public Trie() {\\n        root=new Node();\\n    }\\n    \\n    public void insert(String word) {\\n        Node node=root;\\n        for(int i=0;i<word.length();i++){\\n            if(!node.contains(word.charAt(i))){\\n                node.put(word.charAt(i),new Node());\\n            }\\n            node=node.get(word.charAt(i));\\n        }\\n        node.setEnd();\\n    }\\n    \\n    public boolean search(String word) {\\n        Node node=root;\\n        for(int i=0;i<word.length();i++){\\n            if(!node.contains(word.charAt(i))){\\n                return false;\\n            }\\n            node=node.get(word.charAt(i));\\n        }\\n        if(node.isEnd())\\n            return true;\\n        return false;\\n    }\\n    \\n    public boolean startsWith(String prefix) {\\n        Node node=root;\\n        for(int i=0;i<prefix.length();i++){\\n            if(!node.contains(prefix.charAt(i))){\\n                return false;\\n            }\\n            node=node.get(prefix.charAt(i));\\n        }\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie obj = new Trie();\\n * obj.insert(word);\\n * boolean param_2 = obj.search(word);\\n * boolean param_3 = obj.startsWith(prefix);\\n */\\n```",
        "level": "medium"
    },
    {
        "slug": "maximize-number-of-nice-divisors",
        "description": "You are given a positive integer primeFactors. You are asked to construct a positive integer n that satisfies the following conditions:\n\nThe number of prime factors of n (not necessarily distinct) is at most primeFactors.\nThe number of nice divisors of n is maximized. Note that a divisor of n is nice if it is divisible by every prime factor of n. For example, if n = 12, then its prime factors are [2,2,3], then 6 and 12 are nice divisors, while 3 and 4 are not.\n\nReturn the number of nice divisors of n. Since that number can be too large, return it modulo 109 + 7.\nNote that a prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. The prime factors of a number n is a list of prime numbers such that their product equals n.",
        "examples": [
            "Input: primeFactors = 5\r\nOutput: 6\r\nExplanation: 200 is a valid value of n.\r\nIt has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200].\r\nThere is not other value of n that has at most 5 prime factors and more nice divisors.",
            "Input: primeFactors = 8\r\nOutput: 18"
        ],
        "constrains": "1 <= primeFactors <= 109",
        "release_time": 1616918029,
        "oracle_code": "class Solution {\n    int MOD = (int)(1e9+7);\n\n    public int maxNiceDivisors(int n) {\n        if(n <= 3) return n;\n        \n        /*\n            Approach\n            let say\n            m = (p1 ^ e1) * (p2 ^ e2) ....  (pn ^ en)\n            where p1, p2 ..... pn are primes\n            and e1, e2, .. ..en are exponeent (power)\n            \n            As given n is the prime factor, \n            n will be n = e1 + e2 + e3 .... en\n            \n            and number of divisor will \n              divisorCount =  e1 * e2 * e3 .... en\n            \n            \n            As in give problem statement, we want maximum divisor count\n            so if want max divisor, so must large exponent,\n            for largerst exponent, we must have smallest prime number as\n            possible as.\n            \n            \n            for this we can use only 2 numbers ,  2 and 3 as prime numbers\n            \n            we can convert any big number into 2s, 3s power\n            \n            Algorithm\n            1. Keep adding 3s as long as n \\u2265 5 and then subtarct 3 \n            2. at end it will left, either 0, 2, 4\n            3. so multiple the result by remaining n (except 0)\n            \n        */\n        \n        \n        long divisorCount = 1L;\n        int remainder = n % 3;\n        \n        if(remainder == 0){\n            divisorCount = power(3, n / 3);\n        \n        }else if(remainder == 1) {\n            divisorCount = 4 * power(3, (n - 4) / 3); \n        \n        }else if(remainder == 2){\n            divisorCount = 2 * power(3, n / 3);\n        }\n        \n        return (int) (divisorCount % MOD);\n    }\n    \n    private long power(long num, long exp){\n        if (exp == 1) return num;\n        if (exp == 0) return 1;\n        \n        long k1 = power(num, exp / 2);\n        if (exp % 2 == 0) {\n            return (k1 * k1) % MOD;\n        } else {\n            return (k1 * k1 * num) % MOD;\n        }\n    }\n}",
        "content": "**PLEASE UPVOTE IF YOU LIKE THIS SOLUTION**\\n\\n\\n\\n```\\nclass Solution {\\n    int MOD = (int)(1e9+7);\\n\\n    public int maxNiceDivisors(int n) {\\n        if(n <= 3) return n;\\n        \\n        /*\\n            Approach\\n            let say\\n            m = (p1 ^ e1) * (p2 ^ e2) ....  (pn ^ en)\\n            where p1, p2 ..... pn are primes\\n            and e1, e2, .. ..en are exponeent (power)\\n            \\n            As given n is the prime factor, \\n            n will be n = e1 + e2 + e3 .... en\\n            \\n            and number of divisor will \\n              divisorCount =  e1 * e2 * e3 .... en\\n            \\n            \\n            As in give problem statement, we want maximum divisor count\\n            so if want max divisor, so must large exponent,\\n            for largerst exponent, we must have smallest prime number as\\n            possible as.\\n            \\n            \\n            for this we can use only 2 numbers ,  2 and 3 as prime numbers\\n            \\n            we can convert any big number into 2s, 3s power\\n            \\n            Algorithm\\n            1. Keep adding 3s as long as n \\u2265 5 and then subtarct 3 \\n            2. at end it will left, either 0, 2, 4\\n            3. so multiple the result by remaining n (except 0)\\n            \\n        */\\n        \\n        \\n        long divisorCount = 1L;\\n        int remainder = n % 3;\\n        \\n        if(remainder == 0){\\n            divisorCount = power(3, n / 3);\\n        \\n        }else if(remainder == 1) {\\n            divisorCount = 4 * power(3, (n - 4) / 3); \\n        \\n        }else if(remainder == 2){\\n            divisorCount = 2 * power(3, n / 3);\\n        }\\n        \\n        return (int) (divisorCount % MOD);\\n    }\\n    \\n    private long power(long num, long exp){\\n        if (exp == 1) return num;\\n        if (exp == 0) return 1;\\n        \\n        long k1 = power(num, exp / 2);\\n        if (exp % 2 == 0) {\\n            return (k1 * k1) % MOD;\\n        } else {\\n            return (k1 * k1 * num) % MOD;\\n        }\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "count-primes",
        "description": "Given an integer n, return the number of prime numbers that are strictly less than n.",
        "examples": [
            "Input: n = 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.",
            "Input: n = 0\nOutput: 0",
            "Input: n = 1\nOutput: 0"
        ],
        "constrains": "0 <= n <= 5 * 106",
        "release_time": 1688665208,
        "oracle_code": "class Solution {\n    public int countPrimes(int n) {\n        if(n<2) return 0;\n        boolean[] primes = new boolean[n];\n         Arrays.fill(primes, true);\n         \n        int count=0;\n        for (int p = 2;p < n; p++) {\n            if(primes[p])\n            {\n                count++;\n                 if((long)p*p<n)\n                {\n                     for(int i=p*p;i<n;i+=p)\n                     primes[i]=false;\n                }\n\n            }\n          }\n    return count;\n    }\n        \n \n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrimes(int n) {\\n        if(n<2) return 0;\\n        boolean[] primes = new boolean[n];\\n         Arrays.fill(primes, true);\\n         \\n        int count=0;\\n        for (int p = 2;p < n; p++) {\\n            if(primes[p])\\n            {\\n                count++;\\n                 if((long)p*p<n)\\n                {\\n                     for(int i=p*p;i<n;i+=p)\\n                     primes[i]=false;\\n                }\\n\\n            }\\n          }\\n    return count;\\n    }\\n        \\n \\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "split-array-into-consecutive-subsequences",
        "description": "You are given an integer array nums that is sorted in non-decreasing order.\nDetermine if it is possible to split nums into one or more subsequences such that both of the following conditions are true:\n\nEach subsequence is a consecutive increasing sequence (i.e. each integer is exactly one more than the previous integer).\nAll subsequences have a length of 3 or more.\n\nReturn true if you can split nums according to the above conditions, or false otherwise.\nA subsequence of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., [1,3,5] is a subsequence of [1,2,3,4,5] while [1,3,2] is not).",
        "examples": [
            "Input: nums = [1,2,3,3,4,5]\nOutput: true\nExplanation: nums can be split into the following subsequences:\n[1,2,3,3,4,5] --> 1, 2, 3\n[1,2,3,3,4,5] --> 3, 4, 5",
            "Input: nums = [1,2,3,3,4,4,5,5]\nOutput: true\nExplanation: nums can be split into the following subsequences:\n[1,2,3,3,4,4,5,5] --> 1, 2, 3, 4, 5\n[1,2,3,3,4,4,5,5] --> 3, 4, 5",
            "Input: nums = [1,2,3,4,4,5]\nOutput: false\nExplanation: It is impossible to split nums into consecutive increasing subsequences of length 3 or more."
        ],
        "constrains": "1 <= nums.length <= 104\n-1000 <= nums[i] <= 1000\nnums is sorted in non-decreasing order.",
        "release_time": 1599999408,
        "oracle_code": "// This is a greedy approach. The whole idea is to first look for an existing group\n// to join for the current num. If no, then create a new group. \n// Here a group means group of 3 or more numbers as mentioned in question description. \n\n//Well, If u didn't understand, keep the above story of company in mind and try to understand the code below through comments, you will be fine.\n\nclass Solution {\n    public boolean isPossible(int[] nums) {\n        // This hashmap tells us about whether a number in num is available for a job or not\n        HashMap<Integer,Integer> avaibilityMap = new HashMap<>();\n        \n        // This hashmap tells a number (say x), if there is a job vacancy for them\n        HashMap<Integer,Integer> wantMap = new HashMap<>();\n        \n        // We store the count of every num in nums into avaibilityMap. Basically, a number's count is the avaibility of it.\n        for(int i : nums){\n            avaibilityMap.put(i, avaibilityMap.getOrDefault(i,0)+1);\n        }\n        \n        // We iterate through each number in the nums array. Remember the story ? So, treat them like a person.\n        for(int i=0;i<nums.length;i++){\n            // First we check if our current num/person is available. If it is not we just continue with next num/person\n            if(avaibilityMap.get(nums[i])<=0){\n                continue;\n            }\n            \n            // If the person is available, first we check if there is a job vacancy for him/her. Basically, is someone looking for him/her?\n            else if(wantMap.getOrDefault(nums[i],0)>0){\n                // Yes, someone is looking, so we decrease the avaibility count of that number\n                avaibilityMap.put(nums[i], avaibilityMap.getOrDefault(nums[i],0)-1);\n                \n                // we also decrease its count from the job vacancy space / wantMap\n                wantMap.put(nums[i], wantMap.getOrDefault(nums[i],0)-1);\n                \n                // Then as a goodwill, he/she will also create a job vacancy for (num[i]+1) in job vacancy space / wantMap, as we need consecutive numbers only\n                wantMap.put(nums[i]+1, wantMap.getOrDefault(nums[i]+1,0)+1);\n            }\n            \n            // Ooh, we are here means nums[i] was not able to find a job.\n            // so, nums[i] tries to start his/her own company by checking avaibility of his/her friends i.e. (nums[i]+1) and (nums[i]+2)\n            else if(avaibilityMap.getOrDefault(nums[i],0)>0 && avaibilityMap.getOrDefault(nums[i]+1,0)>0 && avaibilityMap.getOrDefault(nums[i]+2,0)>0){\n                \n                // Yay! both 2 friends are available. Let's start a company.\n                // So we decrease the avaibility count of nums[i], (nums[i]+1) and (nums[i]+2) from the \n                // avaibilityMap\n                avaibilityMap.put(nums[i], avaibilityMap.getOrDefault(nums[i],0)-1);\n                avaibilityMap.put(nums[i]+1, avaibilityMap.getOrDefault(nums[i]+1,0)-1);\n                avaibilityMap.put(nums[i]+2, avaibilityMap.getOrDefault(nums[i]+2,0)-1);\n                \n                // Also, as a goodwill, we create a new job vacancy for (nums[i]+3), as we need consecutive numbers only\n                wantMap.put(nums[i]+3, wantMap.getOrDefault(nums[i]+3,0)+1);\n            }\n            \n            // Bad luck case, nums[i] not able to start his/her company, so just return false\n            else{\n                return false;\n            }\n        }\n        \n        // All good till here so we return true\n        return true;\n    }\n}",
        "content": "**Consider this hypothetical story to better understand this question : [After reading this you will understand the code like a breeze. I hope you enjoy the story!]**\\n\\n1. Consider the numbers in the nums array are actual persons that are looking for a job. If they are available, they try to find a job. If no one wants them they go on to start their own company. But, here is the twist, a new company can be started only if it can have atleast 3 persons available. ( Are you thinking why 3? => Read the question description again.)\\n\\n2. The most important thing to note here is that each person in num, first tries to look for a job and if he/she does not gets success, he/she starts a company with 3 consecutive members. [as we want to find subsequences with consecutive numbers of length atleast 3. Think a subsequence as a company for now]\\n\\n3. So, let\\'s come to our first scenario - A person `(let\\'s say x)` looks for a job and finds it. YAY!! So, this person joins an already existing company and then he/she creates a vacancy for another person `x+1` in the job search section, so that another one like him/her do not have to face any struggle like he/she faced. He/She is a good guy/girl. No?\\n\\n4. Now, let\\'s come to our second possibility of our story. The guy/girl was not able to find a job :( \\nBUT, he/she `(let\\'s say x)` was very ambitious. So he/she decides- \\'Let\\'s build a company with me (that is x), x+1 and x+2\\'. So he/she checks with (x+1) and (x+2), if they are available to build a company as it requires 3 persons to start a company. \\n\\nHere comes two scenario:\\n\\na. x finds both the potential teammates/partners, `(x+1)` & `(x+2)` to be available so, they go on to start a new company and then after finding their own company, as a goodwill they create a new job vacancy looking for `(x+3)` so that `(x+3)` do not face any struggle they faced. People are good, believe me :) \\n\\nb. x was just out of luck, he/she was able to find their teammates i.e. (x+1) & (x+2). In this case have hope and just return false to quickly complete the program execution (BACK TO REALITY :p )\\n\\n\\n**Here is the code [If you haven\\'t read the story above, please read it to understand the solution] :**\\n\\n```\\n// This is a greedy approach. The whole idea is to first look for an existing group\\n// to join for the current num. If no, then create a new group. \\n// Here a group means group of 3 or more numbers as mentioned in question description. \\n\\n//Well, If u didn\\'t understand, keep the above story of company in mind and try to understand the code below through comments, you will be fine.\\n\\nclass Solution {\\n    public boolean isPossible(int[] nums) {\\n        // This hashmap tells us about whether a number in num is available for a job or not\\n        HashMap<Integer,Integer> avaibilityMap = new HashMap<>();\\n        \\n        // This hashmap tells a number (say x), if there is a job vacancy for them\\n        HashMap<Integer,Integer> wantMap = new HashMap<>();\\n        \\n        // We store the count of every num in nums into avaibilityMap. Basically, a number\\'s count is the avaibility of it.\\n        for(int i : nums){\\n            avaibilityMap.put(i, avaibilityMap.getOrDefault(i,0)+1);\\n        }\\n        \\n        // We iterate through each number in the nums array. Remember the story ? So, treat them like a person.\\n        for(int i=0;i<nums.length;i++){\\n            // First we check if our current num/person is available. If it is not we just continue with next num/person\\n            if(avaibilityMap.get(nums[i])<=0){\\n                continue;\\n            }\\n            \\n            // If the person is available, first we check if there is a job vacancy for him/her. Basically, is someone looking for him/her?\\n            else if(wantMap.getOrDefault(nums[i],0)>0){\\n                // Yes, someone is looking, so we decrease the avaibility count of that number\\n                avaibilityMap.put(nums[i], avaibilityMap.getOrDefault(nums[i],0)-1);\\n                \\n                // we also decrease its count from the job vacancy space / wantMap\\n                wantMap.put(nums[i], wantMap.getOrDefault(nums[i],0)-1);\\n                \\n                // Then as a goodwill, he/she will also create a job vacancy for (num[i]+1) in job vacancy space / wantMap, as we need consecutive numbers only\\n                wantMap.put(nums[i]+1, wantMap.getOrDefault(nums[i]+1,0)+1);\\n            }\\n            \\n            // Ooh, we are here means nums[i] was not able to find a job.\\n            // so, nums[i] tries to start his/her own company by checking avaibility of his/her friends i.e. (nums[i]+1) and (nums[i]+2)\\n            else if(avaibilityMap.getOrDefault(nums[i],0)>0 && avaibilityMap.getOrDefault(nums[i]+1,0)>0 && avaibilityMap.getOrDefault(nums[i]+2,0)>0){\\n                \\n                // Yay! both 2 friends are available. Let\\'s start a company.\\n                // So we decrease the avaibility count of nums[i], (nums[i]+1) and (nums[i]+2) from the \\n                // avaibilityMap\\n                avaibilityMap.put(nums[i], avaibilityMap.getOrDefault(nums[i],0)-1);\\n                avaibilityMap.put(nums[i]+1, avaibilityMap.getOrDefault(nums[i]+1,0)-1);\\n                avaibilityMap.put(nums[i]+2, avaibilityMap.getOrDefault(nums[i]+2,0)-1);\\n                \\n                // Also, as a goodwill, we create a new job vacancy for (nums[i]+3), as we need consecutive numbers only\\n                wantMap.put(nums[i]+3, wantMap.getOrDefault(nums[i]+3,0)+1);\\n            }\\n            \\n            // Bad luck case, nums[i] not able to start his/her company, so just return false\\n            else{\\n                return false;\\n            }\\n        }\\n        \\n        // All good till here so we return true\\n        return true;\\n    }\\n}\\n```\\n\\n\\n***Again to reiterate the logic :\\nThe logic is to just apply a greedy approach and try to find a group of 3 consecutive numbers first and then for other numbers try to check if existing groups can be used or it is neccessary to create a new group.***\\n\\n**Hope you enjoyed the story and if you liked it please upvote.Thanks!**",
        "level": "medium"
    },
    {
        "slug": "destroying-asteroids",
        "description": "You are given an integer mass, which represents the original mass of a planet. You are further given an integer array asteroids, where asteroids[i] is the mass of the ith asteroid.\nYou can arrange for the planet to collide with the asteroids in any arbitrary order. If the mass of the planet is greater than or equal to the mass of the asteroid, the asteroid is destroyed and the planet gains the mass of the asteroid. Otherwise, the planet is destroyed.\nReturn true if all asteroids can be destroyed. Otherwise, return false.",
        "examples": [
            "Input: mass = 10, asteroids = [3,9,19,5,21]\nOutput: true\nExplanation: One way to order the asteroids is [9,19,5,3,21]:\n- The planet collides with the asteroid with a mass of 9. New planet mass: 10 + 9 = 19\n- The planet collides with the asteroid with a mass of 19. New planet mass: 19 + 19 = 38\n- The planet collides with the asteroid with a mass of 5. New planet mass: 38 + 5 = 43\n- The planet collides with the asteroid with a mass of 3. New planet mass: 43 + 3 = 46\n- The planet collides with the asteroid with a mass of 21. New planet mass: 46 + 21 = 67\nAll asteroids are destroyed.",
            "Input: mass = 5, asteroids = [4,9,23,4]\nOutput: false\nExplanation: \nThe planet cannot ever gain enough mass to destroy the asteroid with a mass of 23.\nAfter the planet destroys the other asteroids, it will have a mass of 5 + 4 + 9 + 4 = 22.\nThis is less than 23, so a collision would not destroy the last asteroid."
        ],
        "constrains": "1 <= mass <= 105\n1 <= asteroids.length <= 105\n1 <= asteroids[i] <= 105",
        "release_time": 1680364813,
        "oracle_code": "class Solution {\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\n        Arrays.sort(asteroids);\n        int c=0;\n        long s=(long)mass;\n        for(int i=0;i<asteroids.length;i++)\n        {\n            long d=(long)asteroids[i];\n            if(s>=d)\n            {\n                c+=1;\n                s+=d;\n            }\n        }\n        if(c==asteroids.length)return true;\n        else return false;\n    }\n}",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        int c=0;\\n        long s=(long)mass;\\n        for(int i=0;i<asteroids.length;i++)\\n        {\\n            long d=(long)asteroids[i];\\n            if(s>=d)\\n            {\\n                c+=1;\\n                s+=d;\\n            }\\n        }\\n        if(c==asteroids.length)return true;\\n        else return false;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "remove-colored-pieces-if-both-neighbors-are-the-same-color",
        "description": "There are n pieces arranged in a line, and each piece is colored either by 'A' or by 'B'. You are given a string colors of length n where colors[i] is the color of the ith piece.\nAlice and Bob are playing a game where they take alternating turns removing pieces from the line. In this game, Alice moves first.\n\nAlice is only allowed to remove a piece colored 'A' if both its neighbors are also colored 'A'. She is not allowed to remove pieces that are colored 'B'.\nBob is only allowed to remove a piece colored 'B' if both its neighbors are also colored 'B'. He is not allowed to remove pieces that are colored 'A'.\nAlice and Bob cannot remove pieces from the edge of the line.\nIf a player cannot make a move on their turn, that player loses and the other player wins.\n\nAssuming Alice and Bob play optimally, return true if Alice wins, or return false if Bob wins.",
        "examples": [
            "Input: colors = \"AAABABB\"\nOutput: true\nExplanation:\nAAABABB -> AABABB\nAlice moves first.\nShe removes the second 'A' from the left since that is the only 'A' whose neighbors are both 'A'.\n\nNow it's Bob's turn.\nBob cannot make a move on his turn since there are no 'B's whose neighbors are both 'B'.\nThus, Alice wins, so return true.",
            "Input: colors = \"AA\"\nOutput: false\nExplanation:\nAlice has her turn first.\nThere are only two 'A's and both are on the edge of the line, so she cannot move on her turn.\nThus, Bob wins, so return false.",
            "Input: colors = \"ABBBBBBBAAA\"\nOutput: false\nExplanation:\nABBBBBBBAAA -> ABBBBBBBAA\nAlice moves first.\nHer only option is to remove the second to last 'A' from the right.\n\nABBBBBBBAA -> ABBBBBBAA\nNext is Bob's turn.\nHe has many options for which 'B' piece to remove. He can pick any.\n\nOn Alice's second turn, she has no more pieces that she can remove.\nThus, Bob wins, so return false."
        ],
        "constrains": "1 <=\u00a0colors.length <= 105\ncolors\u00a0consists of only the letters\u00a0'A'\u00a0and\u00a0'B'",
        "release_time": 1657989117,
        "oracle_code": "class Solution {\n    public boolean winnerOfGame(String s) {\n        //count the triplets\nint n = s.length();\n    \n        int a=0;\n        int b=0;\n        \n        for(int i=1; i<n-1; i++)\n        {\n            if(s.charAt(i)=='A' && s.charAt(i-1)=='A' && s.charAt(i+1)=='A' )\n        a++;\n            else if(s.charAt(i)=='B' && s.charAt(i-1)=='B' && s.charAt(i+1)=='B' )\n        b++;\n            \n            }\n        if(a<=b)\n            return false;\n        else\n            return true;\n        \n    \n    }\n}",
        "content": "Idea behind it is that you need to count the number of triplets of both A and B \\nint a -> number of triplets of \\'A\\'\\nint b -> number of triplets of \\'B\\'\\nif(b>=a) BOB wins else Alice wins\\n\\nAs Alice has to make a move first so if she wants to win there should be atleast  1 more  triplets of A than B\\n\\nEg There are 4 triplets of both A and B  (a=4, b=4) \\n1. Alice removes 1 A (a=3, b=4)\\n2. Bob removes 1 B (a=3, b=3)\\n3. (a=2, b=3)\\n4. (a=2, b=2)\\n5. (a=1, b=2)\\n6. (a=1, b=1)\\n7. (a=0, b=1)\\n\\nClearly Alice will lose if both have same number of triplets\\nCode \\n\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String s) {\\n        //count the triplets\\nint n = s.length();\\n    \\n        int a=0;\\n        int b=0;\\n        \\n        for(int i=1; i<n-1; i++)\\n        {\\n            if(s.charAt(i)==\\'A\\' && s.charAt(i-1)==\\'A\\' && s.charAt(i+1)==\\'A\\' )\\n        a++;\\n            else if(s.charAt(i)==\\'B\\' && s.charAt(i-1)==\\'B\\' && s.charAt(i+1)==\\'B\\' )\\n        b++;\\n            \\n            }\\n        if(a<=b)\\n            return false;\\n        else\\n            return true;\\n        \\n    \\n    }\\n}\\n```\\nIf this helped you then please UpVote\\nThanks\\n\\n\\n",
        "level": "medium"
    },
    {
        "slug": "sort-array-by-increasing-frequency",
        "description": "Given an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.\nReturn the sorted array.",
        "examples": [
            "Input: nums = [1,1,2,2,2,3]\nOutput: [3,1,1,2,2,2]\nExplanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.",
            "Input: nums = [2,3,1,3,2]\nOutput: [1,3,3,2,2]\nExplanation: '2' and '3' both have a frequency of 2, so they are sorted in decreasing order.",
            "Input: nums = [-1,1,-6,4,5,-6,1,4,1]\nOutput: [5,-1,4,4,-6,-6,1,1,1]"
        ],
        "constrains": "1 <= nums.length <= 100\n-100 <= nums[i] <= 100",
        "release_time": 1685118755,
        "oracle_code": "class Solution {\n    public int[] frequencySort(int[] a) {\n\tArrayList<Integer>al=new ArrayList<>();\n\t    for(int i=0;i<a.length;i++){\n\t        al.add(a[i]);\n\t    }\n\t    \nTreeSet<Integer>t2=new TreeSet<>(al);\nint k[]=new int[t2.size()];\nint c[]=new int[t2.size()];\nint x=0;\n\t    for(int i:t2){\n\t        c[x]=i;\n\tk[x]=Collections.frequency(al,i);\n\tx++;\n\t    }\n\t    for(int i=0;i<k.length;i++){\n\t        for(int j=i+1;j<k.length;j++){\n\t            if(k[i]>=k[j]){\n\t                int t=k[i];\n\t                k[i]=k[j];\n\t                k[j]=t;\n\t                int t1=c[i];\n\t                c[i]=c[j];\n\t                c[j]=t1;\n\t            }\n\t        }    \n\t    }\n\t\t\tint ans[]=new int[a.length];\n\t\t\tint r=0;\n\t    for(int i=0;i<k.length;i++){\n\t        int l=k[i];\n\t        while(l>0){\n\t        ans[r]=c[i];\n\t\t\tr++;\n\t        l--;\n\t        }\n\t    }\nreturn ans;\n    }\n}",
        "content": "# Code\\n```\\nclass Solution {\\n    public int[] frequencySort(int[] a) {\\n\\tArrayList<Integer>al=new ArrayList<>();\\n\\t    for(int i=0;i<a.length;i++){\\n\\t        al.add(a[i]);\\n\\t    }\\n\\t    \\nTreeSet<Integer>t2=new TreeSet<>(al);\\nint k[]=new int[t2.size()];\\nint c[]=new int[t2.size()];\\nint x=0;\\n\\t    for(int i:t2){\\n\\t        c[x]=i;\\n\\tk[x]=Collections.frequency(al,i);\\n\\tx++;\\n\\t    }\\n\\t    for(int i=0;i<k.length;i++){\\n\\t        for(int j=i+1;j<k.length;j++){\\n\\t            if(k[i]>=k[j]){\\n\\t                int t=k[i];\\n\\t                k[i]=k[j];\\n\\t                k[j]=t;\\n\\t                int t1=c[i];\\n\\t                c[i]=c[j];\\n\\t                c[j]=t1;\\n\\t            }\\n\\t        }    \\n\\t    }\\n\\t\\t\\tint ans[]=new int[a.length];\\n\\t\\t\\tint r=0;\\n\\t    for(int i=0;i<k.length;i++){\\n\\t        int l=k[i];\\n\\t        while(l>0){\\n\\t        ans[r]=c[i];\\n\\t\\t\\tr++;\\n\\t        l--;\\n\\t        }\\n\\t    }\\nreturn ans;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "combination-sum",
        "description": "Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\nThe test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.",
        "examples": [
            "Input: candidates = [2,3,6,7], target = 7\nOutput: [[2,2,3],[7]]\nExplanation:\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.",
            "Input: candidates = [2,3,5], target = 8\nOutput: [[2,2,2,2],[2,3,3],[3,5]]",
            "Input: candidates = [2], target = 1\nOutput: []"
        ],
        "constrains": "1 <= candidates.length <= 30\n2 <= candidates[i] <= 40\nAll elements of candidates are distinct.\n1 <= target <= 40",
        "release_time": 1692131867,
        "oracle_code": "class Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> currentSubset = new ArrayList<>();\n\n        findCombination(0, target, candidates, currentSubset, result);\n        return result;\n    }\n\n    public static void findCombination(int index, int target, int[] candidates, List<Integer> currentSubset, List<List<Integer>> result) {\n        // checks if we have explored all the elements of array\n        if(index == candidates.length) {\n            if(target == 0) {\n                result.add(new ArrayList<>(currentSubset));\n            }\n            return;\n        }\n\n        if(candidates[index] <= target) {\n            currentSubset.add(candidates[index]);\n            \n            // After adding the element of curr index, iterate the left path until the base condition is met\n            findCombination(index, target - candidates[index], candidates, currentSubset, result);\n        \n            // this is required because when the above recursion call \n            // is executed then the Data structure still has curr index element so we need to remove it\n            currentSubset.remove(currentSubset.size() - 1);\n        }\n\n        // check for the next element of array\n        findCombination(index + 1, target, candidates, currentSubset, result);\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nwe need to explore all the options for each element and find a combination such that sum of the combination is equal to target. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\nat each index we have two options\\n1) pick the element (left path)\\n2) dont pick the element (right path)\\n\\n- now when we pick the element (the left path), then we add that element in our data structure and reduce the target value.\\n    \\nLets consider the following\\n \\n    structure of the function F() - \\n\\n            F(index, target - arr[index], empty Data Structure)\\n\\n    arr -   [2,   3,   6,   7]  \\ttarget = 7\\n            (0), (1), (2), (3)\\n\\n                                F(0, 7, [])\\n                                   /   \\\\\\n                                  /     \\\\\\n                                 /       \\\\\\n              (1-left)->  F(0, 5, [2])    F(1, 7, [])  <-(1-right)\\n                             /   \\\\      \\t     \\n                            /     \\\\ \\t  \\n                           /       \\\\        \\n    (2-left)->  F(0, 3, [2,2])    F(1, 5, [2])   <-(2-right)\\n\\nat Step`(1-left)`we took the element at index 0, added it to the data structure and then reduced the value of target to`7 - 2 = 5`\\n\\nLet\\'s say that we explored all the paths of`(2-left)`so now when the path backtracks to`(1-left)`we remove the last added value in the data structure i.e.`2`and then again try to explore the right path i.e.`(2-right)`.\\n\\n# Code\\n```\\nclass Solution {\\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\\n        List<List<Integer>> result = new ArrayList<>();\\n        List<Integer> currentSubset = new ArrayList<>();\\n\\n        findCombination(0, target, candidates, currentSubset, result);\\n        return result;\\n    }\\n\\n    public static void findCombination(int index, int target, int[] candidates, List<Integer> currentSubset, List<List<Integer>> result) {\\n        // checks if we have explored all the elements of array\\n        if(index == candidates.length) {\\n            if(target == 0) {\\n                result.add(new ArrayList<>(currentSubset));\\n            }\\n            return;\\n        }\\n\\n        if(candidates[index] <= target) {\\n            currentSubset.add(candidates[index]);\\n            \\n            // After adding the element of curr index, iterate the left path until the base condition is met\\n            findCombination(index, target - candidates[index], candidates, currentSubset, result);\\n        \\n            // this is required because when the above recursion call \\n            // is executed then the Data structure still has curr index element so we need to remove it\\n            currentSubset.remove(currentSubset.size() - 1);\\n        }\\n\\n        // check for the next element of array\\n        findCombination(index + 1, target, candidates, currentSubset, result);\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "new-21-game",
        "description": "Alice plays the following game, loosely based on the card game \"21\".\nAlice starts with 0 points and draws numbers while she has less than k points. During each draw, she gains an integer number of points randomly from the range [1, maxPts], where maxPts is an integer. Each draw is independent and the outcomes have equal probabilities.\nAlice stops drawing numbers when she gets k or more points.\nReturn the probability that Alice has n or fewer points.\nAnswers within 10-5 of the actual answer are considered accepted.",
        "examples": [
            "Input: n = 10, k = 1, maxPts = 10\nOutput: 1.00000\nExplanation: Alice gets a single card, then stops.",
            "Input: n = 6, k = 1, maxPts = 10\nOutput: 0.60000\nExplanation: Alice gets a single card, then stops.\nIn 6 out of 10 possibilities, she is at or below 6 points.",
            "Input: n = 21, k = 17, maxPts = 10\nOutput: 0.73278"
        ],
        "constrains": "0 <= k <= n <= 104\n1 <= maxPts <= 104",
        "release_time": 1684986822,
        "oracle_code": "class Solution {\n    public double new21Game(int n, int k, int maxPts) {\n        if (k == 0 || n >= k + maxPts)\n        return 1.0;\n    \n    double[] dp = new double[n + 1];\n    double windowSum = 1.0;\n    double probability = 0.0;\n    \n    dp[0] = 1.0;\n    \n    for (int i = 1; i <= n; i++) {\n        dp[i] = windowSum / maxPts;\n        \n        if (i < k)\n            windowSum += dp[i];\n        else\n            probability += dp[i];\n        \n        if (i - maxPts >= 0)\n            windowSum -= dp[i - maxPts];\n    }\n    \n    return probability;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe goal is to calculate the probability that Alice has n or fewer points. To achieve this, we can consider the probability at each point and use dynamic programming to build up the probabilities iteratively.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. First, we handle the base cases. If k is 0 or if n is greater than or equal to k + maxPts, Alice will always stop drawing after the first round and have a probability of 1.0 to have n or fewer points.\\n1. We create an array dp to store the probabilities for each possible number of points.\\n1. Initialize dp[0] to 1.0, indicating that Alice starts with 0 points.\\n1. We use a sliding window approach to calculate the probabilities iteratively. We maintain a windowSum variable that represents the sum of probabilities within the window of size maxPts.\\n1. Iterate from 1 to n and calculate dp[i] as windowSum / maxPts since each draw has equal probabilities.\\n1. If i is less than k, we update windowSum by adding dp[i] since we can continue drawing.\\n1. Otherwise, if i is greater than or equal to k, we update probability by adding dp[i] since Alice has stopped drawing at this point.\\n1. We adjust the windowSum by subtracting the probability that falls outside the window, i.e., dp[i - maxPts], if it exists.\\n1. Finally, we return the calculated probability.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the solution is O(n) because we iterate from 1 to n to calculate the probabilities.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity is O(n) because we use an array dp of size n+1 to store the probabilities.\\n\\n# Code\\n```\\nclass Solution {\\n    public double new21Game(int n, int k, int maxPts) {\\n        if (k == 0 || n >= k + maxPts)\\n        return 1.0;\\n    \\n    double[] dp = new double[n + 1];\\n    double windowSum = 1.0;\\n    double probability = 0.0;\\n    \\n    dp[0] = 1.0;\\n    \\n    for (int i = 1; i <= n; i++) {\\n        dp[i] = windowSum / maxPts;\\n        \\n        if (i < k)\\n            windowSum += dp[i];\\n        else\\n            probability += dp[i];\\n        \\n        if (i - maxPts >= 0)\\n            windowSum -= dp[i - maxPts];\\n    }\\n    \\n    return probability;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "rotating-the-box",
        "description": "You are given an m x n matrix of characters box representing a side-view of a box. Each cell of the box is one of the following:\n\nA stone '#'\nA stationary obstacle '*'\nEmpty '.'\n\nThe box is rotated 90 degrees clockwise, causing some of the stones to fall due to gravity. Each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. Gravity does not affect the obstacles' positions, and the inertia from the box's rotation does not affect the stones' horizontal positions.\nIt is guaranteed that each stone in box rests on an obstacle, another stone, or the bottom of the box.\nReturn an n x m matrix representing the box after the rotation described above.",
        "examples": [
            "Input: box = [[\"#\",\".\",\"#\"]]\r\nOutput: [[\".\"],\r\n\u00a0        [\"#\"],\r\n\u00a0        [\"#\"]]",
            "Input: box = [[\"#\",\".\",\"*\",\".\"],\r\n\u00a0             [\"#\",\"#\",\"*\",\".\"]]\r\nOutput: [[\"#\",\".\"],\r\n\u00a0        [\"#\",\"#\"],\r\n\u00a0        [\"*\",\"*\"],\r\n\u00a0        [\".\",\".\"]]",
            "Input: box = [[\"#\",\"#\",\"*\",\".\",\"*\",\".\"],\r\n\u00a0             [\"#\",\"#\",\"#\",\"*\",\".\",\".\"],\r\n\u00a0             [\"#\",\"#\",\"#\",\".\",\"#\",\".\"]]\r\nOutput: [[\".\",\"#\",\"#\"],\r\n\u00a0        [\".\",\"#\",\"#\"],\r\n\u00a0        [\"#\",\"#\",\"*\"],\r\n\u00a0        [\"#\",\"*\",\".\"],\r\n\u00a0        [\"#\",\".\",\"*\"],\r\n\u00a0        [\"#\",\".\",\".\"]]"
        ],
        "constrains": "m == box.length\nn == box[i].length\n1 <= m, n <= 500\nbox[i][j] is either '#', '*', or '.'.",
        "release_time": 1621094749,
        "oracle_code": "// O(n^2) time | O(n^2) space\nclass Solution {\n    public char[][] rotateTheBox(char[][] box) {\n        int m = box.length;\n        int n = box[0].length;\n        char[][] matrix = new char[n][m];   \n        \n        turnBox(box, matrix, m, n); // turn the box clockwise 90 degree\n        \n        turnGravity(matrix, n, m); // cause that falling effect, since matrix turned so n,m\n        \n        return matrix;\n    }\n    \n    public void turnGravity(char[][] matrix, int m, int n){\n        for(int c = 0; c < n; c++){\n            int last  = m-1;\n            for(int r = m-1; r >= 0; r--){\n                char val =  matrix[r][c];\n                if(val == '.') continue;\n                if(val == '*') last = r-1;\n                if(val == '#') {\n                    matrix[r][c] = '.';\n                    matrix[last][c] = '#';\n                    last--;\n                }\n            }\n        }\n    }\n    \n    public void turnBox(char[][] box, char[][] matrix, int m, int n){\n\t// numbers represents sequence it would be copied\n\t//[4][1]\n\t//[5][2]\n\t//[6][3]\n        for(int i = 0, c = m-1; i < m; i++,c--){ // c: 4,3,2,1..\n            for(int j = 0, r = 0; j < n; j++, r++){ // r:0,1,2,3..\n               matrix[r][c] = box[i][j];\n            }\n        }\n    }\n}",
        "content": "**So idea here is**\\n1. First turn 90 degree\\n2. Make things fall\\n\\n```\\n// O(n^2) time | O(n^2) space\\nclass Solution {\\n    public char[][] rotateTheBox(char[][] box) {\\n        int m = box.length;\\n        int n = box[0].length;\\n        char[][] matrix = new char[n][m];   \\n        \\n        turnBox(box, matrix, m, n); // turn the box clockwise 90 degree\\n        \\n        turnGravity(matrix, n, m); // cause that falling effect, since matrix turned so n,m\\n        \\n        return matrix;\\n    }\\n    \\n    public void turnGravity(char[][] matrix, int m, int n){\\n        for(int c = 0; c < n; c++){\\n            int last  = m-1;\\n            for(int r = m-1; r >= 0; r--){\\n                char val =  matrix[r][c];\\n                if(val == \\'.\\') continue;\\n                if(val == \\'*\\') last = r-1;\\n                if(val == \\'#\\') {\\n                    matrix[r][c] = \\'.\\';\\n                    matrix[last][c] = \\'#\\';\\n                    last--;\\n                }\\n            }\\n        }\\n    }\\n    \\n    public void turnBox(char[][] box, char[][] matrix, int m, int n){\\n\\t// numbers represents sequence it would be copied\\n\\t//[4][1]\\n\\t//[5][2]\\n\\t//[6][3]\\n        for(int i = 0, c = m-1; i < m; i++,c--){ // c: 4,3,2,1..\\n            for(int j = 0, r = 0; j < n; j++, r++){ // r:0,1,2,3..\\n               matrix[r][c] = box[i][j];\\n            }\\n        }\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "richest-customer-wealth",
        "description": "You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b customer has in the j\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b bank. Return the wealth that the richest customer has.\nA customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.",
        "examples": [
            "Input: accounts = [[1,2,3],[3,2,1]]\nOutput: 6\nExplanation:\n1st customer has wealth = 1 + 2 + 3 = 6\n2nd customer has wealth = 3 + 2 + 1 = 6\nBoth customers are considered the richest with a wealth of 6 each, so return 6.",
            "Input: accounts = [[1,5],[7,3],[3,5]]\nOutput: 10\nExplanation: \n1st customer has wealth = 6\n2nd customer has wealth = 10 \n3rd customer has wealth = 8\nThe 2nd customer is the richest with a wealth of 10.",
            "Input: accounts = [[2,8,7],[7,1,3],[1,9,5]]\nOutput: 17"
        ],
        "constrains": "m ==\u00a0accounts.length\nn ==\u00a0accounts[i].length\n1 <= m, n <= 50\n1 <= accounts[i][j] <= 100",
        "release_time": 1677838003,
        "oracle_code": "class Solution {\n    public int maximumWealth(int[][] accounts) {\n        int largest = accounts[0][0];\n        for(int customer[] : accounts){\n            int currentSum = 0;\n            for(int bank : customer) currentSum += bank;\n            largest = Math.max(largest, currentSum);\n        }\n        return largest;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity -> O(n x m)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity -> O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nPlssssssss Up Vote (^-^)\\n![images.jpeg](https://assets.leetcode.com/users/images/53cdccd9-6cb0-4b64-9808-5c2e027c747f_1678719675.3869877.jpeg)\\nPlssssssss Up Vote (^-^)\\n\\n`Very much thank you for visiting (*_*)` \\u2764\\uFE0F\\n\\n`Comment below and get a Up vote!` \\uD83D\\uDE0A\\n# Code\\n```\\nclass Solution {\\n    public int maximumWealth(int[][] accounts) {\\n        int largest = accounts[0][0];\\n        for(int customer[] : accounts){\\n            int currentSum = 0;\\n            for(int bank : customer) currentSum += bank;\\n            largest = Math.max(largest, currentSum);\\n        }\\n        return largest;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "row-with-maximum-ones",
        "description": "Given a m x n binary matrix mat, find the 0-indexed position of the row that contains the maximum count of ones, and the number of ones in that row.\nIn case there are multiple rows that have the maximum count of ones, the row with the smallest row number should be selected.\nReturn an array containing the index of the row, and the number of ones in it.",
        "examples": [
            "Input: mat = [[0,1],[1,0]]\nOutput: [0,1]\nExplanation: Both rows have the same number of 1's. So we return the index of the smaller row, 0, and the maximum count of ones (1). So, the answer is [0,1].",
            "Input: mat = [[0,0,0],[0,1,1]]\nOutput: [1,2]\nExplanation: The row indexed 1 has the maximum count of ones (2). So we return its index, 1, and the count. So, the answer is [1,2].",
            "Input: mat = [[0,0],[1,1],[0,0]]\nOutput: [1,2]\nExplanation: The row indexed 1 has the maximum count of ones (2). So the answer is [1,2]."
        ],
        "constrains": "m == mat.length\u00a0\nn == mat[i].length\u00a0\n1 <= m, n <= 100\u00a0\nmat[i][j] is either 0 or 1.",
        "release_time": 1684493016,
        "oracle_code": "class Solution {\n    public int[] rowAndMaximumOnes(int[][] mat) {\n        int count;\n        int maxCount = 0;\n        int maxCountRow = 0;\n        for(int i = 0; i < mat.length; i++) {\n            count = 0;\n            for(int j = 0; j < mat[0].length; j++) {\n                count += mat[i][j];\n            }\n            if(count > maxCount) {\n                maxCount = count;\n                maxCountRow = i;\n            }\n        }\n        return new int[]{maxCountRow, maxCount};\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] rowAndMaximumOnes(int[][] mat) {\\n        int count;\\n        int maxCount = 0;\\n        int maxCountRow = 0;\\n        for(int i = 0; i < mat.length; i++) {\\n            count = 0;\\n            for(int j = 0; j < mat[0].length; j++) {\\n                count += mat[i][j];\\n            }\\n            if(count > maxCount) {\\n                maxCount = count;\\n                maxCountRow = i;\\n            }\\n        }\\n        return new int[]{maxCountRow, maxCount};\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "minimum-number-of-food-buckets-to-feed-the-hamsters",
        "description": "You are given a 0-indexed string hamsters where hamsters[i] is either:\n\n'H' indicating that there is a hamster at index i, or\n'.' indicating that index i is empty.\n\nYou will add some number of food buckets at the empty indices in order to feed the hamsters. A hamster can be fed if there is at least one food bucket to its left or to its right. More formally, a hamster at index i can be fed if you place a food bucket at index i - 1 and/or at index i + 1.\nReturn the minimum number of food buckets you should place at empty indices to feed all the hamsters or -1 if it is impossible to feed all of them.",
        "examples": [
            "Input: hamsters = \"H..H\"\nOutput: 2\nExplanation: We place two food buckets at indices 1 and 2.\nIt can be shown that if we place only one food bucket, one of the hamsters will not be fed.",
            "Input: hamsters = \".H.H.\"\nOutput: 1\nExplanation: We place one food bucket at index 2.",
            "Input: hamsters = \".HHH.\"\nOutput: -1\nExplanation: If we place a food bucket at every empty index as shown, the hamster at index 2 will not be able to eat."
        ],
        "constrains": "1 <= hamsters.length <= 105\nhamsters[i] is either'H' or '.'.",
        "release_time": 1638030003,
        "oracle_code": "class Solution {\n    public int minimumBuckets(String street)\n    {\n        Set<Integer> set = new HashSet<>();\n        if(!street.contains(\".\")) return -1;\n        int count = 0;\n        for(int i=0;i<street.length();i++)\n        {\n            if(street.charAt(i)=='H')\n            {\n                if((i==0 && street.charAt(i+1)=='H')||(i==street.length()-1 && street.charAt(i-1)=='H'))\n                    return -1;\n                else if(i!=0 && i!=street.length()-1 && street.charAt(i+1)=='H' && street.charAt(i-1)=='H')\n                    return -1;\n            }\n            else if(i!=0 && i!=street.length()-1 && street.charAt(i-1)=='H' && street.charAt(i+1)=='H' && !set.contains(i-1) && !set.contains(i+1))\n            {\n                set.add(i-1);\n                set.add(i+1);\n                count++;\n            }\n        }\n        for(int i=0;i<street.length();i++)\n        {\n            if(street.charAt(i)=='H' && !set.contains(i))\n                count++;\n        }\n        return count;\n    }\n}",
        "content": "// first run a loop and check if there is any house whose left and right both doesn\\'t have a bucket return -1 from there and check in the same loop if there is any bucket whose left and right both are houses  if we find it save both the houses index in a set and make a single count of it because this bucket fills 2 houses water at a time\\n\\n// in 2nd loop just check how much houses are left and increase the count\\n\\n// just return the count\\n\\n\\n```\\nclass Solution {\\n    public int minimumBuckets(String street)\\n    {\\n        Set<Integer> set = new HashSet<>();\\n        if(!street.contains(\".\")) return -1;\\n        int count = 0;\\n        for(int i=0;i<street.length();i++)\\n        {\\n            if(street.charAt(i)==\\'H\\')\\n            {\\n                if((i==0 && street.charAt(i+1)==\\'H\\')||(i==street.length()-1 && street.charAt(i-1)==\\'H\\'))\\n                    return -1;\\n                else if(i!=0 && i!=street.length()-1 && street.charAt(i+1)==\\'H\\' && street.charAt(i-1)==\\'H\\')\\n                    return -1;\\n            }\\n            else if(i!=0 && i!=street.length()-1 && street.charAt(i-1)==\\'H\\' && street.charAt(i+1)==\\'H\\' && !set.contains(i-1) && !set.contains(i+1))\\n            {\\n                set.add(i-1);\\n                set.add(i+1);\\n                count++;\\n            }\\n        }\\n        for(int i=0;i<street.length();i++)\\n        {\\n            if(street.charAt(i)==\\'H\\' && !set.contains(i))\\n                count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "check-completeness-of-a-binary-tree",
        "description": "Given the root of a binary tree, determine if it is a complete binary tree.\nIn a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.",
        "examples": [
            "Input: root = [1,2,3,4,5,6]\nOutput: true\nExplanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.",
            "Input: root = [1,2,3,4,5,null,7]\nOutput: false\nExplanation: The node with value 7 isn't as far left as possible."
        ],
        "constrains": "The number of nodes in the tree is in the range [1, 100].\n1 <= Node.val <= 1000",
        "release_time": 1678844682,
        "oracle_code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isCompleteTree(TreeNode root) {\n        boolean end = false;\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        while(!queue.isEmpty()) {\n            TreeNode currentNode = queue.poll();\n            if(currentNode == null) {\n                end = true;\n            } else {\n                if(end) {\n                    return false;\n                }\n                queue.offer(currentNode.left);\n                queue.offer(currentNode.right);\n            }\n        }\n        return true;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public boolean isCompleteTree(TreeNode root) {\\n        boolean end = false;\\n        Queue<TreeNode> queue = new LinkedList<>();\\n        queue.offer(root);\\n        while(!queue.isEmpty()) {\\n            TreeNode currentNode = queue.poll();\\n            if(currentNode == null) {\\n                end = true;\\n            } else {\\n                if(end) {\\n                    return false;\\n                }\\n                queue.offer(currentNode.left);\\n                queue.offer(currentNode.right);\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "set-matrix-zeroes",
        "description": "Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\nYou must do it in place.",
        "examples": [
            "Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: [[1,0,1],[0,0,0],[1,0,1]]",
            "Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\nOutput: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]"
        ],
        "constrains": "m == matrix.length\nn == matrix[0].length\n1 <= m, n <= 200\n-231 <= matrix[i][j] <= 231 - 1",
        "release_time": 1692355209,
        "oracle_code": "class Solution {\n    public void setZeroes(int[][] matrix) {\n        ArrayList<Integer> row = new ArrayList<>();\n        ArrayList<Integer> col = new ArrayList<>();\n        for(int i=0; i<matrix.length; i++){\n            for(int j=0; j<matrix[0].length; j++){\n                if(matrix[i][j] == 0){\n                    row.add(i);\n                    col.add(j);\n                }\n            }\n        }\n\n         for(int i=0; i<matrix.length; i++){\n            if(row.contains(i)){\n                for(int j=0; j<matrix[0].length; j++){\n                    matrix[i][j] = 0;\n                }\n            }\n            else{\n                for(int j=0; j<matrix[0].length; j++){\n                    if(col.contains(j)){\n                        matrix[i][j] = 0;\n                    }\n                }\n            }\n        }\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nstoring data in first row and first col.\\n\\n# Complexity\\n- Time complexity:\\n- O(n*m)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n# brute force code :\\n```\\nclass Solution {\\n    public void setZeroes(int[][] matrix) {\\n        ArrayList<Integer> row = new ArrayList<>();\\n        ArrayList<Integer> col = new ArrayList<>();\\n        for(int i=0; i<matrix.length; i++){\\n            for(int j=0; j<matrix[0].length; j++){\\n                if(matrix[i][j] == 0){\\n                    row.add(i);\\n                    col.add(j);\\n                }\\n            }\\n        }\\n\\n         for(int i=0; i<matrix.length; i++){\\n            if(row.contains(i)){\\n                for(int j=0; j<matrix[0].length; j++){\\n                    matrix[i][j] = 0;\\n                }\\n            }\\n            else{\\n                for(int j=0; j<matrix[0].length; j++){\\n                    if(col.contains(j)){\\n                        matrix[i][j] = 0;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n```\\ntime - c for upper one is O(n+m)\\n\\n\\n\\n#  Optimize code\\n```\\nclass Solution {\\n    public void setZeroes(int[][] matrix) {\\n        boolean fr = false, fc = false;\\n        for(int i=0; i<matrix.length; i++){\\n            for(int j=0; j<matrix[0].length; j++){\\n                if(matrix[i][j] == 0){\\n                    if(i == 0) fr = true;\\n                    if(j == 0) fc = true;\\n                    matrix[i][0] = 0;\\n                    matrix[0][j] = 0;\\n                }\\n            }\\n        }\\n        for(int i=1; i<matrix.length; i++){\\n            for(int j=1; j<matrix[0].length; j++){\\n                if(matrix[i][0] == 0 || matrix[0][j] == 0){\\n                    matrix[i][j] = 0;\\n                }  \\n            }\\n        }\\n\\n        if(fr) {\\n            for(int i=0; i<matrix[0].length; i++){\\n                matrix[0][i] = 0;\\n            }\\n        }\\n        if(fc) {\\n            for(int i=0; i<matrix.length; i++){\\n                matrix[i][0] = 0;\\n            }\\n        }\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "maximal-score-after-applying-k-operations",
        "description": "You are given a 0-indexed integer array nums and an integer k. You have a starting score of 0.\nIn one operation:\n\nchoose an index i such that 0 <= i < nums.length,\nincrease your score by nums[i], and\nreplace nums[i] with ceil(nums[i] / 3).\n\nReturn the maximum possible score you can attain after applying exactly k operations.\nThe ceiling function ceil(val) is the least integer greater than or equal to val.",
        "examples": [
            "Input: nums = [10,10,10,10,10], k = 5\nOutput: 50\nExplanation: Apply the operation to each array element exactly once. The final score is 10 + 10 + 10 + 10 + 10 = 50.",
            "Input: nums = [1,10,3,3,3], k = 3\nOutput: 17\nExplanation: You can do the following operations:\nOperation 1: Select i = 1, so nums becomes [1,4,3,3,3]. Your score increases by 10.\nOperation 2: Select i = 1, so nums becomes [1,2,3,3,3]. Your score increases by 4.\nOperation 3: Select i = 2, so nums becomes [1,1,1,3,3]. Your score increases by 3.\nThe final score is 10 + 4 + 3 = 17."
        ],
        "constrains": "1 <= nums.length, k <= 105\n1 <= nums[i] <= 109",
        "release_time": 1673150548,
        "oracle_code": "class Solution {\n    public long maxKelements(int[] nums, int k) {\n    PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>() {\n        public int compare(Integer a, Integer b) {\n            return b - a;\n        }\n    });\n    \n    for (int num : nums) {\n        pq.add(num);\n    }\n        \n    long score = 0;\n    \n    for (int i = 0; i < k; i++) {\n        // Get the maximum value from the priority queue\n        int max = pq.poll();\n        \n        // Increase the score by the maximum value\n        score += max;\n        \n        // Replace the value with ceil(max / 3)\n        pq.add((int) Math.ceil(max / 3.0));\n    }\n    \n    return score;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long maxKelements(int[] nums, int k) {\\n    PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>() {\\n        public int compare(Integer a, Integer b) {\\n            return b - a;\\n        }\\n    });\\n    \\n    for (int num : nums) {\\n        pq.add(num);\\n    }\\n        \\n    long score = 0;\\n    \\n    for (int i = 0; i < k; i++) {\\n        // Get the maximum value from the priority queue\\n        int max = pq.poll();\\n        \\n        // Increase the score by the maximum value\\n        score += max;\\n        \\n        // Replace the value with ceil(max / 3)\\n        pq.add((int) Math.ceil(max / 3.0));\\n    }\\n    \\n    return score;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "unique-paths-iii",
        "description": "You are given an m x n integer array grid where grid[i][j] could be:\n\n1 representing the starting square. There is exactly one starting square.\n2 representing the ending square. There is exactly one ending square.\n0 representing empty squares we can walk over.\n-1 representing obstacles that we cannot walk over.\n\nReturn the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.",
        "examples": [
            "Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\nOutput: 2\nExplanation: We have the following two paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)",
            "Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]\nOutput: 4\nExplanation: We have the following four paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)",
            "Input: grid = [[0,1],[2,0]]\nOutput: 0\nExplanation: There is no path that walks over every empty square exactly once.\nNote that the starting and ending square can be anywhere in the grid."
        ],
        "constrains": "m == grid.length\nn == grid[i].length\n1 <= m, n <= 20\n1 <= m * n <= 20\n-1 <= grid[i][j] <= 2\nThere is exactly one starting cell and one ending cell.",
        "release_time": 1691850472,
        "oracle_code": "class Solution {\n    public int uniquePathsIII(int[][] grid) {\n        \n        int row = 0;\n        int col = 0;\n        for(int i = 0; i < grid.length; i++) {\n            for(int j = 0; j < grid[0].length; j++) {\n                if(grid[i][j] == 1) {\n                    row = i;\n                    col = j;\n                    break;\n                }\n            }\n        }\n        boolean[][] used = new boolean[grid.length][grid[0].length];\n        return count(grid, used, row, col);\n    }\n\n    int count(int[][] grid, boolean[][] used, int row, int col) {\n\n        used[row][col] = true;\n        if(grid[row][col] == 2) {\n            if(isValid(used, grid) && grid[row][col] != -1) {\n                used[row][col] = false;\n                return 1;\n            }\n            used[row][col] = false;\n            return 0;\n        }\n        if(grid[row][col] == -1) {\n            used[row][col] = false;\n            return 0;\n        }\n\n        int paths = 0;\n\n        //DOWN\n        if(row < grid.length - 1 && !used[row + 1][col]) {\n            paths += count(grid, used, row + 1, col);\n        }\n        //RIGHT\n        if(col < grid[0].length - 1 && !used[row][col + 1]) {\n            paths += count(grid, used, row, col + 1);\n        }\n        //UP\n        if(row > 0 && !used[row - 1][col]) {\n            paths += count(grid, used, row - 1, col);\n        }\n        //LEFT\n        if(col > 0 && !used[row][col - 1]) {\n            paths += count(grid, used, row, col - 1);\n        }\n\n        used[row][col] = false;\n        return paths;\n    }\n\n    boolean isValid(boolean[][] used, int[][] grid) {\n\n        for(int i = 0; i < used.length; i++) {\n            for(int j = 0; j < used[0].length; j++) {\n                if(grid[i][j] == 0) {\n                    if(!used[i][j]) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n}",
        "content": "# Complexity\\n- Time complexity: Exponential\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(m * n)\\nBecause we are using extra used 2D array of size m * n\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n\\n**CLEAN CODE :**\\n```\\nclass Solution {\\n    public int uniquePathsIII(int[][] grid) {\\n        \\n        int row = 0;\\n        int col = 0;\\n        for(int i = 0; i < grid.length; i++) {\\n            for(int j = 0; j < grid[0].length; j++) {\\n                if(grid[i][j] == 1) {\\n                    row = i;\\n                    col = j;\\n                    break;\\n                }\\n            }\\n        }\\n        boolean[][] used = new boolean[grid.length][grid[0].length];\\n        return count(grid, used, row, col);\\n    }\\n\\n    int count(int[][] grid, boolean[][] used, int row, int col) {\\n\\n        used[row][col] = true;\\n        if(grid[row][col] == 2) {\\n            if(isValid(used, grid) && grid[row][col] != -1) {\\n                used[row][col] = false;\\n                return 1;\\n            }\\n            used[row][col] = false;\\n            return 0;\\n        }\\n        if(grid[row][col] == -1) {\\n            used[row][col] = false;\\n            return 0;\\n        }\\n\\n        int paths = 0;\\n\\n        //DOWN\\n        if(row < grid.length - 1 && !used[row + 1][col]) {\\n            paths += count(grid, used, row + 1, col);\\n        }\\n        //RIGHT\\n        if(col < grid[0].length - 1 && !used[row][col + 1]) {\\n            paths += count(grid, used, row, col + 1);\\n        }\\n        //UP\\n        if(row > 0 && !used[row - 1][col]) {\\n            paths += count(grid, used, row - 1, col);\\n        }\\n        //LEFT\\n        if(col > 0 && !used[row][col - 1]) {\\n            paths += count(grid, used, row, col - 1);\\n        }\\n\\n        used[row][col] = false;\\n        return paths;\\n    }\\n\\n    boolean isValid(boolean[][] used, int[][] grid) {\\n\\n        for(int i = 0; i < used.length; i++) {\\n            for(int j = 0; j < used[0].length; j++) {\\n                if(grid[i][j] == 0) {\\n                    if(!used[i][j]) {\\n                        return false;\\n                    }\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```\\n\\n**CODE WITH EXPLANATION :**\\n```\\nclass Solution {\\n    public int uniquePathsIII(int[][] grid) {\\n        \\n        int row = 0;\\n        int col = 0;\\n\\n        //finding the starting square\\'s row and column\\n        for(int i = 0; i < grid.length; i++) {\\n            for(int j = 0; j < grid[0].length; j++) {\\n                if(grid[i][j] == 1) {\\n                    row = i;\\n                    col = j;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        //boolean array named (used) is used to store the squares which have already been used\\n        //till now in a particular path\\n\\n        boolean[][] used = new boolean[grid.length][grid[0].length];\\n\\n        return count(grid, used, row, col);\\n    }\\n\\n    int count(int[][] grid, boolean[][] used, int row, int col) {\\n\\n        used[row][col] = true;\\n\\n        //we have arrived at the ending square. Now, it might be possible, that the path we \\n        //followed till here from starting position, does not contain all the 0 squares\\n        //therefore to decide this we call the isValid function\\n        //Also, it might happen that there\\'s an obstacle on the same ending square, in this\\n        //case we won\\'t find any path because the destination square is itself an obstacle\\n        //so we return 0. and to check this only we have put another \\n        //condition grid[row][col] != -1\\n\\n        if(grid[row][col] == 2) {\\n            if(isValid(used, grid) && grid[row][col] != -1) {\\n                used[row][col] = false;\\n                return 1;\\n            }\\n            used[row][col] = false;\\n            return 0;\\n        }\\n\\n        //if we have arrived at an obstacle square, then return 0, because we can\\'t obtain \\n        //any further paths including this square, because this is an obstacle\\n        //while returning, unmark this square as used, i.e. mark it as unused\\n\\n        if(grid[row][col] == -1) {\\n            used[row][col] = false;\\n            return 0;\\n        }\\n\\n        int paths = 0;\\n\\n        //DOWN\\n        if(row < grid.length - 1 && !used[row + 1][col]) {\\n            paths += count(grid, used, row + 1, col);\\n        }\\n        //RIGHT\\n        if(col < grid[0].length - 1 && !used[row][col + 1]) {\\n            paths += count(grid, used, row, col + 1);\\n        }\\n        //UP\\n        if(row > 0 && !used[row - 1][col]) {\\n            paths += count(grid, used, row - 1, col);\\n        }\\n        //LEFT\\n        if(col > 0 && !used[row][col - 1]) {\\n            paths += count(grid, used, row, col - 1);\\n        }\\n\\n        //backtrack, mark the square as unused now!\\n        used[row][col] = false;\\n\\n        return paths;\\n    }\\n\\n    //to check whether the path which we have travelled from starting square to ending square\\n    //contains all the 0 squares in it or not. If the path does not contain all the 0 sqaures\\n    //then isValid return false, and we do not count this path and hence return 0 in the count\\n    //function.\\n    //if the path contains all the 0 squares, then isValid return true, and hence \\n    //we count this path and hence in count function we return 1, as we got one path\\n    //which contains all the 0 squares.\\n\\n    boolean isValid(boolean[][] used, int[][] grid) {\\n\\n        for(int i = 0; i < used.length; i++) {\\n            for(int j = 0; j < used[0].length; j++) {\\n                if(grid[i][j] == 0) {\\n                    if(!used[i][j]) {\\n                        return false;\\n                    }\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```\\n**NO NEED OF ISVALID FUNCTION :**\\n\\n```\\nclass Solution {\\n    public int uniquePathsIII(int[][] grid) {\\n        \\n        int row = 0;\\n        int col = 0;\\n        int countZeros = 0;\\n        for(int i = 0; i < grid.length; i++) {\\n            for(int j = 0; j < grid[0].length; j++) {\\n                if(grid[i][j] == 1) {\\n                    row = i;\\n                    col = j;\\n                }\\n                if(grid[i][j] == 0) {\\n                    countZeros++;\\n                }\\n            }\\n        }\\n        boolean[][] used = new boolean[grid.length][grid[0].length];\\n        return count(grid, used, row, col, countZeros + 1);\\n    }\\n\\n    int count(int[][] grid, boolean[][] used, int row, int col, int countZeros) {\\n\\n        used[row][col] = true;\\n        if(grid[row][col] == 2) {\\n            if(countZeros == 0 && grid[row][col] != -1) {\\n                used[row][col] = false;\\n                return 1;\\n            }\\n            used[row][col] = false;\\n            return 0;\\n        }\\n        if(grid[row][col] == -1) {\\n            used[row][col] = false;\\n            return 0;\\n        }\\n\\n        int paths = 0;\\n\\n        //DOWN\\n        if(row < grid.length - 1 && !used[row + 1][col]) {\\n            paths += count(grid, used, row + 1, col, countZeros - 1);\\n        }\\n        //RIGHT\\n        if(col < grid[0].length - 1 && !used[row][col + 1]) {\\n            paths += count(grid, used, row, col + 1, countZeros - 1);\\n        }\\n        //UP\\n        if(row > 0 && !used[row - 1][col]) {\\n            paths += count(grid, used, row - 1, col, countZeros - 1);\\n        }\\n        //LEFT\\n        if(col > 0 && !used[row][col - 1]) {\\n            paths += count(grid, used, row, col - 1, countZeros - 1);\\n        }\\n\\n        used[row][col] = false;\\n        return paths;\\n    }\\n}\\n```\\n![cat.jpeg](https://assets.leetcode.com/users/images/dbaf10c4-ebb1-47e6-abb2-32d99d5c3a38_1691850467.298222.jpeg)\\n\\n",
        "level": "hard"
    },
    {
        "slug": "make-array-strictly-increasing",
        "description": "Given two integer arrays\u00a0arr1 and arr2, return the minimum number of operations (possibly zero) needed\u00a0to make arr1 strictly increasing.\nIn one operation, you can choose two indices\u00a00 <=\u00a0i < arr1.length\u00a0and\u00a00 <= j < arr2.length\u00a0and do the assignment\u00a0arr1[i] = arr2[j].\nIf there is no way to make\u00a0arr1\u00a0strictly increasing,\u00a0return\u00a0-1.",
        "examples": [
            "Input: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]\nOutput: 1\nExplanation: Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7].",
            "Input: arr1 = [1,5,3,6,7], arr2 = [4,3,1]\nOutput: 2\nExplanation: Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7].",
            "Input: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]\nOutput: -1\nExplanation: You can't make arr1 strictly increasing."
        ],
        "constrains": "1 <= arr1.length, arr2.length <= 2000\n0 <= arr1[i], arr2[i] <= 10^9",
        "release_time": 1686968098,
        "oracle_code": "class Solution {\n    \n    HashMap<Integer, Integer> dp[];\n    TreeSet<Integer> ts;\n    \n    int makeArrayIncr(int i, int prev, int[] arr1) {\n        \n        if(i == arr1.length) return 0;\n        \n        if(dp[i].containsKey(prev)) return dp[i].get(prev);\n        \n        int notswap = 5000;\n        \n        if(arr1[i] > prev) notswap = makeArrayIncr(i + 1, arr1[i], arr1);\n        \n        int swap = 5000;\n        \n        Integer curr = ts.higher(prev);\n        \n        if(curr != null) swap = 1 + makeArrayIncr(i + 1, curr, arr1);\n        \n        dp[i].put(prev, Math.min(swap, notswap));\n        \n        // System.out.println(i + \" \" + swap + \" \" + notswap);\n        \n        return Math.min(swap, notswap);\n        \n    }\n    \n    public int makeArrayIncreasing(int[] arr1, int[] arr2) {\n        \n        ts = new TreeSet<>();\n        for(int i : arr2) ts.add(i);\n        \n        dp = new HashMap[arr1.length];\n        for(int i = 0; i < dp.length; i++) dp[i] = new HashMap<>();\n        \n        int ans = makeArrayIncr(0, Integer.MIN_VALUE, arr1);\n        \n        return ans < 5000 ? ans : -1; \n    }\n}",
        "content": "```\\nclass Solution {\\n    \\n    HashMap<Integer, Integer> dp[];\\n    TreeSet<Integer> ts;\\n    \\n    int makeArrayIncr(int i, int prev, int[] arr1) {\\n        \\n        if(i == arr1.length) return 0;\\n        \\n        if(dp[i].containsKey(prev)) return dp[i].get(prev);\\n        \\n        int notswap = 5000;\\n        \\n        if(arr1[i] > prev) notswap = makeArrayIncr(i + 1, arr1[i], arr1);\\n        \\n        int swap = 5000;\\n        \\n        Integer curr = ts.higher(prev);\\n        \\n        if(curr != null) swap = 1 + makeArrayIncr(i + 1, curr, arr1);\\n        \\n        dp[i].put(prev, Math.min(swap, notswap));\\n        \\n        // System.out.println(i + \" \" + swap + \" \" + notswap);\\n        \\n        return Math.min(swap, notswap);\\n        \\n    }\\n    \\n    public int makeArrayIncreasing(int[] arr1, int[] arr2) {\\n        \\n        ts = new TreeSet<>();\\n        for(int i : arr2) ts.add(i);\\n        \\n        dp = new HashMap[arr1.length];\\n        for(int i = 0; i < dp.length; i++) dp[i] = new HashMap<>();\\n        \\n        int ans = makeArrayIncr(0, Integer.MIN_VALUE, arr1);\\n        \\n        return ans < 5000 ? ans : -1; \\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "merge-strings-alternately",
        "description": "You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.\nReturn the merged string.",
        "examples": [
            "Input: word1 = \"abc\", word2 = \"pqr\"\r\nOutput: \"apbqcr\"\r\nExplanation:\u00a0The merged string will be merged as so:\r\nword1:  a   b   c\r\nword2:    p   q   r\r\nmerged: a p b q c r",
            "Input: word1 = \"ab\", word2 = \"pqrs\"\r\nOutput: \"apbqrs\"\r\nExplanation:\u00a0Notice that as word2 is longer, \"rs\" is appended to the end.\r\nword1:  a   b \r\nword2:    p   q   r   s\r\nmerged: a p b q   r   s",
            "Input: word1 = \"abcd\", word2 = \"pq\"\r\nOutput: \"apbqcd\"\r\nExplanation:\u00a0Notice that as word1 is longer, \"cd\" is appended to the end.\r\nword1:  a   b   c   d\r\nword2:    p   q \r\nmerged: a p b q c   d"
        ],
        "constrains": "1 <= word1.length, word2.length <= 100\nword1 and word2 consist of lowercase English letters.",
        "release_time": 1692376529,
        "oracle_code": "class Solution {\n    public String mergeAlternately(String word1, String word2) {\n     char [] arr1=word1.toCharArray();\n     char [] arr2=word2.toCharArray();\n     char [] merge = new char[arr1.length+arr2.length];\n    int i=0,j=0;\n    while( i< merge.length){\n        if(j<arr1.length){\n            merge[i]=arr1[j];\n            i++;\n        }\n        if( j< arr2.length){\n            merge[i]=arr2[j];\n            i++;\n        }\n        j++;\n    }\n    return new String(merge);\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n Steps of the mergeAlternately function:\\n\\nConvert input strings word1 and word2 into character arrays arr1 and arr2.\\nInitialize a new character array merge with a length of arr1.length + arr2.length to hold the merged characters.\\nInitialize two indices: i for the merge array and j for tracking characters in word2.\\nStart a loop that iterates until the merge array is filled with characters from both input strings:\\na. Check if j is within the bounds of arr1:\\nIf true, assign arr1[j] to merge[i] and increment both i and j.\\nb. Check if j is within the bounds of arr2:\\nIf true, assign arr2[j] to merge[i] and increment both i and j.\\nReturn a new string created from the merge array using the String constructor.\\n\\n# Complexity\\n- Time complexity:\\nO(max(m,n))\\n\\n- Space complexity:\\nO(m,n)\\n\\n# Code\\n```\\nclass Solution {\\n    public String mergeAlternately(String word1, String word2) {\\n     char [] arr1=word1.toCharArray();\\n     char [] arr2=word2.toCharArray();\\n     char [] merge = new char[arr1.length+arr2.length];\\n    int i=0,j=0;\\n    while( i< merge.length){\\n        if(j<arr1.length){\\n            merge[i]=arr1[j];\\n            i++;\\n        }\\n        if( j< arr2.length){\\n            merge[i]=arr2[j];\\n            i++;\\n        }\\n        j++;\\n    }\\n    return new String(merge);\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "mirror-reflection",
        "description": "There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2.\nThe square room has walls of length p\u00a0and a laser ray from the southwest corner first meets the east wall at a distance q from the 0th receptor.\nGiven the two integers p and q, return the number of the receptor that the ray meets first.\nThe test cases are guaranteed so that the ray will meet a receptor eventually.",
        "examples": [
            "Input: p = 2, q = 1\nOutput: 2\nExplanation: The ray meets receptor 2 the first time it gets reflected back to the left wall.",
            "Input: p = 3, q = 1\nOutput: 1"
        ],
        "constrains": "1 <= q <= p <= 1000",
        "release_time": 1659577168,
        "oracle_code": "class Solution {\n    public int mirrorReflection(int p, int q) {\n        while(((p|q)&1) == 0){\n            p >>= 1;\n            q >>= 1;\n        }\n        return (q&1) + ((p&1)^1);\n    }\n}",
        "content": "\\tPLEASE UPVOTE IF YOU LIKE\\n```\\nclass Solution {\\n    public int mirrorReflection(int p, int q) {\\n        while(((p|q)&1) == 0){\\n            p >>= 1;\\n            q >>= 1;\\n        }\\n        return (q&1) + ((p&1)^1);\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "minimum-suffix-flips",
        "description": "You are given a 0-indexed binary string target of length n. You have another binary string s of length n that is initially set to all zeros. You want to make s equal to target.\nIn one operation, you can pick an index i where 0 <= i < n and flip all bits in the inclusive range [i, n - 1]. Flip means changing '0' to '1' and '1' to '0'.\nReturn the minimum number of operations needed to make s equal to target.",
        "examples": [
            "Input: target = \"10111\"\nOutput: 3\nExplanation: Initially, s = \"00000\".\nChoose index i = 2: \"00000\" -> \"00111\"\nChoose index i = 0: \"00111\" -> \"11000\"\nChoose index i = 1: \"11000\" -> \"10111\"\nWe need at least 3 flip operations to form target.",
            "Input: target = \"101\"\nOutput: 3\nExplanation: Initially, s = \"000\".\nChoose index i = 0: \"000\" -> \"111\"\nChoose index i = 1: \"111\" -> \"100\"\nChoose index i = 2: \"100\" -> \"101\"\nWe need at least 3 flip operations to form target.",
            "Input: target = \"00000\"\nOutput: 0\nExplanation: We do not need any operations since the initial s already equals target."
        ],
        "constrains": "n == target.length\n1 <= n <= 105\ntarget[i] is either '0' or '1'.",
        "release_time": 1672036497,
        "oracle_code": "class Solution {\n    public int minFlips(String target) {\n        int flips = 0;\n        char prev = target.charAt(0);\n        if (prev == '1') flips++;\n\n        for (int i = 1; i < target.length(); i++) {\n            char c = target.charAt(i);\n            if (c != prev) {\n                flips++;\n                prev = c;\n            }\n        }\n        return flips;\n    }\n}",
        "content": "# Approach\\nCount the number of different adjacent letters. Since we are working with suffices, then you can figure out that we just need to flip starting from index (from left) where it differs from target. So, we adjust initial String with zeros only starting from left and by looking each letter one by one.\\nExample:\\n00000 -> 10101\\n1. **00000**\\n2. 1**1111**\\n3. 10**000**\\n4. 101**11**\\n5. 1010**0**\\nResult: 10101\\n\\n# Complexity\\n- Time complexity: O(N), where N - number of letters.\\n\\n# Code\\n```\\nclass Solution {\\n    public int minFlips(String target) {\\n        int flips = 0;\\n        char prev = target.charAt(0);\\n        if (prev == \\'1\\') flips++;\\n\\n        for (int i = 1; i < target.length(); i++) {\\n            char c = target.charAt(i);\\n            if (c != prev) {\\n                flips++;\\n                prev = c;\\n            }\\n        }\\n        return flips;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "n-repeated-element-in-size-2n-array",
        "description": "You are given an integer array nums with the following properties:\n\nnums.length == 2 * n.\nnums contains n + 1 unique elements.\nExactly one element of nums is repeated n times.\n\nReturn the element that is repeated n times.",
        "examples": [
            "Input: nums = [1,2,3,3]\nOutput: 3",
            "Input: nums = [2,1,2,5,3,2]\nOutput: 2",
            "Input: nums = [5,1,5,2,5,3,5,4]\nOutput: 5"
        ],
        "constrains": "2 <= n <= 5000\nnums.length == 2 * n\n0 <= nums[i] <= 104\nnums contains n + 1 unique elements and one of them is repeated exactly n times.",
        "release_time": 1679196910,
        "oracle_code": "class Solution {\n    public int repeatedNTimes(int[] nums) {\n        HashSet<Integer>set=new HashSet<>();\n        for(int n:nums){\n            if(!set.contains(n)){\n                set.add(n);\n            }else{\n                return n;\n            }\n        }\n        return 0;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int repeatedNTimes(int[] nums) {\\n        HashSet<Integer>set=new HashSet<>();\\n        for(int n:nums){\\n            if(!set.contains(n)){\\n                set.add(n);\\n            }else{\\n                return n;\\n            }\\n        }\\n        return 0;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "spiral-matrix-iv",
        "description": "You are given two integers m and n, which represent the dimensions of a matrix.\nYou are also given the head of a linked list of integers.\nGenerate an m x n matrix that contains the integers in the linked list presented in spiral order (clockwise), starting from the top-left of the matrix. If there are remaining empty spaces, fill them with -1.\nReturn the generated matrix.",
        "examples": [
            "Input: m = 3, n = 5, head = [3,0,2,6,8,1,7,9,4,2,5,5,0]\nOutput: [[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]\nExplanation: The diagram above shows how the values are printed in the matrix.\nNote that the remaining spaces in the matrix are filled with -1.",
            "Input: m = 1, n = 4, head = [0,1,2]\nOutput: [[0,1,2,-1]]\nExplanation: The diagram above shows how the values are printed from left to right in the matrix.\nThe last space in the matrix is set to -1."
        ],
        "constrains": "1 <= m, n <= 105\n1 <= m * n <= 105\nThe number of nodes in the list is in the range [1, m * n].\n0 <= Node.val <= 1000",
        "release_time": 1675959781,
        "oracle_code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def spiralMatrix(self, m: int, n: int, head: Optional[ListNode]) -> List[List[int]]:\n        mat=[[-1 for i in range(n)] for i in range(m)]\n        temp=head\n        d=1\n        rowi,colj=0,0\n        while temp!=None:\n            mat[rowi][colj]=temp.val\n            if d==1:\n                if colj+1<n and mat[rowi][colj+1]==-1:\n                    colj+=1\n                    d=1\n                elif rowi+1<m and mat[rowi+1][colj]==-1:\n                    rowi+=1\n                    d=2\n            elif d==2:\n                if rowi+1<m and mat[rowi+1][colj]==-1:\n                    rowi+=1\n                    d=2\n                elif colj-1>=0 and mat[rowi][colj-1]==-1:\n                    colj-=1\n                    d=3\n            elif d==3:\n                if colj-1>=0 and mat[rowi][colj-1]==-1:\n                    colj-=1\n                    d=3\n                elif rowi-1>=0 and mat[rowi-1][colj]==-1:\n                    rowi-=1\n                    d=4\n            elif d==4:\n                if rowi-1>=0 and mat[rowi-1][colj]==-1:\n                    rowi-=1\n                    d=4\n                elif colj+1<n and mat[rowi][colj+1]==-1:\n                    colj+=1\n                    d=1\n            temp=temp.next\n        return mat",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nfollow up direction : right -> down -> left -> up\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\ncreating a matrix m*n fillup with -1 and traverse throgh list and make update directions according to current directions and values of before cells\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n     O(N) (no of Nodes in linkedlist)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(N+M)\\n\\n\\n# Code\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def spiralMatrix(self, m: int, n: int, head: Optional[ListNode]) -> List[List[int]]:\\n        mat=[[-1 for i in range(n)] for i in range(m)]\\n        temp=head\\n        d=1\\n        rowi,colj=0,0\\n        while temp!=None:\\n            mat[rowi][colj]=temp.val\\n            if d==1:\\n                if colj+1<n and mat[rowi][colj+1]==-1:\\n                    colj+=1\\n                    d=1\\n                elif rowi+1<m and mat[rowi+1][colj]==-1:\\n                    rowi+=1\\n                    d=2\\n            elif d==2:\\n                if rowi+1<m and mat[rowi+1][colj]==-1:\\n                    rowi+=1\\n                    d=2\\n                elif colj-1>=0 and mat[rowi][colj-1]==-1:\\n                    colj-=1\\n                    d=3\\n            elif d==3:\\n                if colj-1>=0 and mat[rowi][colj-1]==-1:\\n                    colj-=1\\n                    d=3\\n                elif rowi-1>=0 and mat[rowi-1][colj]==-1:\\n                    rowi-=1\\n                    d=4\\n            elif d==4:\\n                if rowi-1>=0 and mat[rowi-1][colj]==-1:\\n                    rowi-=1\\n                    d=4\\n                elif colj+1<n and mat[rowi][colj+1]==-1:\\n                    colj+=1\\n                    d=1\\n            temp=temp.next\\n        return mat\\n\\n\\n```",
        "level": "medium"
    },
    {
        "slug": "orderly-queue",
        "description": "You are given a string s and an integer k. You can choose one of the first k letters of s and append it at the end of the string..\nReturn the lexicographically smallest string you could have after applying the mentioned step any number of moves.",
        "examples": [
            "Input: s = \"cba\", k = 1\nOutput: \"acb\"\nExplanation: \nIn the first move, we move the 1st character 'c' to the end, obtaining the string \"bac\".\nIn the second move, we move the 1st character 'b' to the end, obtaining the final result \"acb\".",
            "Input: s = \"baaca\", k = 3\nOutput: \"aaabc\"\nExplanation: \nIn the first move, we move the 1st character 'b' to the end, obtaining the string \"aacab\".\nIn the second move, we move the 3rd character 'c' to the end, obtaining the final result \"aaabc\"."
        ],
        "constrains": "1 <= k <= s.length <= 1000\ns consist of lowercase English letters.",
        "release_time": 1667735681,
        "oracle_code": "class Solution {\n    public String orderlyQueue(String s, int k) {\n        if(k>1){                        //whenver we k>1 we can make the most smallest lexographic combo\n            char ch[]=s.toCharArray();  \n            Arrays.sort(ch);\n            return String.valueOf(ch);\n        }\n        else{   //when k=1 we have restriction to move only ine so will see from what index smallest lexo start\n             String str2=new String(s);\n             for(int i=0;i<s.length();i++){\n                s=s.substring(1)+s.charAt(0); // first element is being shifted to last\n                if(str2.compareTo(s)>0){        //if this lexo combo is smaller than previous\n                    str2=s;                     //store smaller lexo combo\n                } \n             }\n             return str2;\n        }     \n    }\n}",
        "content": "```\\nclass Solution {\\n    public String orderlyQueue(String s, int k) {\\n        if(k>1){                        //whenver we k>1 we can make the most smallest lexographic combo\\n            char ch[]=s.toCharArray();  \\n            Arrays.sort(ch);\\n            return String.valueOf(ch);\\n        }\\n        else{   //when k=1 we have restriction to move only ine so will see from what index smallest lexo start\\n             String str2=new String(s);\\n             for(int i=0;i<s.length();i++){\\n                s=s.substring(1)+s.charAt(0); // first element is being shifted to last\\n                if(str2.compareTo(s)>0){        //if this lexo combo is smaller than previous\\n                    str2=s;                     //store smaller lexo combo\\n                } \\n             }\\n             return str2;\\n        }     \\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "flatten-nested-list-iterator",
        "description": "You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.\nImplement the NestedIterator class:\n\nNestedIterator(List<NestedInteger> nestedList) Initializes the iterator with the nested list nestedList.\nint next() Returns the next integer in the nested list.\nboolean hasNext() Returns true if there are still some integers in the nested list and false otherwise.\n\nYour code will be tested with the following pseudocode:\n\ninitialize iterator with nestedList\nres = []\nwhile iterator.hasNext()\n    append iterator.next() to the end of res\nreturn res\n\nIf res matches the expected flattened list, then your code will be judged as correct.",
        "examples": [
            "Input: nestedList = [[1,1],2,[1,1]]\nOutput: [1,1,2,1,1]\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].",
            "Input: nestedList = [1,[4,[6]]]\nOutput: [1,4,6]\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6]."
        ],
        "constrains": "1 <= nestedList.length <= 500\nThe values of the integers in the nested list is in the range [-106, 106].",
        "release_time": 1651988347,
        "oracle_code": "public class NestedIterator implements Iterator<Integer> {\n\n    private List<Integer> integerList = new ArrayList<>();\n    private int index = 0;\n    public NestedIterator(List<NestedInteger> nestedList) {\n        for (NestedInteger nestedInteger : nestedList) {\n            flatten(nestedInteger);\n        }\n    }\n    \n    private void flatten(NestedInteger nested) {\n        if (nested.isInteger()) \n            integerList.add(nested.getInteger());\n        else \n            for (NestedInteger nestedFromList : nested.getList()) {\n                flatten(nestedFromList);\n        }\n    }\n\n    @Override\n    public boolean hasNext() {\n        return index < integerList.size();\n    }\n\n    @Override\n    public Integer next() {\n        return integerList.get(index++);\n    }\n}",
        "content": "```\\npublic class NestedIterator implements Iterator<Integer> {\\n\\n    private List<Integer> integerList = new ArrayList<>();\\n    private int index = 0;\\n    public NestedIterator(List<NestedInteger> nestedList) {\\n        for (NestedInteger nestedInteger : nestedList) {\\n            flatten(nestedInteger);\\n        }\\n    }\\n    \\n    private void flatten(NestedInteger nested) {\\n        if (nested.isInteger()) \\n            integerList.add(nested.getInteger());\\n        else \\n            for (NestedInteger nestedFromList : nested.getList()) {\\n                flatten(nestedFromList);\\n        }\\n    }\\n\\n    @Override\\n    public boolean hasNext() {\\n        return index < integerList.size();\\n    }\\n\\n    @Override\\n    public Integer next() {\\n        return integerList.get(index++);\\n    }\\n}\\n```\\n\\nMy repositories with leetcode problems solving - [Java](https://github.com/FLlGHT/algorithms/tree/master/j-algorithms/src/main/java),  [C++](https://github.com/FLlGHT/algorithms/tree/master/c-algorithms/src/main/c%2B%2B)",
        "level": "medium"
    },
    {
        "slug": "word-ladder-ii",
        "description": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\n\nEvery adjacent pair of words differs by a single letter.\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\nsk == endWord\n\nGiven two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].",
        "examples": [
            "Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\nOutput: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]\nExplanation:\u00a0There are 2 shortest transformation sequences:\n\"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n\"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\"",
            "Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\nOutput: []\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence."
        ],
        "constrains": "1 <= beginWord.length <= 5\nendWord.length == beginWord.length\n1 <= wordList.length <= 500\nwordList[i].length == beginWord.length\nbeginWord, endWord, and wordList[i] consist of lowercase English letters.\nbeginWord != endWord\nAll the words in wordList are unique.\nThe sum of all shortest transformation sequences does not exceed 105.",
        "release_time": 1692205615,
        "oracle_code": "class Solution {\n    String b;\n\n    // Create a hashmap of type word->level to get the idea \n    // on which level the word comes after the transformations.\n\n    HashMap < String, Integer > mpp;\n\n    // A list for storing the final answer.\n    List < List < String >> ans;\n    private void dfs(String word, List < String > seq) {\n\n        // Function for implementing backtracking using the created map\n        // in reverse order to find the transformation sequence in less time.\n\n        // Base condition :\n        // If word equals beginWord, we\\u2019ve found one of the sequences\n        // simply reverse the sequence and return. \n        if (word.equals(b)) {\n\n            // Since java works with reference, create\n            // a duplicate and store the reverse of it\n            List < String > dup = new ArrayList < > (seq);\n            Collections.reverse(dup);\n            ans.add(dup);\n            return;\n        }\n        int steps = mpp.get(word);\n        int sz = word.length();\n\n        // Replace each character of the word with letters from a-z \n        // and check whether the transformed word is present in the map\n        // and at the previous level or not.\n        for (int i = 0; i < sz; i++) {\n\n            for (char ch = 'a'; ch <= 'z'; ch++) {\n                char replacedCharArray[] = word.toCharArray();\n                replacedCharArray[i] = ch;\n                String replacedWord = new String(replacedCharArray);\n                if (mpp.containsKey(replacedWord) &&\n                    mpp.get(replacedWord) + 1 == steps) {\n\n                    seq.add(replacedWord);\n                    dfs(replacedWord, seq);\n\n                    // pop the current word from the back of the queue\n                    // to traverse other possibilities.\n                    seq.remove(seq.size() - 1);\n                }\n            }\n        }\n    }\n    public List < List < String >> findLadders(String beginWord, String endWord,\n        List < String > wordList) {\n\n        // Push all values of wordList into a set\n        // to make deletion from it easier and in less time complexity.\n        Set < String > st = new HashSet < String > ();\n        int len = wordList.size();\n        for (int i = 0; i < len; i++) {\n            st.add(wordList.get(i));\n        }\n\n        // Perform BFS traversal and push the string in the queue\n        // as soon as they\\u2019re found in the wordList.\n        Queue < String > q = new LinkedList < > ();\n        b = beginWord;\n        q.add(beginWord);\n        mpp = new HashMap < > ();\n\n        // beginWord initialised with level 1.\n        mpp.put(beginWord, 1);\n        int sizee = beginWord.length();\n        st.remove(beginWord);\n        while (!q.isEmpty()) {\n            String word = q.peek();\n            int steps = mpp.get(word);\n            q.remove();\n\n            // Break out if the word matches the endWord.\n            if (word.equals(endWord)) break;\n\n            // Replace each character of the word with letters from a-z \n            // and check whether the transformed word is present in the \n            // wordList or not, if yes then push to queue\n            for (int i = 0; i < sizee; i++) {\n\n                for (char ch = 'a'; ch <= 'z'; ch++) {\n                    char replacedCharArray[] = word.toCharArray();\n                    replacedCharArray[i] = ch;\n                    String replacedWord = new String(replacedCharArray);\n                    if (st.contains(replacedWord) == true) {\n                        q.add(replacedWord);\n                        st.remove(replacedWord);\n\n                        // push the word along with its level\n                        // in the map data structure.\n                        mpp.put(replacedWord, steps + 1);\n                    }\n                }\n\n\n            }\n        }\n        ans = new ArrayList < > ();\n\n        // If we reach the endWord, we stop and move to step-2\n        // that is to perform reverse dfs traversal.\n        if (mpp.containsKey(endWord) == true) {\n            List < String > seq = new ArrayList < > ();\n            seq.add(endWord);\n            dfs(endWord, seq);\n        }\n        return ans;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n![Screenshot_20230205_171246.png](https://assets.leetcode.com/users/images/1ea15e79-7ca5-4594-83b4-88b42dc1e6e7_1692205611.608349.png)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    String b;\\n\\n    // Create a hashmap of type word->level to get the idea \\n    // on which level the word comes after the transformations.\\n\\n    HashMap < String, Integer > mpp;\\n\\n    // A list for storing the final answer.\\n    List < List < String >> ans;\\n    private void dfs(String word, List < String > seq) {\\n\\n        // Function for implementing backtracking using the created map\\n        // in reverse order to find the transformation sequence in less time.\\n\\n        // Base condition :\\n        // If word equals beginWord, we\\u2019ve found one of the sequences\\n        // simply reverse the sequence and return. \\n        if (word.equals(b)) {\\n\\n            // Since java works with reference, create\\n            // a duplicate and store the reverse of it\\n            List < String > dup = new ArrayList < > (seq);\\n            Collections.reverse(dup);\\n            ans.add(dup);\\n            return;\\n        }\\n        int steps = mpp.get(word);\\n        int sz = word.length();\\n\\n        // Replace each character of the word with letters from a-z \\n        // and check whether the transformed word is present in the map\\n        // and at the previous level or not.\\n        for (int i = 0; i < sz; i++) {\\n\\n            for (char ch = \\'a\\'; ch <= \\'z\\'; ch++) {\\n                char replacedCharArray[] = word.toCharArray();\\n                replacedCharArray[i] = ch;\\n                String replacedWord = new String(replacedCharArray);\\n                if (mpp.containsKey(replacedWord) &&\\n                    mpp.get(replacedWord) + 1 == steps) {\\n\\n                    seq.add(replacedWord);\\n                    dfs(replacedWord, seq);\\n\\n                    // pop the current word from the back of the queue\\n                    // to traverse other possibilities.\\n                    seq.remove(seq.size() - 1);\\n                }\\n            }\\n        }\\n    }\\n    public List < List < String >> findLadders(String beginWord, String endWord,\\n        List < String > wordList) {\\n\\n        // Push all values of wordList into a set\\n        // to make deletion from it easier and in less time complexity.\\n        Set < String > st = new HashSet < String > ();\\n        int len = wordList.size();\\n        for (int i = 0; i < len; i++) {\\n            st.add(wordList.get(i));\\n        }\\n\\n        // Perform BFS traversal and push the string in the queue\\n        // as soon as they\\u2019re found in the wordList.\\n        Queue < String > q = new LinkedList < > ();\\n        b = beginWord;\\n        q.add(beginWord);\\n        mpp = new HashMap < > ();\\n\\n        // beginWord initialised with level 1.\\n        mpp.put(beginWord, 1);\\n        int sizee = beginWord.length();\\n        st.remove(beginWord);\\n        while (!q.isEmpty()) {\\n            String word = q.peek();\\n            int steps = mpp.get(word);\\n            q.remove();\\n\\n            // Break out if the word matches the endWord.\\n            if (word.equals(endWord)) break;\\n\\n            // Replace each character of the word with letters from a-z \\n            // and check whether the transformed word is present in the \\n            // wordList or not, if yes then push to queue\\n            for (int i = 0; i < sizee; i++) {\\n\\n                for (char ch = \\'a\\'; ch <= \\'z\\'; ch++) {\\n                    char replacedCharArray[] = word.toCharArray();\\n                    replacedCharArray[i] = ch;\\n                    String replacedWord = new String(replacedCharArray);\\n                    if (st.contains(replacedWord) == true) {\\n                        q.add(replacedWord);\\n                        st.remove(replacedWord);\\n\\n                        // push the word along with its level\\n                        // in the map data structure.\\n                        mpp.put(replacedWord, steps + 1);\\n                    }\\n                }\\n\\n\\n            }\\n        }\\n        ans = new ArrayList < > ();\\n\\n        // If we reach the endWord, we stop and move to step-2\\n        // that is to perform reverse dfs traversal.\\n        if (mpp.containsKey(endWord) == true) {\\n            List < String > seq = new ArrayList < > ();\\n            seq.add(endWord);\\n            dfs(endWord, seq);\\n        }\\n        return ans;\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "distribute-candies",
        "description": "Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor.\nThe doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.\nGiven the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.",
        "examples": [
            "Input: candyType = [1,1,2,2,3,3]\nOutput: 3\nExplanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.",
            "Input: candyType = [1,1,2,3]\nOutput: 2\nExplanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.",
            "Input: candyType = [6,6,6,6]\nOutput: 1\nExplanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type."
        ],
        "constrains": "n == candyType.length\n2 <= n <= 104\nn\u00a0is even.\n-105 <= candyType[i] <= 105",
        "release_time": 1672810514,
        "oracle_code": "class Solution {\n    public int distributeCandies(int[] candyType) {\n\n    Set<Integer>st=new HashSet<>();\n\n    for(int i=0;i<candyType.length;i++){\n        st.add(candyType[i]);\n        if(st.size()>candyType.length/2)return candyType.length/2;\n    }\n\n    return st.size();\n\n    }\n}",
        "content": "\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Solution {\\n    public int distributeCandies(int[] candyType) {\\n\\n    Set<Integer>st=new HashSet<>();\\n\\n    for(int i=0;i<candyType.length;i++){\\n        st.add(candyType[i]);\\n        if(st.size()>candyType.length/2)return candyType.length/2;\\n    }\\n\\n    return st.size();\\n\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "difference-between-element-sum-and-digit-sum-of-an-array",
        "description": "You are given a positive integer array nums.\n\nThe element sum is the sum of all the elements in nums.\nThe digit sum is the sum of all the digits (not necessarily distinct) that appear in nums.\n\nReturn the absolute difference between the element sum and digit sum of nums.\nNote that the absolute difference between two integers x and y is defined as |x - y|.",
        "examples": [
            "Input: nums = [1,15,6,3]\nOutput: 9\nExplanation: \nThe element sum of nums is 1 + 15 + 6 + 3 = 25.\nThe digit sum of nums is 1 + 1 + 5 + 6 + 3 = 16.\nThe absolute difference between the element sum and digit sum is |25 - 16| = 9.",
            "Input: nums = [1,2,3,4]\nOutput: 0\nExplanation:\nThe element sum of nums is 1 + 2 + 3 + 4 = 10.\nThe digit sum of nums is 1 + 2 + 3 + 4 = 10.\nThe absolute difference between the element sum and digit sum is |10 - 10| = 0."
        ],
        "constrains": "1 <= nums.length <= 2000\n1 <= nums[i] <= 2000",
        "release_time": 1683903237,
        "oracle_code": "class Solution {\n    public int differenceOfSum(int[] nums) {\n        \n        int sum=0;\n        int digitSum=0;\n\n        for(int num:nums){\n            sum+=num;\n\n            while(num>0){\n                int digit=num%10;\n                digitSum+=digit;\n                num/=10;\n            }\n\n        }\n\n        return sum-digitSum;\n    }\n}",
        "content": "\\n\\n# Complexity\\n- Time complexity: O(n*k) and for second code O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1) and for second code O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        \\n        int sum=0;\\n        int digitSum=0;\\n\\n        for(int num:nums){\\n            sum+=num;\\n\\n            while(num>0){\\n                int digit=num%10;\\n                digitSum+=digit;\\n                num/=10;\\n            }\\n\\n        }\\n\\n        return sum-digitSum;\\n    }\\n}\\n```\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n\\n        // sum the all element \\n        String digit=\"\";\\n        int sum=0;\\n        for(int num: nums) {\\n            sum+=num;\\n            digit+=num;\\n        \\n        }\\n\\n        int digitSum=0;\\n        for(int i=0;i<digit.length();i++){\\n            digitSum+=digit.charAt(i)-\\'0\\';\\n        }\\nreturn sum-digitSum;\\n    }\\n}\\n```\\n\\n",
        "level": "easy"
    },
    {
        "slug": "number-of-atoms",
        "description": "Given a string formula representing a chemical formula, return the count of each atom.\nThe atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.\nOne or more digits representing that element's count may follow if the count is greater than 1. If the count is 1, no digits will follow.\n\nFor example, \"H2O\" and \"H2O2\" are possible, but \"H1O2\" is impossible.\n\nTwo formulas are concatenated together to produce another formula.\n\nFor example, \"H2O2He3Mg4\" is also a formula.\n\nA formula placed in parentheses, and a count (optionally added) is also a formula.\n\nFor example, \"(H2O2)\" and \"(H2O2)3\" are formulas.\n\nReturn the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.\nThe test cases are generated so that all the values in the output fit in a 32-bit integer.",
        "examples": [
            "Input: formula = \"H2O\"\nOutput: \"H2O\"\nExplanation: The count of elements are {'H': 2, 'O': 1}.",
            "Input: formula = \"Mg(OH)2\"\nOutput: \"H2MgO2\"\nExplanation: The count of elements are {'H': 2, 'Mg': 1, 'O': 2}.",
            "Input: formula = \"K4(ON(SO3)2)2\"\nOutput: \"K4N2O14S4\"\nExplanation: The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}."
        ],
        "constrains": "1 <= formula.length <= 1000\nformula consists of English letters, digits, '(', and ')'.\nformula is always valid.",
        "release_time": 1601928748,
        "oracle_code": "class Solution {\n    Map<String, Integer> res = new TreeMap<>();\n    Stack<Integer> stack = new Stack<>();\n    int multiplier = 1;\n    \n    public String countOfAtoms(String formula) {\n        int end = formula.length() - 1, i = formula.length() - 1;\n        \n        while (i >= 0) {\n            if (formula.charAt(i) == '(') {\n                multiplier /= stack.pop();\n                i--;\n                continue;\n            }\n            \n            end = i;\n            int val = 1;\n            \n            if (Character.isDigit(formula.charAt(i))) {\n                while (Character.isDigit(formula.charAt(i))) i--;\n                val = Integer.parseInt(formula.substring(i+1, end+1));\n            } \n            stack.push(val);\n            multiplier *= val;\n            \n            end = i;\n            if (Character.isLetter(formula.charAt(i))) {\n                while(Character.isLowerCase(formula.charAt(i))) i--;\n                updateMap(formula.substring(i, end+1));\n            }\n            i--;\n        }\n        \n        StringBuilder rs = new StringBuilder();\n        for (Map.Entry<String, Integer> entry : res.entrySet()) {\n            rs.append(entry.getKey());\n            if (entry.getValue() > 1) rs.append(entry.getValue());\n        }\n        return rs.toString();\n    }\n    \n    private void updateMap(String key) {\n        if (res.get(key) == null) {\n            res.put(key, multiplier);\n        } else {\n            res.put(key, multiplier + res.get(key));\n        }\n\n        multiplier /= stack.pop();\n    }\n}",
        "content": "We essentially start from the back. Each time we encounter a number we add it to the stack. We can clearly see that going backwards, a number will always be preceeded by either `)` or `element`. So in the same loop we first parse the number followed by the element/bracket. If a number is not seen, we take the default 1 as the number.\\n\\nWe maintain the stack with the multipliers encountered and keep a `multiplier` variable to store the product. Upon poping the stack, we divide by this popped number.\\n\\nEverytime we encounter a `(`, we pop the stack. We again pop the stack after each element is processed.\\n\\nWe also use StringBuilder to optimize.\\n```\\nclass Solution {\\n    Map<String, Integer> res = new TreeMap<>();\\n    Stack<Integer> stack = new Stack<>();\\n    int multiplier = 1;\\n    \\n    public String countOfAtoms(String formula) {\\n        int end = formula.length() - 1, i = formula.length() - 1;\\n        \\n        while (i >= 0) {\\n            if (formula.charAt(i) == \\'(\\') {\\n                multiplier /= stack.pop();\\n                i--;\\n                continue;\\n            }\\n            \\n            end = i;\\n            int val = 1;\\n            \\n            if (Character.isDigit(formula.charAt(i))) {\\n                while (Character.isDigit(formula.charAt(i))) i--;\\n                val = Integer.parseInt(formula.substring(i+1, end+1));\\n            } \\n            stack.push(val);\\n            multiplier *= val;\\n            \\n            end = i;\\n            if (Character.isLetter(formula.charAt(i))) {\\n                while(Character.isLowerCase(formula.charAt(i))) i--;\\n                updateMap(formula.substring(i, end+1));\\n            }\\n            i--;\\n        }\\n        \\n        StringBuilder rs = new StringBuilder();\\n        for (Map.Entry<String, Integer> entry : res.entrySet()) {\\n            rs.append(entry.getKey());\\n            if (entry.getValue() > 1) rs.append(entry.getValue());\\n        }\\n        return rs.toString();\\n    }\\n    \\n    private void updateMap(String key) {\\n        if (res.get(key) == null) {\\n            res.put(key, multiplier);\\n        } else {\\n            res.put(key, multiplier + res.get(key));\\n        }\\n\\n        multiplier /= stack.pop();\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "move-zeroes",
        "description": "Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\nNote that you must do this in-place without making a copy of the array.",
        "examples": [
            "Input: nums = [0,1,0,3,12]\nOutput: [1,3,12,0,0]",
            "Input: nums = [0]\nOutput: [0]"
        ],
        "constrains": "1 <= nums.length <= 104\n-231 <= nums[i] <= 231 - 1",
        "release_time": 1684064317,
        "oracle_code": "class Solution {\n    public void moveZeroes(int[] nums) {\n        int m=-1;\n        for(int i=0; i<nums.length; i++)\n        {\n            if(nums[i]==0)\n            {\n                if(m==-1 || nums[m]!=0)\n                {\n                    m=i;\n                }\n            }\n            else\n            {\n                if(m!=-1)\n                {\n                    int temp = nums[i];\n                    nums[i]=nums[m];\n                    nums[m]=temp;\n                    m++;\n                }\n            }\n        }\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe goal of this solution is to move all the zeroes in the input array nums to the end of the array while maintaining the relative order of the non-zero elements\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialize a variable m to -1, which will keep track of the position of the first zero encountered.\\n2. Traverse the array nums from left to right: a. If the current element is zero, and m is -1 or the element at position m is non-zero, set m to the current index. b. If the current element is non-zero and m is not -1, swap the current element with the element at position m and increment m.\\n3. After the traversal, all the zeroes will be at the end of the array, and the relative order of the non-zero elements will be maintained.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n O(n), where n is the length of the input array nums. The algorithm iterates through the array once\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1), as the algorithm only uses a constant amount of extra space to store the variable m and the temporary variable temp used for swapping elements.\\n\\n# Code\\n```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int m=-1;\\n        for(int i=0; i<nums.length; i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                if(m==-1 || nums[m]!=0)\\n                {\\n                    m=i;\\n                }\\n            }\\n            else\\n            {\\n                if(m!=-1)\\n                {\\n                    int temp = nums[i];\\n                    nums[i]=nums[m];\\n                    nums[m]=temp;\\n                    m++;\\n                }\\n            }\\n        }\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "goat-latin",
        "description": "You are given a string sentence that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.\nWe would like to convert the sentence to \"Goat Latin\" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:\n\nIf a word begins with a vowel ('a', 'e', 'i', 'o', or 'u'), append \"ma\" to the end of the word.\n\n\t\nFor example, the word \"apple\" becomes \"applema\".\n\n\nIf a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add \"ma\".\n\t\nFor example, the word \"goat\" becomes \"oatgma\".\n\n\nAdd one letter 'a' to the end of each word per its word index in the sentence, starting with 1.\n\t\nFor example, the first word gets \"a\" added to the end, the second word gets \"aa\" added to the end, and so on.\n\n\n\nReturn the final sentence representing the conversion from sentence to Goat Latin.",
        "examples": [
            "Input: sentence = \"I speak Goat Latin\"\nOutput: \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"",
            "Input: sentence = \"The quick brown fox jumped over the lazy dog\"\nOutput: \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\""
        ],
        "constrains": "1 <= sentence.length <= 150\nsentence consists of English letters and spaces.\nsentence has no leading or trailing spaces.\nAll the words in sentence are separated by a single space.",
        "release_time": 1683445696,
        "oracle_code": "class Solution {\n    public String toGoatLatin(String sentence) {\n        sentence.toLowerCase();\n        String[] words=sentence.split(\" \",0);\n        int i=1;\n        String ans=\"\";\n        for(String word:words){\n           \n            char p1=word.charAt(0);\n            char p=word.toLowerCase().charAt(0);\n            String k=\"\";\n            if(p=='a'||p=='i'||p=='o'||p=='e'||p=='u'){\n                k+=word+\"ma\";\n            }\n            else{\n                k+=word.substring(1,word.length());\n                k+=p1;\n                k+=\"ma\";\n            }\n            for(int m=0;m<i;m++){\n               k+='a';\n            }\n            ans+=k;\n            if(i!=words.length)ans+=\" \";\n            i++;\n        }\n        return ans;\n    }\n}",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public String toGoatLatin(String sentence) {\\n        sentence.toLowerCase();\\n        String[] words=sentence.split(\" \",0);\\n        int i=1;\\n        String ans=\"\";\\n        for(String word:words){\\n           \\n            char p1=word.charAt(0);\\n            char p=word.toLowerCase().charAt(0);\\n            String k=\"\";\\n            if(p==\\'a\\'||p==\\'i\\'||p==\\'o\\'||p==\\'e\\'||p==\\'u\\'){\\n                k+=word+\"ma\";\\n            }\\n            else{\\n                k+=word.substring(1,word.length());\\n                k+=p1;\\n                k+=\"ma\";\\n            }\\n            for(int m=0;m<i;m++){\\n               k+=\\'a\\';\\n            }\\n            ans+=k;\\n            if(i!=words.length)ans+=\" \";\\n            i++;\\n        }\\n        return ans;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "maximum-product-of-splitted-binary-tree",
        "description": "Given the root of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized.\nReturn the maximum product of the sums of the two subtrees. Since the answer may be too large, return it modulo 109 + 7.\nNote that you need to maximize the answer before taking the mod and not after taking it.",
        "examples": [
            "Input: root = [1,2,3,4,5,6]\nOutput: 110\nExplanation: Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11*10)",
            "Input: root = [1,null,2,3,4,null,null,5,6]\nOutput: 90\nExplanation: Remove the red edge and get 2 binary trees with sum 15 and 6.Their product is 90 (15*6)"
        ],
        "constrains": "The number of nodes in the tree is in the range [2, 5 * 104].\n1 <= Node.val <= 104",
        "release_time": 1690454881,
        "oracle_code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxProduct(self, root: Optional[TreeNode]) -> int:\n        def dfs(node):\n            if node:\n                dfs(node.left)\n                dfs(node.right)\n                if node.left and node.right:\n                    node.val+=node.left.val+node.right.val\n                elif node.left and not node.right:\n                    node.val+=node.left.val\n                elif node.right:\n                    node.val+=node.right.val\n        dfs(root)\n\n        ans,val=0,root.val\n        def f(node):\n            nonlocal ans\n            if node:\n                ans=max(ans,(val-node.val)*node.val)\n                f(node.left)\n                f(node.right)\n        f(root)\n        return ans%1000000007",
        "content": "> Python3 Code\\n# Code\\n```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def maxProduct(self, root: Optional[TreeNode]) -> int:\\n        def dfs(node):\\n            if node:\\n                dfs(node.left)\\n                dfs(node.right)\\n                if node.left and node.right:\\n                    node.val+=node.left.val+node.right.val\\n                elif node.left and not node.right:\\n                    node.val+=node.left.val\\n                elif node.right:\\n                    node.val+=node.right.val\\n        dfs(root)\\n\\n        ans,val=0,root.val\\n        def f(node):\\n            nonlocal ans\\n            if node:\\n                ans=max(ans,(val-node.val)*node.val)\\n                f(node.left)\\n                f(node.right)\\n        f(root)\\n        return ans%1000000007\\n```",
        "level": "medium"
    },
    {
        "slug": "max-area-of-island",
        "description": "You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\nThe area of an island is the number of cells with a value 1 in the island.\nReturn the maximum area of an island in grid. If there is no island, return 0.",
        "examples": [
            "Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]\nOutput: 6\nExplanation: The answer is not 11, because the island must be connected 4-directionally.",
            "Input: grid = [[0,0,0,0,0,0,0,0]]\nOutput: 0"
        ],
        "constrains": "m == grid.length\nn == grid[i].length\n1 <= m, n <= 50\ngrid[i][j] is either 0 or 1.",
        "release_time": 1672631767,
        "oracle_code": "class Solution {\n    public int max = 0;\n    public int sum = 0;\n    public int maxAreaOfIsland(int[][] grid) {\n        for(int i = 0; i<grid.length;i++)\n        {\n            for(int j = 0; j<grid[i].length;j++)\n            {\n                if(grid[i][j]!=0)\n                {\n                    sum = 0; \n                    dfs(grid,i,j);\n                    max  = Math.max(max,sum);\n                }\n            }\n        }\n\n        return max;\n    }\n\n    private void dfs(int[][] grid ,int r ,int c)\n    {\n        if(r>=grid.length || c>=grid[0].length || r<0|| c<0 || grid[r][c]==0)\n        {\n            return ;\n        }\n\n        sum++;\n        grid[r][c] = 0;\n        dfs(grid,r,c+1);\n        dfs(grid,r,c-1);\n        dfs(grid,r+1,c);\n        dfs(grid,r-1,c);\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int max = 0;\\n    public int sum = 0;\\n    public int maxAreaOfIsland(int[][] grid) {\\n        for(int i = 0; i<grid.length;i++)\\n        {\\n            for(int j = 0; j<grid[i].length;j++)\\n            {\\n                if(grid[i][j]!=0)\\n                {\\n                    sum = 0; \\n                    dfs(grid,i,j);\\n                    max  = Math.max(max,sum);\\n                }\\n            }\\n        }\\n\\n        return max;\\n    }\\n\\n    private void dfs(int[][] grid ,int r ,int c)\\n    {\\n        if(r>=grid.length || c>=grid[0].length || r<0|| c<0 || grid[r][c]==0)\\n        {\\n            return ;\\n        }\\n\\n        sum++;\\n        grid[r][c] = 0;\\n        dfs(grid,r,c+1);\\n        dfs(grid,r,c-1);\\n        dfs(grid,r+1,c);\\n        dfs(grid,r-1,c);\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "a-number-after-a-double-reversal",
        "description": "Reversing an integer means to reverse all its digits.\n\nFor example, reversing 2021 gives 1202. Reversing 12300 gives 321 as the leading zeros are not retained.\n\nGiven an integer num, reverse num to get reversed1, then reverse reversed1 to get reversed2. Return true if reversed2 equals num. Otherwise return false.",
        "examples": [
            "Input: num = 526\nOutput: true\nExplanation: Reverse num to get 625, then reverse 625 to get 526, which equals num.",
            "Input: num = 1800\nOutput: false\nExplanation: Reverse num to get 81, then reverse 81 to get 18, which does not equal num.",
            "Input: num = 0\nOutput: true\nExplanation: Reverse num to get 0, then reverse 0 to get 0, which equals num."
        ],
        "constrains": "0 <= num <= 106",
        "release_time": 1686977158,
        "oracle_code": "class Solution {\n    public boolean isSameAfterReversals(int num) \n    {\n        int n=num,ans=0;\n        while(n!=0)\n        {\n            int l=n%10;\n            ans=(ans*10)+l;\n            n=n/10;\n        } \n        String s1=Integer.toString(num);\n        String s2=Integer.toString(ans);\n        if(s1.length()==s2.length())  return true;\n        return false;\n    }\n}",
        "content": "# Intuition\\nStep 1: Reverse the number and store it in a variable.\\nStep 2: Take the two integers and convert it into String.\\nStep 3: Check whether both of the string length is equal or not.\\nStep 4: If it is equal return true, else return false.\\n\\n# Approach\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) \\n    {\\n        int n=num,ans=0;\\n        while(n!=0)\\n        {\\n            int l=n%10;\\n            ans=(ans*10)+l;\\n            n=n/10;\\n        } \\n        String s1=Integer.toString(num);\\n        String s2=Integer.toString(ans);\\n        if(s1.length()==s2.length())  return true;\\n        return false;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "number-of-zero-filled-subarrays",
        "description": "Given an integer array nums, return the number of subarrays filled with 0.\nA subarray is a contiguous non-empty sequence of elements within an array.",
        "examples": [
            "Input: nums = [1,3,0,0,2,0,0,4]\nOutput: 6\nExplanation: \nThere are 4 occurrences of [0] as a subarray.\nThere are 2 occurrences of [0,0] as a subarray.\nThere is no occurrence of a subarray with a size more than 2 filled with 0. Therefore, we return 6.",
            "Input: nums = [0,0,0,2,0,0]\nOutput: 9\nExplanation:\nThere are 5 occurrences of [0] as a subarray.\nThere are 3 occurrences of [0,0] as a subarray.\nThere is 1 occurrence of [0,0,0] as a subarray.\nThere is no occurrence of a subarray with a size more than 3 filled with 0. Therefore, we return 9.",
            "Input: nums = [2,10,2019]\nOutput: 0\nExplanation: There is no subarray filled with 0. Therefore, we return 0."
        ],
        "constrains": "1 <= nums.length <= 105\n-109 <= nums[i] <= 109",
        "release_time": 1679359163,
        "oracle_code": "class Solution {\n    public long zeroFilledSubarray(int[] nums) {\n        long res = 0;\n        for (int i = 0; i < nums.length; i++) {\n            int cur = 0;\n            while (i < nums.length && nums[i] == 0) {\n                cur += 1;\n                res += cur;\n                i++;\n            }\n        }\n        return res;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public long zeroFilledSubarray(int[] nums) {\\n        long res = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            int cur = 0;\\n            while (i < nums.length && nums[i] == 0) {\\n                cur += 1;\\n                res += cur;\\n                i++;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "russian-doll-envelopes",
        "description": "You are given a 2D array of integers envelopes where envelopes[i] = [wi, hi] represents the width and the height of an envelope.\nOne envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.\nReturn the maximum number of envelopes you can Russian doll (i.e., put one inside the other).\nNote: You cannot rotate an envelope.",
        "examples": [
            "Input: envelopes = [[5,4],[6,4],[6,7],[2,3]]\nOutput: 3\nExplanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).",
            "Input: envelopes = [[1,1],[1,1],[1,1]]\nOutput: 1"
        ],
        "constrains": "1 <= envelopes.length <= 105\nenvelopes[i].length == 2\n1 <= wi, hi <= 105",
        "release_time": 1653449666,
        "oracle_code": "class Solution {\n    public int binarySearch(int[] dp, int val){\n        int lo=0,hi=dp.length-1,res=0;\n        while(lo<=hi){\n            int mid=(lo+hi)/2;\n            if(dp[mid]<val){\n                res=mid;\n                lo=mid+1;\n            }else{\n                hi=mid-1;\n            }\n        }\n        return res+1;\n    }\n    public int maxEnvelopes(int[][] envelopes) {\n        Arrays.sort(envelopes,(a,b)->a[0]==b[0]?b[1]-a[1]:a[0]-b[0]);\n        int[] LIS=new int[envelopes.length+1];\n        Arrays.fill(LIS,Integer.MAX_VALUE);\n        LIS[0]=Integer.MIN_VALUE;\n        int ans=0;\n        for(int i=0;i<envelopes.length;i++){\n            int val=envelopes[i][1];\n            int insertIndex=binarySearch(LIS,val);\n            ans=Math.max(ans,insertIndex);\n            if(LIS[insertIndex]>=val){\n                LIS[insertIndex]=val;\n            }\n        }\n        return ans;\n    }\n}",
        "content": "**If you like this solution or find it useful, please upvote this post.**\\n<details>\\n\\t<summary>Prerequisite</summary>\\n\\t<br>\\n\\tBefore moving on to the solution, you should know how can we find the length of <strong>Longest Increasing Subsequence</strong> unsing <strong>Binary Search</strong>. You can find the detailed explanation of the logic on the below link.                                        \\n\\t</br>\\n\\t<br></br>\\n\\t<a href=\"https://leetcode.com/problems/longest-increasing-subsequence/discuss/1636162/java-binary-search-stepwise-explanation\">Longest Increasing Subsequence Using Binary Search</a>\\n</details>\\n<br></br>\\n\\n#### Why we need to sort?\\n* In these types of problem when we are dealing with two dimensions, we need to reduce the problem from two-dimensional array into a one-dimensional array in order to improve time complexity. \\n* **\"Sort first when things are undecided\"**, sorting can make the data orderly, reduce the degree of confusion, and often help us to sort out our thinking. the same is true with this question. Now, after doing the correct sorting, we just need to find Longest Increasing Subsequence of that one dimensional array.\\n**Now, you may be wondered what correct sorting actually is?**\\nIt is the sorting which we do to order to achieve the answer. Like, increasing, non-increasing sorting. Without any further discussion, let\\'s dig into Intuition followed by algorithm.\\n\\n##### Algorithm\\n* We sort the array in increasing order of width. And if two widths are same, we need to sort height in decreasing order. \\n* Now why we need to sort in decreasing order if two widths are same. By this practice, we\\'re assuring that no width will get counted more than one time. Let\\'s take an example\\nenvelopes=`[[3, 5], [6, 7], [7, 13], [6, 10], [8, 4], [7, 11]]`\\n![image](https://assets.leetcode.com/users/images/b8e49902-0d0c-477f-a396-2fbc04b4f59b_1643640325.8523316.png)\\nNow, if you see for a while, **6 and 7** is counted twice while we\\'re calculating the length of LIS, which will give the wrong ans. As question is asking, if any width/height are less than or equal, then, it is not possible to russian doll these envelopes. \\nNow, we know the problem. So, how can we tackle these conditions when two width are same, so that it won\\'t affect our answer. We can simple **reverse sort the height if two width are equal, to remove duplicacy.**\\nNow, you may question, how reverse sorting the height would remove duplicacy? As the name itself says, Longest Increasing Subsequnce, the next coming height would be less than the previous one. Hence, forbidding it to increase length count.\\n![image](https://assets.leetcode.com/users/images/31add436-310d-452d-b696-f7faff8ce2f6_1643641876.2816072.png)\\nIf you don\\'t understand how LIS is calculated here, I strongly refer you to follow the prerequisite.\\nNow, we have **sucessfully reduced the problem to LIS!** All you need to apply classical LIS on heights, to calculate the ans. This would be the maximum number of envelopes can be russian doll.\\n\\n**Code**\\n\\n```\\nclass Solution {\\n    public int binarySearch(int[] dp, int val){\\n        int lo=0,hi=dp.length-1,res=0;\\n        while(lo<=hi){\\n            int mid=(lo+hi)/2;\\n            if(dp[mid]<val){\\n                res=mid;\\n                lo=mid+1;\\n            }else{\\n                hi=mid-1;\\n            }\\n        }\\n        return res+1;\\n    }\\n    public int maxEnvelopes(int[][] envelopes) {\\n        Arrays.sort(envelopes,(a,b)->a[0]==b[0]?b[1]-a[1]:a[0]-b[0]);\\n        int[] LIS=new int[envelopes.length+1];\\n        Arrays.fill(LIS,Integer.MAX_VALUE);\\n        LIS[0]=Integer.MIN_VALUE;\\n        int ans=0;\\n        for(int i=0;i<envelopes.length;i++){\\n            int val=envelopes[i][1];\\n            int insertIndex=binarySearch(LIS,val);\\n            ans=Math.max(ans,insertIndex);\\n            if(LIS[insertIndex]>=val){\\n                LIS[insertIndex]=val;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```\\n\\nNow, if you compare the code of this problem with the classical LIS, it is very similar. Infact, we have added only one line to get the maximum Russian Doll.\\n\\n`Arrays.sort(envelopes,(a,b)->a[0]==b[0]?b[1]-a[1]:a[0]-b[0]);`\\n\\nLanguage Used- **JAVA**\\nTime Complexity- **O(nlogn)**\\nSpace Complexity- **O(n)**\\n\\n**Python Solution-**\\n```class Solution:\\n    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:\\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\\n        LIS = []\\n        size = 0\\n        for (w, h) in envelopes:\\n            if not LIS or h > LIS[-1]:\\n                LIS.append(h)\\n                size += 1\\n            else:\\n                l, r = 0, size\\n                while l < r:\\n                    m = l + (r - l) // 2\\n                    if LIS[m] < h:\\n                        l = m + 1\\n                    else:\\n                        r = m\\n                LIS[l] = h\\n        return size\\n```\\nby @bettercoder168\\n\\nC++ Code\\n```\\nclass Solution {\\npublic:\\n    static bool comp(vector<int> &a, vector<int> &b){\\n        if(a[0]==b[0]){\\n            return a[1]>b[1];\\n        }\\n        return a[0]<b[0];\\n    }\\n        \\n    int maxEnvelopes(vector<vector<int>>& envelopes) {\\n        sort(envelopes.begin(), envelopes.end(), comp);\\n        int i, j, n=envelopes.size();\\n        vector<int>lis;\\n        \\n        for(i=0; i<n; i++){\\n            auto it = lower_bound(lis.begin(), lis.end(), envelopes[i][1]);\\n            if(it==lis.end()){lis.push_back(envelopes[i][1]);}\\n            else{\\n                *it = envelopes[i][1];\\n            }\\n        }\\n        return lis.size();\\n    }\\n};\\n```\\nby @uttarandas501\\n\\t\\t\\n##### If you like this solution or find it useful, please upvote this post.\\n",
        "level": "hard"
    },
    {
        "slug": "count-artifacts-that-can-be-extracted",
        "description": "There is an n x n 0-indexed grid with some artifacts buried in it. You are given the integer n and a 0-indexed 2D integer array artifacts describing the positions of the rectangular artifacts where artifacts[i] = [r1i, c1i, r2i, c2i] denotes that the ith artifact is buried in the subgrid where:\n\n(r1i, c1i) is the coordinate of the top-left cell of the ith artifact and\n(r2i, c2i) is the coordinate of the bottom-right cell of the ith artifact.\n\nYou will excavate some cells of the grid and remove all the mud from them. If the cell has a part of an artifact buried underneath, it will be uncovered. If all the parts of an artifact are uncovered, you can extract it.\nGiven a 0-indexed 2D integer array dig where dig[i] = [ri, ci] indicates that you will excavate the cell (ri, ci), return the number of artifacts that you can extract.\nThe test cases are generated such that:\n\nNo two artifacts overlap.\nEach artifact only covers at most 4 cells.\nThe entries of dig are unique.",
        "examples": [
            "Input: n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1]]\nOutput: 1\nExplanation: \nThe different colors represent different artifacts. Excavated cells are labeled with a 'D' in the grid.\nThere is 1 artifact that can be extracted, namely the red artifact.\nThe blue artifact has one part in cell (1,1) which remains uncovered, so we cannot extract it.\nThus, we return 1.",
            "Input: n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1],[1,1]]\nOutput: 2\nExplanation: Both the red and blue artifacts have all parts uncovered (labeled with a 'D') and can be extracted, so we return 2."
        ],
        "constrains": "1 <= n <= 1000\n1 <= artifacts.length, dig.length <= min(n2, 105)\nartifacts[i].length == 4\ndig[i].length == 2\n0 <= r1i, c1i, r2i, c2i, ri, ci <= n - 1\nr1i <= r2i\nc1i <= c2i\nNo two artifacts will overlap.\nThe number of cells covered by an artifact is at most 4.\nThe entries of dig are unique.",
        "release_time": 1647147289,
        "oracle_code": "class Solution {\n    public int digArtifacts(int n, int[][] artifacts, int[][] dig) {\n        \n        boolean visit[][]=new boolean[n][n];\n        for(int arr[]:dig){\n            visit[arr[0]][arr[1]]=true;\n        }\n        \n        int ans=0;\n        for(int arr[]:artifacts){\n            \n            boolean flag=true;\n            for(int i=arr[0];i<=arr[2];i++){\n                for(int j=arr[1];j<=arr[3];j++){\n                    if(!visit[i][j]) flag=false;\n                }\n            }\n            if(flag) ans++;\n        }\n        return ans;\n    }\n}",
        "content": "```\\nclass Solution {\\n    public int digArtifacts(int n, int[][] artifacts, int[][] dig) {\\n        \\n        boolean visit[][]=new boolean[n][n];\\n        for(int arr[]:dig){\\n            visit[arr[0]][arr[1]]=true;\\n        }\\n        \\n        int ans=0;\\n        for(int arr[]:artifacts){\\n            \\n            boolean flag=true;\\n            for(int i=arr[0];i<=arr[2];i++){\\n                for(int j=arr[1];j<=arr[3];j++){\\n                    if(!visit[i][j]) flag=false;\\n                }\\n            }\\n            if(flag) ans++;\\n        }\\n        return ans;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "number-of-ways-to-earn-points",
        "description": "There is a test that has n types of questions. You are given an integer target and a 0-indexed 2D integer array types where types[i] = [counti, marksi] indicates that there are counti questions of the ith type, and each one of them is worth marksi points.\n\n\nReturn the number of ways you can earn exactly target points in the exam. Since the answer may be too large, return it modulo 109 + 7.\nNote that questions of the same type are indistinguishable.\n\nFor example, if there are 3 questions of the same type, then solving the 1st and 2nd questions is the same as solving the 1st and 3rd questions, or the 2nd and 3rd questions.",
        "examples": [
            "Input: target = 6, types = [[6,1],[3,2],[2,3]]\nOutput: 7\nExplanation: You can earn 6 points in one of the seven ways:\n- Solve 6 questions of the 0th type: 1 + 1 + 1 + 1 + 1 + 1 = 6\n- Solve 4 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 1 + 2 = 6\n- Solve 2 questions of the 0th type and 2 questions of the 1st type: 1 + 1 + 2 + 2 = 6\n- Solve 3 questions of the 0th type and 1 question of the 2nd type: 1 + 1 + 1 + 3 = 6\n- Solve 1 question of the 0th type, 1 question of the 1st type and 1 question of the 2nd type: 1 + 2 + 3 = 6\n- Solve 3 questions of the 1st type: 2 + 2 + 2 = 6\n- Solve 2 questions of the 2nd type: 3 + 3 = 6",
            "Input: target = 5, types = [[50,1],[50,2],[50,5]]\nOutput: 4\nExplanation: You can earn 5 points in one of the four ways:\n- Solve 5 questions of the 0th type: 1 + 1 + 1 + 1 + 1 = 5\n- Solve 3 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 2 = 5\n- Solve 1 questions of the 0th type and 2 questions of the 1st type: 1 + 2 + 2 = 5\n- Solve 1 question of the 2nd type: 5",
            "Input: target = 18, types = [[6,1],[3,2],[2,3]]\nOutput: 1\nExplanation: You can only earn 18 points by answering all questions."
        ],
        "constrains": "1 <= target <= 1000\nn == types.length\n1 <= n <= 50\ntypes[i].length == 2\n1 <= counti, marksi <= 50",
        "release_time": 1677989079,
        "oracle_code": "class Solution {\n    public int waysToReachTarget(int target, int[][] types) {\n        int[][] memo = new int[target + 1][types.length + 1];\n        for (int[] ints : memo) {\n            Arrays.fill(ints, -1);\n        }\n        return (int) backtrack(target, types, 0, memo);\n    }\n    \n    private long backtrack(int target, int[][] types, int start, int[][] memo) {\n        if (target == 0) {\n            return 1;\n        }\n        if (target < 0) {\n            return 0;\n        }\n        if (memo[target][start] != -1) {\n            return memo[target][start];\n        }\n        long res = 0;\n        for (int i = start; i < types.length; i++) {\n            for (int j = 1; j <= types[i][0]; j++) {\n                if (target - j * types[i][1] < 0) {\n                    break;\n                }\n                long temp = backtrack(target - j * types[i][1], types, i + 1, memo);\n                res = (res + temp) % 1_000_000_007;\n            }\n        }\n        memo[target][start] = (int) res;\n        return res;\n    }\n}",
        "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity -->\\n<!-- - Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int waysToReachTarget(int target, int[][] types) {\\n        int[][] memo = new int[target + 1][types.length + 1];\\n        for (int[] ints : memo) {\\n            Arrays.fill(ints, -1);\\n        }\\n        return (int) backtrack(target, types, 0, memo);\\n    }\\n    \\n    private long backtrack(int target, int[][] types, int start, int[][] memo) {\\n        if (target == 0) {\\n            return 1;\\n        }\\n        if (target < 0) {\\n            return 0;\\n        }\\n        if (memo[target][start] != -1) {\\n            return memo[target][start];\\n        }\\n        long res = 0;\\n        for (int i = start; i < types.length; i++) {\\n            for (int j = 1; j <= types[i][0]; j++) {\\n                if (target - j * types[i][1] < 0) {\\n                    break;\\n                }\\n                long temp = backtrack(target - j * types[i][1], types, i + 1, memo);\\n                res = (res + temp) % 1_000_000_007;\\n            }\\n        }\\n        memo[target][start] = (int) res;\\n        return res;\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "similar-string-groups",
        "description": "Two strings, X and Y, are considered similar if either they are identical or we can make them equivalent by swapping at most two letters (in distinct positions) within the string X.\nFor example, \"tars\"\u00a0and \"rats\"\u00a0are similar (swapping at positions 0 and 2), and \"rats\" and \"arts\" are similar, but \"star\" is not similar to \"tars\", \"rats\", or \"arts\".\nTogether, these form two connected groups by similarity: {\"tars\", \"rats\", \"arts\"} and {\"star\"}.\u00a0 Notice that \"tars\" and \"arts\" are in the same group even though they are not similar.\u00a0 Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.\nWe are given a list strs of strings where every string in strs is an anagram of every other string in strs. How many groups are there?",
        "examples": [
            "Input: strs = [\"tars\",\"rats\",\"arts\",\"star\"]\nOutput: 2",
            "Input: strs = [\"omv\",\"ovm\"]\nOutput: 1"
        ],
        "constrains": "1 <= strs.length <= 300\n1 <= strs[i].length <= 300\nstrs[i] consists of lowercase letters only.\nAll words in strs have the same length and are anagrams of each other.",
        "release_time": 1682695025,
        "oracle_code": "class Solution {\n    boolean isSimilar(String str1,String str2)\n    {\n        int count=0;\n        for(int i=0;i<str1.length();i++)\n        {\n            if(str1.charAt(i)!=str2.charAt(i))\n            {\n                count++;\n                if(count>2)\n                {\n                    return false;\n                }\n            }\n            \n        }\n        return count==0 || count==2;\n    }\n    void dfs(String curr, String []strs, Set<String> visited)\n    {\n        //base condition\n        if(visited.contains(curr))\n        {\n            return;\n        }\n        visited.add(curr);\n        for(int i=0;i<strs.length;i++)\n        {\n         if(isSimilar(curr,strs[i]))\n         {\n             dfs(strs[i],strs,visited);\n         }   \n        }\n    }\n    public int numSimilarGroups(String[] strs)\n    {\n        int count =0;\n\n        //Base condition\n        if(strs==null ||strs.length ==0)\n        {\n            return 0;\n        }\n\n        //now create a set for visited elements which are similar\n        Set<String> visited = new HashSet<>();\n        for(String s:strs)\n        {\n            if(!visited.contains(s))\n            {\n                dfs(s,strs,visited);\n                count++;\n            }\n        }\n        return count;\n    }\n}",
        "content": "# Intuition\\n![WhatsApp_Image_2023-04-28_at_8.43.47_PM\\\\[1\\\\].jpeg](https://assets.leetcode.com/users/images/fade8110-e5ae-4339-8e4e-a041ca1adfa6_1682695005.1794102.jpeg)\\n![WhatsApp_Image_2023-04-28_at_8.44.14_PM\\\\[1\\\\].jpeg](https://assets.leetcode.com/users/images/bd87a21d-7162-4964-af6b-19a3bc4e3649_1682695016.060982.jpeg)\\n\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    boolean isSimilar(String str1,String str2)\\n    {\\n        int count=0;\\n        for(int i=0;i<str1.length();i++)\\n        {\\n            if(str1.charAt(i)!=str2.charAt(i))\\n            {\\n                count++;\\n                if(count>2)\\n                {\\n                    return false;\\n                }\\n            }\\n            \\n        }\\n        return count==0 || count==2;\\n    }\\n    void dfs(String curr, String []strs, Set<String> visited)\\n    {\\n        //base condition\\n        if(visited.contains(curr))\\n        {\\n            return;\\n        }\\n        visited.add(curr);\\n        for(int i=0;i<strs.length;i++)\\n        {\\n         if(isSimilar(curr,strs[i]))\\n         {\\n             dfs(strs[i],strs,visited);\\n         }   \\n        }\\n    }\\n    public int numSimilarGroups(String[] strs)\\n    {\\n        int count =0;\\n\\n        //Base condition\\n        if(strs==null ||strs.length ==0)\\n        {\\n            return 0;\\n        }\\n\\n        //now create a set for visited elements which are similar\\n        Set<String> visited = new HashSet<>();\\n        for(String s:strs)\\n        {\\n            if(!visited.contains(s))\\n            {\\n                dfs(s,strs,visited);\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "longest-uncommon-subsequence-i",
        "description": "Given two strings a and b, return the length of the longest uncommon subsequence between a and b. If the longest uncommon subsequence does not exist, return -1.\nAn uncommon subsequence between two strings is a string that is a subsequence of one but not the other.\nA subsequence of a string s is a string that can be obtained after deleting any number of characters from s.\n\nFor example, \"abc\" is a subsequence of \"aebdc\" because you can delete the underlined characters in \"aebdc\" to get \"abc\". Other subsequences of \"aebdc\" include \"aebdc\", \"aeb\", and \"\" (empty string).",
        "examples": [
            "Input: a = \"aba\", b = \"cdc\"\nOutput: 3\nExplanation: One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\".\nNote that \"cdc\" is also a longest uncommon subsequence.",
            "Input: a = \"aaa\", b = \"bbb\"\nOutput: 3\nExplanation:\u00a0The longest uncommon subsequences are \"aaa\" and \"bbb\".",
            "Input: a = \"aaa\", b = \"aaa\"\nOutput: -1\nExplanation:\u00a0Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a."
        ],
        "constrains": "1 <= a.length, b.length <= 100\na and b consist of lower-case English letters.",
        "release_time": 1688445720,
        "oracle_code": "class Solution {\n    public int findLUSlength(String a, String b) {\n        if(a.equals(b)){\n            return -1;\n        }else{\n            return Math.max(a.length(),b.length());\n        }\n    }\n}",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.equals(b)){\\n            return -1;\\n        }else{\\n            return Math.max(a.length(),b.length());\\n        }\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "longest-common-prefix",
        "description": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".",
        "examples": [
            "Input: strs = [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"",
            "Input: strs = [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings."
        ],
        "constrains": "1 <= strs.length <= 200\n0 <= strs[i].length <= 200\nstrs[i] consists of only lowercase English letters.",
        "release_time": 1691938780,
        "oracle_code": "class Solution {\n    public String longestCommonPrefix(String[] strs) {\n        Arrays.sort(strs);\n        String start=strs[0];\n         String end=strs[strs.length-1];\n         int count=0;\n         for(int i=0;i<start.length();i++){\n             if(start.charAt(i)==end.charAt(i)){\n            count++;\n             }\n             else{\n                 break;\n             }\n         }\n        \n         return end.substring(0,count);\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n![image.png](https://assets.leetcode.com/users/images/0be6da10-ddf1-4c9f-8387-b9e1137e1d2e_1691938734.0515819.png)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public String longestCommonPrefix(String[] strs) {\\n        Arrays.sort(strs);\\n        String start=strs[0];\\n         String end=strs[strs.length-1];\\n         int count=0;\\n         for(int i=0;i<start.length();i++){\\n             if(start.charAt(i)==end.charAt(i)){\\n            count++;\\n             }\\n             else{\\n                 break;\\n             }\\n         }\\n        \\n         return end.substring(0,count);\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "furthest-building-you-can-reach",
        "description": "You are given an integer array heights representing the heights of buildings, some bricks, and some ladders.\nYou start your journey from building 0 and move to the next building by possibly using bricks or ladders.\nWhile moving from building i to building i+1 (0-indexed),\n\nIf the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.\nIf the current building's height is less than the next building's height, you can either use one ladder or (h[i+1] - h[i]) bricks.\n\nReturn the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.",
        "examples": [
            "Input: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1\nOutput: 4\nExplanation: Starting at building 0, you can follow these steps:\n- Go to building 1 without using ladders nor bricks since 4 >= 2.\n- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 < 7.\n- Go to building 3 without using ladders nor bricks since 7 >= 6.\n- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 < 9.\nIt is impossible to go beyond building 4 because you do not have any more bricks or ladders.",
            "Input: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2\nOutput: 7",
            "Input: heights = [14,3,19,3], bricks = 17, ladders = 0\nOutput: 3"
        ],
        "constrains": "1 <= heights.length <= 105\n1 <= heights[i] <= 106\n0 <= bricks <= 109\n0 <= ladders <= heights.length",
        "release_time": 1689069278,
        "oracle_code": "class Solution {\n    public int furthestBuilding(int[] heights, int bricks, int ladders) {\n        PriorityQueue<Integer> p = new PriorityQueue<>();\n        for(int i=1;i<heights.length;i++){\n            int diff = heights[i] - heights[i-1];\n            if(diff > 0){\n                p.add(diff);\n            }\n            if(p.size() > ladders){\n                bricks -= p.poll();\n            }\n            if(bricks < 0){\n                return i-1;\n            }\n        }\n        if(bricks >= 0) return heights.length-1;\n        return -1;\n    }\n}",
        "content": "# Intuition\\nIdeally we have to use top \\'ladders\\' positive differences in building heighs using ladders and redst using bricks. So we have to maintain a min heap which keeps track positive differences, only the top \\'ladders\\' greatest differences will be used by ladders..\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(nlogn)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int furthestBuilding(int[] heights, int bricks, int ladders) {\\n        PriorityQueue<Integer> p = new PriorityQueue<>();\\n        for(int i=1;i<heights.length;i++){\\n            int diff = heights[i] - heights[i-1];\\n            if(diff > 0){\\n                p.add(diff);\\n            }\\n            if(p.size() > ladders){\\n                bricks -= p.poll();\\n            }\\n            if(bricks < 0){\\n                return i-1;\\n            }\\n        }\\n        if(bricks >= 0) return heights.length-1;\\n        return -1;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "sum-of-left-leaves",
        "description": "Given the root of a binary tree, return the sum of all left leaves.\nA leaf is a node with no children. A left leaf is a leaf that is the left child of another node.",
        "examples": [
            "Input: root = [3,9,20,null,null,15,7]\nOutput: 24\nExplanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.",
            "Input: root = [1]\nOutput: 0"
        ],
        "constrains": "The number of nodes in the tree is in the range [1, 1000].\n-1000 <= Node.val <= 1000",
        "release_time": 1689484464,
        "oracle_code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    static int result;\n\n    public int sumOfLeftLeaves(TreeNode root) {\n        result=0;\n\n        task(root.left, true);\n\n        task(root.right, false);\n\n        return result;\n    }\n\n    static void task(TreeNode root, boolean flag){\n        if(root == null) return;\n\n        if(flag && root.left==null && root.right==null) result+=root.val;\n\n        task(root.left, true);\n        task(root.right, false);\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    static int result;\\n\\n    public int sumOfLeftLeaves(TreeNode root) {\\n        result=0;\\n\\n        task(root.left, true);\\n\\n        task(root.right, false);\\n\\n        return result;\\n    }\\n\\n    static void task(TreeNode root, boolean flag){\\n        if(root == null) return;\\n\\n        if(flag && root.left==null && root.right==null) result+=root.val;\\n\\n        task(root.left, true);\\n        task(root.right, false);\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "reverse-nodes-in-even-length-groups",
        "description": "You are given the head of a linked list.\nThe nodes in the linked list are sequentially assigned to non-empty groups whose lengths form the sequence of the natural numbers (1, 2, 3, 4, ...). The length of a group is the number of nodes assigned to it. In other words,\n\nThe 1st node is assigned to the first group.\nThe 2nd and the 3rd nodes are assigned to the second group.\nThe 4th, 5th, and 6th nodes are assigned to the third group, and so on.\n\nNote that the length of the last group may be less than or equal to 1 + the length of the second to last group.\nReverse the nodes in each group with an even length, and return the head of the modified linked list.",
        "examples": [
            "Input: head = [5,2,6,3,9,1,7,3,8,4]\nOutput: [5,6,2,3,9,1,4,8,3,7]\nExplanation:\n- The length of the first group is 1, which is odd, hence no reversal occurs.\n- The length of the second group is 2, which is even, hence the nodes are reversed.\n- The length of the third group is 3, which is odd, hence no reversal occurs.\n- The length of the last group is 4, which is even, hence the nodes are reversed.",
            "Input: head = [1,1,0,6]\nOutput: [1,0,1,6]\nExplanation:\n- The length of the first group is 1. No reversal occurs.\n- The length of the second group is 2. The nodes are reversed.\n- The length of the last group is 1. No reversal occurs.",
            "Input: head = [1,1,0,6,5]\nOutput: [1,0,1,5,6]\nExplanation:\n- The length of the first group is 1. No reversal occurs.\n- The length of the second group is 2. The nodes are reversed.\n- The length of the last group is 2. The nodes are reversed."
        ],
        "constrains": "The number of nodes in the list is in the range [1, 105].\n0 <= Node.val <= 105",
        "release_time": 1675553997,
        "oracle_code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseEvenLengthGroups(ListNode head) {\n        if(head == null) return head;\n\n        int groupSize = 1;\n        int count = 0;\n        ListNode left = null;\n        ListNode ptr = head;\n        ListNode last = null;\n        \n        while(ptr != null) {\n            count++;\n            if(count == groupSize) {\n                if(groupSize  % 2 == 0) {\n                    ListNode end = ptr.next;\n                   // reverse\n                    ListNode cur = left;\n                    ListNode next = null;\n                    ListNode prev = ptr.next;\n                    while(cur != end) {\n                        next = cur.next;\n                        cur.next = prev;\n                        prev = cur;\n                        cur = next;\n                    }\n                    // connect\n                    last.next = prev;\n                    ptr = left;\n                   \n                }\n                last = ptr;\n                left = ptr.next;\n                count = 0;\n                groupSize++;\n            }\n            ptr = ptr.next;\n        }\n\n        if(count > 0 && count % 2 == 0) {\n            // reverse\n            ListNode cur = left;\n            ListNode next = null;\n            ListNode prev = ptr;\n\n            while(cur != null) {\n                next = cur.next;\n                cur.next = prev;\n                prev = cur;\n                cur = next;\n            }\n\n            last.next = prev;\n        }\n\n        return head;\n    }\n\n}",
        "content": "# Approach\\nUse sliding window idea by keeping track of last node (of previous group), left node (of current group), pointer node (traverse list), groupSize, count of nodes in current group.\\n\\nOnce you start iterating, you will have to reverse current group if it meets the 2 conditions.\\n1. Count == groupSize\\n2. groupSize is even\\n\\nYou reverse and connect the reversed list back to your main list. Then you must update your iteration pointer since it will be in the back of the reversed list.\\n\\nAlso update last seen node (of previous group), new left node, count, and groupsize.\\n\\nDo the same reverse for the remaining nodes.\\n\\n# Complexity\\n- Time complexity:\\nO(N): One iteration of list is done.\\n\\n- Space complexity:\\nO(1): Constant # of variables/pointers\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode reverseEvenLengthGroups(ListNode head) {\\n        if(head == null) return head;\\n\\n        int groupSize = 1;\\n        int count = 0;\\n        ListNode left = null;\\n        ListNode ptr = head;\\n        ListNode last = null;\\n        \\n        while(ptr != null) {\\n            count++;\\n            if(count == groupSize) {\\n                if(groupSize  % 2 == 0) {\\n                    ListNode end = ptr.next;\\n                   // reverse\\n                    ListNode cur = left;\\n                    ListNode next = null;\\n                    ListNode prev = ptr.next;\\n                    while(cur != end) {\\n                        next = cur.next;\\n                        cur.next = prev;\\n                        prev = cur;\\n                        cur = next;\\n                    }\\n                    // connect\\n                    last.next = prev;\\n                    ptr = left;\\n                   \\n                }\\n                last = ptr;\\n                left = ptr.next;\\n                count = 0;\\n                groupSize++;\\n            }\\n            ptr = ptr.next;\\n        }\\n\\n        if(count > 0 && count % 2 == 0) {\\n            // reverse\\n            ListNode cur = left;\\n            ListNode next = null;\\n            ListNode prev = ptr;\\n\\n            while(cur != null) {\\n                next = cur.next;\\n                cur.next = prev;\\n                prev = cur;\\n                cur = next;\\n            }\\n\\n            last.next = prev;\\n        }\\n\\n        return head;\\n    }\\n\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "magic-squares-in-grid",
        "description": "A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.\nGiven a row x col\u00a0grid\u00a0of integers, how many 3 x 3 \"magic square\" subgrids are there?\u00a0 (Each subgrid is contiguous).",
        "examples": [
            "Input: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]\nOutput: 1\nExplanation: \nThe following subgrid is a 3 x 3 magic square:\n\nwhile this one is not:\n\nIn total, there is only one magic square inside the given grid.",
            "Input: grid = [[8]]\nOutput: 0"
        ],
        "constrains": "row == grid.length\ncol == grid[i].length\n1 <= row, col <= 10\n0 <= grid[i][j] <= 15",
        "release_time": 1648659719,
        "oracle_code": "class Solution {\n    /** Algorithm\n        1. If nr of columns or rows < 3 return false \n        2. Traverse the grid with i, j from 0 to row -2, col -2 and count how many magic squares/views exist.\n        3. For each such view (3x3), determine if it satisfies the listen conditions:\n           - use a boolean[10] seen to mark the already present number in 3x3 view\n           - return false if number if <1 or > 9\n           - return false if any found sum is different that a reference sum\n        4. Count the views /3x3 matrices and return their number   \n    */\n    public int numMagicSquaresInside(int[][] grid) {\n        if(grid.length < 3 || grid[0].length < 3) {\n            return 0;\n        }\n        int magicSquares = 0;\n        for (int i = 0; i < grid.length -2; i++) {\n            for (int j = 0; j < grid[i].length -2; j++) {\n                if (isMagicSquare(grid, i, j)) {\n                    magicSquares++;\n                }\n            }\n        }\n        return magicSquares;\n    }\n    \n    private boolean isMagicSquare(int[][] grid, int row, int col) {\n        // map the present number is a boolean of 10 (1-9)\n        boolean[] seen = new boolean[10];\n        // calculate a reference sum, the sum of first row than has to match with the rest of 7 sums\n        int sum = grid[row][col] + grid[row][col+1] + grid[row][col+2];\n        int tempSum = 0;\n        // row sum\n        for (int i = row; i <= row +2; i++) {\n            tempSum = 0;\n            for (int j = col; j <= col +2; j++) {\n                // if nr if < 9 or > 9 OR already exists, return immediately false as this 3x3 grid is not magic\n                if (grid[i][j] > 9 || grid[i][j] < 1 || seen[grid[i][j]]) {\n                    return false;\n                }\n                seen[grid[i][j]] = true;\n                tempSum += grid[i][j];\n            }\n            if (tempSum != sum) {\n                return false;\n            }\n        }\n        //col sum\n        for (int j = col; j <= col +2; j++) {\n            if (grid[row][j] + grid[row +1][j] + grid[row+2][j] != sum) {\n                return false;\n            }\n        }\n        //diag 1 and 2\n        if (grid[row][col] + grid[row+1][col+1] + grid[row+2][col+2] != sum ||\n           grid[row][col+2] + grid[row+1][col+1] + grid[row+2][col] != sum) {\n            return false;\n        }\n        return true;\n    }\n}",
        "content": "```\\nclass Solution {\\n    /** Algorithm\\n        1. If nr of columns or rows < 3 return false \\n        2. Traverse the grid with i, j from 0 to row -2, col -2 and count how many magic squares/views exist.\\n        3. For each such view (3x3), determine if it satisfies the listen conditions:\\n           - use a boolean[10] seen to mark the already present number in 3x3 view\\n           - return false if number if <1 or > 9\\n           - return false if any found sum is different that a reference sum\\n        4. Count the views /3x3 matrices and return their number   \\n    */\\n    public int numMagicSquaresInside(int[][] grid) {\\n        if(grid.length < 3 || grid[0].length < 3) {\\n            return 0;\\n        }\\n        int magicSquares = 0;\\n        for (int i = 0; i < grid.length -2; i++) {\\n            for (int j = 0; j < grid[i].length -2; j++) {\\n                if (isMagicSquare(grid, i, j)) {\\n                    magicSquares++;\\n                }\\n            }\\n        }\\n        return magicSquares;\\n    }\\n    \\n    private boolean isMagicSquare(int[][] grid, int row, int col) {\\n        // map the present number is a boolean of 10 (1-9)\\n        boolean[] seen = new boolean[10];\\n        // calculate a reference sum, the sum of first row than has to match with the rest of 7 sums\\n        int sum = grid[row][col] + grid[row][col+1] + grid[row][col+2];\\n        int tempSum = 0;\\n        // row sum\\n        for (int i = row; i <= row +2; i++) {\\n            tempSum = 0;\\n            for (int j = col; j <= col +2; j++) {\\n                // if nr if < 9 or > 9 OR already exists, return immediately false as this 3x3 grid is not magic\\n                if (grid[i][j] > 9 || grid[i][j] < 1 || seen[grid[i][j]]) {\\n                    return false;\\n                }\\n                seen[grid[i][j]] = true;\\n                tempSum += grid[i][j];\\n            }\\n            if (tempSum != sum) {\\n                return false;\\n            }\\n        }\\n        //col sum\\n        for (int j = col; j <= col +2; j++) {\\n            if (grid[row][j] + grid[row +1][j] + grid[row+2][j] != sum) {\\n                return false;\\n            }\\n        }\\n        //diag 1 and 2\\n        if (grid[row][col] + grid[row+1][col+1] + grid[row+2][col+2] != sum ||\\n           grid[row][col+2] + grid[row+1][col+1] + grid[row+2][col] != sum) {\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "add-strings",
        "description": "Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.\nYou must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.",
        "examples": [
            "Input: num1 = \"11\", num2 = \"123\"\nOutput: \"134\"",
            "Input: num1 = \"456\", num2 = \"77\"\nOutput: \"533\"",
            "Input: num1 = \"0\", num2 = \"0\"\nOutput: \"0\""
        ],
        "constrains": "1 <= num1.length, num2.length <= 104\nnum1 and num2 consist of only digits.\nnum1 and num2 don't have any leading zeros except for the zero itself.",
        "release_time": 1692165728,
        "oracle_code": "class Solution:\n    def addStrings(self, num1: str, num2: str) -> str:\n        sys.set_int_max_str_digits(10000)\n        nattu = int(num1)\n        babu = int(num2)\n        result = str(nattu+babu)\n        return result",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def addStrings(self, num1: str, num2: str) -> str:\\n        sys.set_int_max_str_digits(10000)\\n        nattu = int(num1)\\n        babu = int(num2)\\n        result = str(nattu+babu)\\n        return result\\n\\n```",
        "level": "easy"
    },
    {
        "slug": "number-of-arithmetic-triplets",
        "description": "You are given a 0-indexed, strictly increasing integer array nums and a positive integer diff. A triplet (i, j, k) is an arithmetic triplet if the following conditions are met:\n\ni < j < k,\nnums[j] - nums[i] == diff, and\nnums[k] - nums[j] == diff.\n\nReturn the number of unique arithmetic triplets.",
        "examples": [
            "Input: nums = [0,1,4,6,7,10], diff = 3\nOutput: 2\nExplanation:\n(1, 2, 4) is an arithmetic triplet because both 7 - 4 == 3 and 4 - 1 == 3.\n(2, 4, 5) is an arithmetic triplet because both 10 - 7 == 3 and 7 - 4 == 3.",
            "Input: nums = [4,5,6,7,8,9], diff = 2\nOutput: 2\nExplanation:\n(0, 2, 4) is an arithmetic triplet because both 8 - 6 == 2 and 6 - 4 == 2.\n(1, 3, 5) is an arithmetic triplet because both 9 - 7 == 2 and 7 - 5 == 2."
        ],
        "constrains": "3 <= nums.length <= 200\n0 <= nums[i] <= 200\n1 <= diff <= 50\nnums is strictly increasing.",
        "release_time": 1671050315,
        "oracle_code": "class Solution {\n    public int arithmeticTriplets(int[] nums, int diff) {\n        \n        int count=0;\n        for(int i=0;i<nums.length;i++){\n            for(int j=i+1;j<nums.length;j++){\n                for(int k=j+1;k<nums.length;k++){\n                    if(nums[j]-nums[i]==diff && nums[k] - nums[j] == diff){\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int arithmeticTriplets(int[] nums, int diff) {\\n        \\n        int count=0;\\n        for(int i=0;i<nums.length;i++){\\n            for(int j=i+1;j<nums.length;j++){\\n                for(int k=j+1;k<nums.length;k++){\\n                    if(nums[j]-nums[i]==diff && nums[k] - nums[j] == diff){\\n                        count++;\\n                    }\\n                }\\n            }\\n        }\\n        \\n        return count;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "goal-parser-interpretation",
        "description": "You own a Goal Parser that can interpret a string command. The command consists of an alphabet of \"G\", \"()\" and/or \"(al)\" in some order. The Goal Parser will interpret \"G\" as the string \"G\", \"()\" as the string \"o\", and \"(al)\" as the string \"al\". The interpreted strings are then concatenated in the original order.\nGiven the string command, return the Goal Parser's interpretation of command.",
        "examples": [
            "Input: command = \"G()(al)\"\nOutput: \"Goal\"\nExplanation:\u00a0The Goal Parser interprets the command as follows:\nG -> G\n() -> o\n(al) -> al\nThe final concatenated result is \"Goal\".",
            "Input: command = \"G()()()()(al)\"\nOutput: \"Gooooal\"",
            "Input: command = \"(al)G(al)()()G\"\nOutput: \"alGalooG\""
        ],
        "constrains": "1 <= command.length <= 100\ncommand consists of \"G\", \"()\", and/or \"(al)\" in some order.",
        "release_time": 1691232280,
        "oracle_code": "class Solution {\n    public String interpret(String command) {\n        String str1 = command.replace(\"()\", \"o\");\n        String str2 = str1.replace(\"(al)\", \"al\");\n        return str2;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String interpret(String command) {\\n        String str1 = command.replace(\"()\", \"o\");\\n        String str2 = str1.replace(\"(al)\", \"al\");\\n        return str2;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "number-of-senior-citizens",
        "description": "You are given a 0-indexed array of strings details. Each element of details provides information about a given passenger compressed into a string of length 15. The system is such that:\n\nThe first ten characters consist of the phone number of passengers.\nThe next character denotes the gender of the person.\nThe following two characters are used to indicate the age of the person.\nThe last two characters determine the seat allotted to that person.\n\nReturn the number of passengers who are strictly more than 60 years old.",
        "examples": [
            "Input: details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"]\nOutput: 2\nExplanation: The passengers at indices 0, 1, and 2 have ages 75, 92, and 40. Thus, there are 2 people who are over 60 years old.",
            "Input: details = [\"1313579440F2036\",\"2921522980M5644\"]\nOutput: 0\nExplanation: None of the passengers are older than 60."
        ],
        "constrains": "1 <= details.length <= 100\ndetails[i].length == 15\ndetails[i] consists of digits from '0' to '9'.\ndetails[i][10] is either 'M' or 'F' or 'O'.\nThe phone numbers and seat numbers of the passengers are distinct.",
        "release_time": 1683999672,
        "oracle_code": "class Solution {\n    public int countSeniors(String[] details) {\n\n     int count=0;\n     for(int i=0;i<details.length;i++)\n     {\n         int a=details[i].charAt(11)-'0';\n         a*=10;\n         a+=details[i].charAt(12)-'0';\n         if(a>60)\n         {\n             count++;\n         }\n     }\n     return count;    \n    }\n}",
        "content": "\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n```\\nclass Solution {\\n    public int countSeniors(String[] details) {\\n\\n     int count=0;\\n     for(int i=0;i<details.length;i++)\\n     {\\n         int a=details[i].charAt(11)-\\'0\\';\\n         a*=10;\\n         a+=details[i].charAt(12)-\\'0\\';\\n         if(a>60)\\n         {\\n             count++;\\n         }\\n     }\\n     return count;    \\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "print-in-order",
        "description": "Suppose we have a class:\n\npublic class Foo {\n  public void first() { print(\"first\"); }\n  public void second() { print(\"second\"); }\n  public void third() { print(\"third\"); }\n}\n\nThe same instance of Foo will be passed to three different threads. Thread A will call first(), thread B will call second(), and thread C will call third(). Design a mechanism and modify the program to ensure that second() is executed after first(), and third() is executed after second().\nNote:\nWe do not know how the threads will be scheduled in the operating system, even though the numbers in the input seem to imply the ordering. The input format you see is mainly to ensure our tests' comprehensiveness.",
        "examples": [
            "Input: nums = [1,2,3]\nOutput: \"firstsecondthird\"\nExplanation: There are three threads being fired asynchronously. The input [1,2,3] means thread A calls first(), thread B calls second(), and thread C calls third(). \"firstsecondthird\" is the correct output.",
            "Input: nums = [1,3,2]\nOutput: \"firstsecondthird\"\nExplanation: The input [1,3,2] means thread A calls first(), thread B calls third(), and thread C calls second(). \"firstsecondthird\" is the correct output."
        ],
        "constrains": "nums is a permutation of [1, 2, 3].",
        "release_time": 1662361771,
        "oracle_code": "class Foo {\n    private volatile int num = 1;\n    public Foo() {\n\n    }\n\n    public void first(Runnable printFirst) throws InterruptedException {\n        while(num != 1){\n        }\n\n        // printFirst.run() outputs \"first\". Do not change or remove this line.\n        printFirst.run();\n        num++;\n    }\n\n    public void second(Runnable printSecond) throws InterruptedException {\n        while(num != 2){\n        }\n        // printSecond.run() outputs \"second\". Do not change or remove this line.\n        printSecond.run();\n        num++;\n    }\n\n    public void third(Runnable printThird) throws InterruptedException {\n        while(num != 3){\n        }\n        // printThird.run() outputs \"third\". Do not change or remove this line.\n        printThird.run();\n        num++;\n    }\n}",
        "content": "```\\nclass Foo {\\n    private volatile int num = 1;\\n    public Foo() {\\n\\n    }\\n\\n    public void first(Runnable printFirst) throws InterruptedException {\\n        while(num != 1){\\n        }\\n\\n        // printFirst.run() outputs \"first\". Do not change or remove this line.\\n        printFirst.run();\\n        num++;\\n    }\\n\\n    public void second(Runnable printSecond) throws InterruptedException {\\n        while(num != 2){\\n        }\\n        // printSecond.run() outputs \"second\". Do not change or remove this line.\\n        printSecond.run();\\n        num++;\\n    }\\n\\n    public void third(Runnable printThird) throws InterruptedException {\\n        while(num != 3){\\n        }\\n        // printThird.run() outputs \"third\". Do not change or remove this line.\\n        printThird.run();\\n        num++;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "increasing-decreasing-string",
        "description": "You are given a string s. Reorder the string using the following algorithm:\n\nPick the smallest character from s and append it to the result.\nPick the smallest character from s which is greater than the last appended character to the result and append it.\nRepeat step 2 until you cannot pick more characters.\nPick the largest character from s and append it to the result.\nPick the largest character from s which is smaller than the last appended character to the result and append it.\nRepeat step 5 until you cannot pick more characters.\nRepeat the steps from 1 to 6 until you pick all characters from s.\n\nIn each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.\nReturn the result string after sorting s with this algorithm.",
        "examples": [
            "Input: s = \"aaaabbbbcccc\"\nOutput: \"abccbaabccba\"\nExplanation: After steps 1, 2 and 3 of the first iteration, result = \"abc\"\nAfter steps 4, 5 and 6 of the first iteration, result = \"abccba\"\nFirst iteration is done. Now s = \"aabbcc\" and we go back to step 1\nAfter steps 1, 2 and 3 of the second iteration, result = \"abccbaabc\"\nAfter steps 4, 5 and 6 of the second iteration, result = \"abccbaabccba\"",
            "Input: s = \"rat\"\nOutput: \"art\"\nExplanation: The word \"rat\" becomes \"art\" after re-ordering it with the mentioned algorithm."
        ],
        "constrains": "1 <= s.length <= 500\ns consists of only lowercase English letters.",
        "release_time": 1676313293,
        "oracle_code": "class Solution {\n    public String sortString(String s) {\n        int[] arr = new int[27];\n        String str = \"abcdefghijklmnopqrstuvwxyz\";\n//Find the number of occurrences of each letter in the text S and \n//place it in an array\n        for(int i=0;i<s.length();i++){\n            int num = str.indexOf((s.charAt(i)));\n            arr[++num]=arr[num]+1;\n        }\n\n        int len = s.length();\n        int count=0;\n        StringBuilder ans = new StringBuilder();\n        \n        while(count<len){\n            for(int i=1;i<27;i++){\n                if(arr[i]>0){\n                    ans.append(str.charAt(i - 1));\n                    arr[i]=arr[i]-1;\n                    count++;\n                }\n            }\n            for(int j=26;j>=1;j--){\n                if(arr[j]>0){\n                    ans.append(str.charAt(j - 1));\n                    arr[j]=arr[j]-1;\n                    count++;\n                }\n            }\n        }\n        return new String(ans);\n    }\n}",
        "content": "# Intuition\\n[Java] Finding solutions in an easy, understandable and fast way\\n\\n# Approach\\nThe goal is to find a solution to the example using only while and for operators\\n\\n# Complexity\\n- Time complexity:\\nRuntime: 5 ms       Beats :47.73%\\nMemory:  42.1 MB    Beats :91.92%\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String sortString(String s) {\\n        int[] arr = new int[27];\\n        String str = \"abcdefghijklmnopqrstuvwxyz\";\\n//Find the number of occurrences of each letter in the text S and \\n//place it in an array\\n        for(int i=0;i<s.length();i++){\\n            int num = str.indexOf((s.charAt(i)));\\n            arr[++num]=arr[num]+1;\\n        }\\n\\n        int len = s.length();\\n        int count=0;\\n        StringBuilder ans = new StringBuilder();\\n        \\n        while(count<len){\\n            for(int i=1;i<27;i++){\\n                if(arr[i]>0){\\n                    ans.append(str.charAt(i - 1));\\n                    arr[i]=arr[i]-1;\\n                    count++;\\n                }\\n            }\\n            for(int j=26;j>=1;j--){\\n                if(arr[j]>0){\\n                    ans.append(str.charAt(j - 1));\\n                    arr[j]=arr[j]-1;\\n                    count++;\\n                }\\n            }\\n        }\\n        return new String(ans);\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "count-the-number-of-good-subarrays",
        "description": "Given an integer array nums and an integer k, return the number of good subarrays of nums.\nA subarray arr is good if it there are at least k pairs of indices (i, j) such that i < j and arr[i] == arr[j].\nA subarray is a contiguous non-empty sequence of elements within an array.",
        "examples": [
            "Input: nums = [1,1,1,1,1], k = 10\nOutput: 1\nExplanation: The only good subarray is the array nums itself.",
            "Input: nums = [3,1,4,3,2,2,4], k = 2\nOutput: 4\nExplanation: There are 4 different good subarrays:\n- [3,1,4,3,2,2] that has 2 pairs.\n- [3,1,4,3,2,2,4] that has 3 pairs.\n- [1,4,3,2,2,4] that has 2 pairs.\n- [4,3,2,2,4] that has 2 pairs."
        ],
        "constrains": "1 <= nums.length <= 105\n1 <= nums[i], k <= 109",
        "release_time": 1673771500,
        "oracle_code": "class Solution {\n        public long countGood(int[] nums, int k) {\n        long ans = 0;\n        HashMap<Integer, Integer> map = new HashMap<>();\n        int j = 0;\n        long countPairs = 0;\n\n        for (int i = 0; i < nums.length; i++) {\n            if (map.containsKey(nums[i])) {\n\n                int val = map.get(nums[i]);\n                //to replace the  the previous pair with new pairs\n                countPairs -= ((long) val * (val - 1) / 2);\n                map.put(nums[i], map.get(nums[i]) + 1);\n                 val = map.get(nums[i]);\n                countPairs += ((long) val * (val - 1) / 2);\n\n            } else{\n                map.put(nums[i], 1);\n            }\n            \n            // System.out.println(countPairs);\n             //sliding the window to right \n            while (j <= i && countPairs >= k) {\n                int cur = map.get(nums[j]);\n                countPairs -= (long) cur * (cur - 1) / 2;\n                map.put(nums[j], cur - 1);\n                cur = map.get(nums[j]);\n                countPairs += (long) (cur ) * (cur -1) / 2;\n                j++;\n                ans += (nums.length - i);\n            }\n\n        }\n        return ans;\n\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach \\n<!-- Describe your approach to solving the problem. -->\\nSliding Window \\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n        public long countGood(int[] nums, int k) {\\n        long ans = 0;\\n        HashMap<Integer, Integer> map = new HashMap<>();\\n        int j = 0;\\n        long countPairs = 0;\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            if (map.containsKey(nums[i])) {\\n\\n                int val = map.get(nums[i]);\\n                //to replace the  the previous pair with new pairs\\n                countPairs -= ((long) val * (val - 1) / 2);\\n                map.put(nums[i], map.get(nums[i]) + 1);\\n                 val = map.get(nums[i]);\\n                countPairs += ((long) val * (val - 1) / 2);\\n\\n            } else{\\n                map.put(nums[i], 1);\\n            }\\n            \\n            // System.out.println(countPairs);\\n             //sliding the window to right \\n            while (j <= i && countPairs >= k) {\\n                int cur = map.get(nums[j]);\\n                countPairs -= (long) cur * (cur - 1) / 2;\\n                map.put(nums[j], cur - 1);\\n                cur = map.get(nums[j]);\\n                countPairs += (long) (cur ) * (cur -1) / 2;\\n                j++;\\n                ans += (nums.length - i);\\n            }\\n\\n        }\\n        return ans;\\n\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "knight-probability-in-chessboard",
        "description": "On an n x n chessboard, a knight starts at the cell (row, column) and attempts to make exactly k moves. The rows and columns are 0-indexed, so the top-left cell is (0, 0), and the bottom-right cell is (n - 1, n - 1).\nA chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.\n\nEach time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.\nThe knight continues moving until it has made exactly k moves or has moved off the chessboard.\nReturn the probability that the knight remains on the board after it has stopped moving.",
        "examples": [
            "Input: n = 3, k = 2, row = 0, column = 0\nOutput: 0.06250\nExplanation: There are two moves (to (1,2), (2,1)) that will keep the knight on the board.\nFrom each of those positions, there are also two moves that will keep the knight on the board.\nThe total probability the knight stays on the board is 0.0625.",
            "Input: n = 1, k = 0, row = 0, column = 0\nOutput: 1.00000"
        ],
        "constrains": "1 <= n <= 25\n0 <= k <= 100\n0 <= row, column <= n - 1",
        "release_time": 1690027908,
        "oracle_code": "class Solution {\n    public double knightProbability(int n, int k, int row, int column) {\n        int[][] dir = {{-2, -1}, {-1, -2}, {1, -2}, {2, -1}, {2, 1}, {1, 2}, {-1, 2}, {-2, 1}};\n        // We use dynamic programming to store the probabilities at each cell for each move...\n        // The dp array is a 3-dimensional array...\n        // dp[i][r][c] represents the probability of the knight being at cell (r, c) after i moves...\n        double[][][] dp = new double[k + 1][n][n];\n        // At first, initialize dp[0][row][column] to 1.0, as the knight starts at the specified cell.\n        dp[0][row][column] = 1.0;\n        // For each move from 1 to k, the algorithm iterates over each cell on the chessboard.\n        for (int i = 1; i <= k; i++) {\n            // For each cell, it considers all 8 possible moves of the knight &\n            // Calculates the probability of reaching that cell from the neighboring cells.\n            for (int r = 0; r < n; r++) {\n                for (int c = 0; c < n; c++) {\n                    for (int[] d : dir) {\n                        // Introduce the terms newRow & newCol...\n                        int newRow = r + d[0];\n                        int newCol = c + d[1];\n                        // If the new cell is within the bounds of the chessboard....\n                        if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n) {\n                            // update by adding the probability of the previous move divided by 8.0...\n                            dp[i][r][c] += dp[i - 1][newRow][newCol] / 8.0;\n                        }\n                    }\n                }\n            }\n        }\n        // Initialize the output probability...\n        double output = 0.0;\n        // Sum up the output probabilities of all cells at the kth move to get the final output probability.\n        for (int r = 0; r < n; r++) {\n            for (int c = 0; c < n; c++) {\n                output += dp[k][r][c];\n            }\n        }\n        // return the output that the knight remains on the board after k moves.\n        return output;\n    }\n}",
        "content": "# **Java Solution:**\\n```\\nclass Solution {\\n    public double knightProbability(int n, int k, int row, int column) {\\n        int[][] dir = {{-2, -1}, {-1, -2}, {1, -2}, {2, -1}, {2, 1}, {1, 2}, {-1, 2}, {-2, 1}};\\n        // We use dynamic programming to store the probabilities at each cell for each move...\\n        // The dp array is a 3-dimensional array...\\n        // dp[i][r][c] represents the probability of the knight being at cell (r, c) after i moves...\\n        double[][][] dp = new double[k + 1][n][n];\\n        // At first, initialize dp[0][row][column] to 1.0, as the knight starts at the specified cell.\\n        dp[0][row][column] = 1.0;\\n        // For each move from 1 to k, the algorithm iterates over each cell on the chessboard.\\n        for (int i = 1; i <= k; i++) {\\n            // For each cell, it considers all 8 possible moves of the knight &\\n            // Calculates the probability of reaching that cell from the neighboring cells.\\n            for (int r = 0; r < n; r++) {\\n                for (int c = 0; c < n; c++) {\\n                    for (int[] d : dir) {\\n                        // Introduce the terms newRow & newCol...\\n                        int newRow = r + d[0];\\n                        int newCol = c + d[1];\\n                        // If the new cell is within the bounds of the chessboard....\\n                        if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n) {\\n                            // update by adding the probability of the previous move divided by 8.0...\\n                            dp[i][r][c] += dp[i - 1][newRow][newCol] / 8.0;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        // Initialize the output probability...\\n        double output = 0.0;\\n        // Sum up the output probabilities of all cells at the kth move to get the final output probability.\\n        for (int r = 0; r < n; r++) {\\n            for (int c = 0; c < n; c++) {\\n                output += dp[k][r][c];\\n            }\\n        }\\n        // return the output that the knight remains on the board after k moves.\\n        return output;\\n    }\\n}\\n```\\n\\n# **C++ Solution:**\\n```\\nclass Solution {\\npublic:\\n    double knightProbability(int n, int k, int row, int column) {\\n        // We use dynamic programming to store the probabilities at each cell for each move...\\n        // The dp array is a 3-dimensional array...\\n        // dp represents the probability of the knight being at cell (r, c) after m moves...\\n        vector<vector<double>> dp(n, vector<double>(n, 0));\\n        vector<int> dr = {-2, -2, -1, -1, 1, 1, 2, 2};\\n        vector<int> dc = {-1, 1, -2, 2, -2, 2, -1, 1};\\n        // At first, initialize dp[0][row][column] to 1, as the knight starts at the specified cell.\\n        dp[row][column] = 1;\\n        // For each move from 1 to k, the algorithm iterates over each cell on the chessboard.\\n        for (int m = 0; m < k; m++) {\\n            vector<vector<double>> tmp(n, vector<double>(n, 0));\\n            // For each cell, it considers all 8 possible moves of the knight &\\n            // Calculates the probability of reaching that cell from the neighboring cells.\\n            for (int r = 0; r < n; r++) {\\n                for (int c = 0; c < n; c++) {\\n                    for (int i = 0; i < 8; i++) {\\n                        // Introduce the terms newRow & newCol...\\n                        int newRow = r + dr[i];\\n                        int newCol = c + dc[i];\\n                        // If the new cell is within the bounds of the chessboard....\\n                        if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n) {\\n                            // update by adding the probability of the previous move divided by 8.0...\\n                            tmp[newRow][newCol] += dp[r][c] / 8.0;\\n                        }\\n                    }\\n                }\\n            }\\n            dp = tmp;\\n        }\\n        // Initialize the output probability...\\n        double output = 0;\\n        // Sum up the output probabilities of all cells at the kth move to get the final output probability.\\n        for (int r = 0; r < n; r++) {\\n            for (int c = 0; c < n; c++) {\\n                output += dp[r][c];\\n            }\\n        }\\n        // return the output that the knight remains on the board after k moves.\\n        return output;\\n    }\\n};\\n```\\n**I am working hard for you guys...\\nPlease upvote if you found any help with this code...**",
        "level": "medium"
    },
    {
        "slug": "search-insert-position",
        "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\nYou must\u00a0write an algorithm with\u00a0O(log n) runtime complexity.",
        "examples": [
            "Input: nums = [1,3,5,6], target = 5\nOutput: 2",
            "Input: nums = [1,3,5,6], target = 2\nOutput: 1",
            "Input: nums = [1,3,5,6], target = 7\nOutput: 4"
        ],
        "constrains": "1 <= nums.length <= 104\n-104 <= nums[i] <= 104\nnums contains distinct values sorted in ascending order.\n-104 <= target <= 104",
        "release_time": 1691938245,
        "oracle_code": "class Solution {\n    public int searchInsert(int[] nums, int target) {\n        ArrayList<Integer>atr=new ArrayList<>();\n        for(int a:nums){\n            atr.add(a);\n        }\n        atr.add(target);\n        Collections.sort(atr);\n        int k=atr.indexOf(target);\n        return k;\n        \n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n![image.png](https://assets.leetcode.com/users/images/a7c0897c-8dc0-4fa5-aeca-e836b2887d45_1691938187.8801217.png)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int searchInsert(int[] nums, int target) {\\n        ArrayList<Integer>atr=new ArrayList<>();\\n        for(int a:nums){\\n            atr.add(a);\\n        }\\n        atr.add(target);\\n        Collections.sort(atr);\\n        int k=atr.indexOf(target);\\n        return k;\\n        \\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "transpose-matrix",
        "description": "Given a 2D integer array matrix, return the transpose of matrix.\nThe transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.",
        "examples": [
            "Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[1,4,7],[2,5,8],[3,6,9]]",
            "Input: matrix = [[1,2,3],[4,5,6]]\nOutput: [[1,4],[2,5],[3,6]]"
        ],
        "constrains": "m == matrix.length\nn == matrix[i].length\n1 <= m, n <= 1000\n1 <= m * n <= 105\n-109 <= matrix[i][j] <= 109",
        "release_time": 1683736465,
        "oracle_code": "class Solution {\n    public int[][] transpose(int[][] matrix) {\n        int[][] ans = new int[matrix[0].length][matrix.length];\n        int row = 0;\n        int col = 0;\n\n        for(int i = 0; i < matrix.length; i++) {\n            for(int j = 0; j < matrix[0].length; j++) {\n                ans[row][col] = matrix[i][j];\n\n                row++;\n\n                if(row % ans.length == 0) {\n                    row = 0;\n                    col++;\n                }\n            }\n        }\n        return ans;\n    }\n}",
        "content": "# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] transpose(int[][] matrix) {\\n        int[][] ans = new int[matrix[0].length][matrix.length];\\n        int row = 0;\\n        int col = 0;\\n\\n        for(int i = 0; i < matrix.length; i++) {\\n            for(int j = 0; j < matrix[0].length; j++) {\\n                ans[row][col] = matrix[i][j];\\n\\n                row++;\\n\\n                if(row % ans.length == 0) {\\n                    row = 0;\\n                    col++;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "minimum-operations-to-make-the-array-increasing",
        "description": "You are given an integer array nums (0-indexed). In one operation, you can choose an element of the array and increment it by 1.\n\nFor example, if nums = [1,2,3], you can choose to increment nums[1] to make nums = [1,3,3].\n\nReturn the minimum number of operations needed to make nums strictly increasing.\nAn array nums is strictly increasing if nums[i] < nums[i+1] for all 0 <= i < nums.length - 1. An array of length 1 is trivially strictly increasing.",
        "examples": [
            "Input: nums = [1,1,1]\r\nOutput: 3\r\nExplanation: You can do the following operations:\r\n1) Increment nums[2], so nums becomes [1,1,2].\r\n2) Increment nums[1], so nums becomes [1,2,2].\r\n3) Increment nums[2], so nums becomes [1,2,3].",
            "Input: nums = [1,5,2,4,1]\r\nOutput: 14",
            "Input: nums = [8]\r\nOutput: 0"
        ],
        "constrains": "1 <= nums.length <= 5000\n1 <= nums[i] <= 104",
        "release_time": 1683602954,
        "oracle_code": "class Solution {\n    public int minOperations(int[] nums) {\n        int count = 0;\n        for(int i = 1; i < nums.length; i++) {\n            if(nums[i] > nums[i - 1]) {\n                continue;\n            }\n            count += nums[i - 1] - nums[i] + 1;\n            nums[i] = nums[i - 1] + 1;\n        }\n        return count;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minOperations(int[] nums) {\\n        int count = 0;\\n        for(int i = 1; i < nums.length; i++) {\\n            if(nums[i] > nums[i - 1]) {\\n                continue;\\n            }\\n            count += nums[i - 1] - nums[i] + 1;\\n            nums[i] = nums[i - 1] + 1;\\n        }\\n        return count;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "earliest-possible-day-of-full-bloom",
        "description": "You have n flower seeds. Every seed must be planted first before it can begin to grow, then bloom. Planting a seed takes time and so does the growth of a seed. You are given two 0-indexed integer arrays plantTime and growTime, of length n each:\n\nplantTime[i] is the number of full days it takes you to plant the ith seed. Every day, you can work on planting exactly one seed. You do not have to work on planting the same seed on consecutive days, but the planting of a seed is not complete until you have worked plantTime[i] days on planting it in total.\ngrowTime[i] is the number of full days it takes the ith seed to grow after being completely planted. After the last day of its growth, the flower blooms and stays bloomed forever.\n\nFrom the beginning of day 0, you can plant the seeds in any order.\nReturn the earliest possible day where all seeds are blooming.",
        "examples": [
            "Input: plantTime = [1,4,3], growTime = [2,3,1]\nOutput: 9\nExplanation: The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 0, plant the 0th seed. The seed grows for 2 full days and blooms on day 3.\nOn days 1, 2, 3, and 4, plant the 1st seed. The seed grows for 3 full days and blooms on day 8.\nOn days 5, 6, and 7, plant the 2nd seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming.",
            "Input: plantTime = [1,2,3,2], growTime = [2,1,2,1]\nOutput: 9\nExplanation: The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 1, plant the 0th seed. The seed grows for 2 full days and blooms on day 4.\nOn days 0 and 3, plant the 1st seed. The seed grows for 1 full day and blooms on day 5.\nOn days 2, 4, and 5, plant the 2nd seed. The seed grows for 2 full days and blooms on day 8.\nOn days 6 and 7, plant the 3rd seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming.",
            "Input: plantTime = [1], growTime = [1]\nOutput: 2\nExplanation: On day 0, plant the 0th seed. The seed grows for 1 full day and blooms on day 2.\nThus, on day 2, all the seeds are blooming."
        ],
        "constrains": "n == plantTime.length == growTime.length\n1 <= n <= 105\n1 <= plantTime[i], growTime[i] <= 104",
        "release_time": 1677868965,
        "oracle_code": "class Solution {\n    public int earliestFullBloom(int[] plantTime, int[] growTime) {\n       int max = 0;\n       for (int i : growTime){\n           if(max < i){\n               max = i;\n           }\n       }\n\n       int len = max;\n       int[] arr = new int[len + 1];\n       int tmp = 0;\n       int minTime = 0;\n       \n       for (int i = 0; i < plantTime.length; i++) {\n           arr[growTime[i]] += plantTime[i];\n       }\n\n       for (int i = len; i > 0; i--) {\n            if (arr[i] != 0) {\n                tmp = tmp + arr[i];\n                minTime = Math.max(minTime, tmp + i);\n            }\n       }\n\n       return minTime;\n    }\n}",
        "content": "![image.png](https://assets.leetcode.com/users/images/98855a88-cdb5-4c6f-ba41-3ba577588b51_1678010575.6496518.png)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int earliestFullBloom(int[] plantTime, int[] growTime) {\\n       int max = 0;\\n       for (int i : growTime){\\n           if(max < i){\\n               max = i;\\n           }\\n       }\\n\\n       int len = max;\\n       int[] arr = new int[len + 1];\\n       int tmp = 0;\\n       int minTime = 0;\\n       \\n       for (int i = 0; i < plantTime.length; i++) {\\n           arr[growTime[i]] += plantTime[i];\\n       }\\n\\n       for (int i = len; i > 0; i--) {\\n            if (arr[i] != 0) {\\n                tmp = tmp + arr[i];\\n                minTime = Math.max(minTime, tmp + i);\\n            }\\n       }\\n\\n       return minTime;\\n    }\\n}\\n\\n\\n```",
        "level": "hard"
    },
    {
        "slug": "count-number-of-rectangles-containing-each-point",
        "description": "You are given a 2D integer array rectangles where rectangles[i] = [li, hi] indicates that ith rectangle has a length of li and a height of hi. You are also given a 2D integer array points where points[j] = [xj, yj] is a point with coordinates (xj, yj).\nThe ith rectangle has its bottom-left corner point at the coordinates (0, 0) and its top-right corner point at (li, hi).\nReturn an integer array count of length points.length where count[j] is the number of rectangles that contain the jth point.\nThe ith rectangle contains the jth point if 0 <= xj <= li and 0 <= yj <= hi. Note that points that lie on the edges of a rectangle are also considered to be contained by that rectangle.",
        "examples": [
            "Input: rectangles = [[1,2],[2,3],[2,5]], points = [[2,1],[1,4]]\nOutput: [2,1]\nExplanation: \nThe first rectangle contains no points.\nThe second rectangle contains only the point (2, 1).\nThe third rectangle contains the points (2, 1) and (1, 4).\nThe number of rectangles that contain the point (2, 1) is 2.\nThe number of rectangles that contain the point (1, 4) is 1.\nTherefore, we return [2, 1].",
            "Input: rectangles = [[1,1],[2,2],[3,3]], points = [[1,3],[1,1]]\nOutput: [1,3]\nExplanation:\nThe first rectangle contains only the point (1, 1).\nThe second rectangle contains only the point (1, 1).\nThe third rectangle contains the points (1, 3) and (1, 1).\nThe number of rectangles that contain the point (1, 3) is 1.\nThe number of rectangles that contain the point (1, 1) is 3.\nTherefore, we return [1, 3]."
        ],
        "constrains": "1 <= rectangles.length, points.length <= 5 * 104\nrectangles[i].length == points[j].length == 2\n1 <= li, xj <= 109\n1 <= hi, yj <= 100\nAll the rectangles are unique.\nAll the points are unique.",
        "release_time": 1650772874,
        "oracle_code": "class Solution {\n  public int[] countRectangles(int[][] rectangles, int[][] points) {\n    // group by y, as 1 <= y <= 100\n    int limit = 101;\n    List<List<Integer>> group = new ArrayList<>(limit);\n    for (int i = 0; i < limit; i++) {\n      group.add(new ArrayList<>());\n    }\n\n    for (int[] rectangle : rectangles) {\n      group.get(rectangle[1]).add(rectangle[0]);\n    }\n\n    // sort each group\n    for (int i = 0; i < limit; i++) {\n      group.get(i).sort(Comparator.naturalOrder());\n    }\n\n    int m = points.length;\n    int[] result = new int[m];\n\n    for (int i = 0; i < m; i++) {\n      int count = 0;\n      for (int j = points[i][1]; j < limit; j++) {\n        List<Integer> part = group.get(j);\n        int index = Collections.binarySearch(part, points[i][0]);\n        if (index < 0) {\n          index = -index - 1;\n        }\n\n        count += part.size() - index;\n      }\n      result[i] = count;\n    }\n    return result;\n  }\n}",
        "content": "Pay attention to condition: `1 <= y <= 100`, so we should group by `y` and then binary search `x`.\\n\\nWe can save lots of time, if we group by `y` instead of `x`.\\n\\nTime: O(NlogN)\\nSpace: O(N)\\n\\n```\\nclass Solution {\\n  public int[] countRectangles(int[][] rectangles, int[][] points) {\\n    // group by y, as 1 <= y <= 100\\n    int limit = 101;\\n    List<List<Integer>> group = new ArrayList<>(limit);\\n    for (int i = 0; i < limit; i++) {\\n      group.add(new ArrayList<>());\\n    }\\n\\n    for (int[] rectangle : rectangles) {\\n      group.get(rectangle[1]).add(rectangle[0]);\\n    }\\n\\n    // sort each group\\n    for (int i = 0; i < limit; i++) {\\n      group.get(i).sort(Comparator.naturalOrder());\\n    }\\n\\n    int m = points.length;\\n    int[] result = new int[m];\\n\\n    for (int i = 0; i < m; i++) {\\n      int count = 0;\\n      for (int j = points[i][1]; j < limit; j++) {\\n        List<Integer> part = group.get(j);\\n        int index = Collections.binarySearch(part, points[i][0]);\\n        if (index < 0) {\\n          index = -index - 1;\\n        }\\n\\n        count += part.size() - index;\\n      }\\n      result[i] = count;\\n    }\\n    return result;\\n  }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "maximum-number-of-balloons",
        "description": "Given a string text, you want to use the characters of text to form as many instances of the word \"balloon\" as possible.\nYou can use each character in text at most once. Return the maximum number of instances that can be formed.",
        "examples": [
            "Input: text = \"nlaebolko\"\nOutput: 1",
            "Input: text = \"loonbalxballpoon\"\nOutput: 2",
            "Input: text = \"leetcode\"\nOutput: 0"
        ],
        "constrains": "1 <= text.length <= 104\ntext consists of lower case English letters only.",
        "release_time": 1688984016,
        "oracle_code": "class Solution {\n    public int maxNumberOfBalloons(String text) {\n        final int[][] cache = new int[2][5];\n        cache[0][0] = 97;  // a\n        cache[0][1] = 98;  // b\n        cache[0][2] = 108; // l\n        cache[0][3] = 110; // n\n        cache[0][4] = 111; // o\n        \n        // cacl letter frequencies\n        for (char ch : text.toCharArray()) {\n            final int intValue = ch;\n            for (int i = 0; i < 5; i++) {\n                if (intValue == cache[0][i]) {\n                    cache[1][i]++;\n                    break;\n                }\n            }\n        }\n\n        // l & o meet twice\n        cache[1][2] /= 2;\n        cache[1][4] /= 2;\n\n        // find the bottleneck\n        int min = Integer.MAX_VALUE;\n        for (int frequency: cache[1]) {\n            min = Math.min(min, frequency);\n        }\n\n        return min;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ --> \\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxNumberOfBalloons(String text) {\\n        final int[][] cache = new int[2][5];\\n        cache[0][0] = 97;  // a\\n        cache[0][1] = 98;  // b\\n        cache[0][2] = 108; // l\\n        cache[0][3] = 110; // n\\n        cache[0][4] = 111; // o\\n        \\n        // cacl letter frequencies\\n        for (char ch : text.toCharArray()) {\\n            final int intValue = ch;\\n            for (int i = 0; i < 5; i++) {\\n                if (intValue == cache[0][i]) {\\n                    cache[1][i]++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        // l & o meet twice\\n        cache[1][2] /= 2;\\n        cache[1][4] /= 2;\\n\\n        // find the bottleneck\\n        int min = Integer.MAX_VALUE;\\n        for (int frequency: cache[1]) {\\n            min = Math.min(min, frequency);\\n        }\\n\\n        return min;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "largest-substring-between-two-equal-characters",
        "description": "Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.\nA substring is a contiguous sequence of characters within a string.",
        "examples": [
            "Input: s = \"aa\"\nOutput: 0\nExplanation: The optimal substring here is an empty substring between the two 'a's.",
            "Input: s = \"abca\"\nOutput: 2\nExplanation: The optimal substring here is \"bc\".",
            "Input: s = \"cbzxy\"\nOutput: -1\nExplanation: There are no characters that appear twice in s."
        ],
        "constrains": "1 <= s.length <= 300\ns contains only lowercase English letters.",
        "release_time": 1675183693,
        "oracle_code": "class Solution {\n    public int maxLengthBetweenEqualCharacters(String s) {\n        int res=-1;\n        HashMap<Character,Integer> hm=new HashMap<>();\n        for(int i=0;i<s.length();i++){\n            char c=s.charAt(i);\n            if(hm.containsKey(c))\n                res=Math.max(res,i-hm.get(c)-1);\n            else\n                hm.put(c,i);\n        }\n\n        return res;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- Store each char along with their position in a HashMap.\\n- If a char occurs again, calc their index diffrences.\\n- return the max difference.\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(min(n, k))\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int res=-1;\\n        HashMap<Character,Integer> hm=new HashMap<>();\\n        for(int i=0;i<s.length();i++){\\n            char c=s.charAt(i);\\n            if(hm.containsKey(c))\\n                res=Math.max(res,i-hm.get(c)-1);\\n            else\\n                hm.put(c,i);\\n        }\\n\\n        return res;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "maximum-number-of-achievable-transfer-requests",
        "description": "We have n buildings numbered from 0 to n - 1. Each building has a number of employees. It's transfer season, and some employees want to change the building they reside in.\nYou are given an array requests where requests[i] = [fromi, toi] represents an employee's request to transfer from building fromi to building toi.\nAll buildings are full, so a list of requests is achievable only if for each building, the net change in employee transfers is zero. This means the number of employees leaving is equal to the number of employees moving in. For example if n = 3 and two employees are leaving building 0, one is leaving building 1, and one is leaving building 2, there should be two employees moving to building 0, one employee moving to building 1, and one employee moving to building 2.\nReturn the maximum number of achievable requests.",
        "examples": [
            "Input: n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]\nOutput: 5\nExplantion: Let's see the requests:\nFrom building 0 we have employees x and y and both want to move to building 1.\nFrom building 1 we have employees a and b and they want to move to buildings 2 and 0 respectively.\nFrom building 2 we have employee z and they want to move to building 0.\nFrom building 3 we have employee c and they want to move to building 4.\nFrom building 4 we don't have any requests.\nWe can achieve the requests of users x and b by swapping their places.\nWe can achieve the requests of users y, a and z by swapping the places in the 3 buildings.",
            "Input: n = 3, requests = [[0,0],[1,2],[2,1]]\nOutput: 3\nExplantion: Let's see the requests:\nFrom building 0 we have employee x and they want to stay in the same building 0.\nFrom building 1 we have employee y and they want to move to building 2.\nFrom building 2 we have employee z and they want to move to building 1.\nWe can achieve all the requests.",
            "Input: n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]\nOutput: 4"
        ],
        "constrains": "1 <= n <= 20\n1 <= requests.length <= 16\nrequests[i].length == 2\n0 <= fromi, toi < n",
        "release_time": 1688260744,
        "oracle_code": "class Solution:\n    def maximumRequests(self, n: int, requests: List[List[int]]) -> int:\n        l=len(requests)\n        for i in range(l,0,-1):\n            for j in combinations(requests,i):\n                if Counter(x for x ,y in j)==Counter(y for x,y in j):\n                    return i\n\n        return 0",
        "content": "\\n```\\nclass Solution:\\n    def maximumRequests(self, n: int, requests: List[List[int]]) -> int:\\n        l=len(requests)\\n        for i in range(l,0,-1):\\n            for j in combinations(requests,i):\\n                if Counter(x for x ,y in j)==Counter(y for x,y in j):\\n                    return i\\n\\n        return 0            \\n```",
        "level": "hard"
    },
    {
        "slug": "n-th-tribonacci-number",
        "description": "The Tribonacci sequence Tn is defined as follows:\u00a0\nT0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.\nGiven n, return the value of Tn.",
        "examples": [
            "Input: n = 4\r\nOutput: 4\r\nExplanation:\r\nT_3 = 0 + 1 + 1 = 2\r\nT_4 = 1 + 1 + 2 = 4",
            "Input: n = 25\r\nOutput: 1389537"
        ],
        "constrains": "0 <= n <= 37\nThe answer is guaranteed to fit within a 32-bit integer, ie. answer <= 2^31 - 1.",
        "release_time": 1675068570,
        "oracle_code": "class Solution {\n    public int tribonacci(int n) {\n        if(n==0)return 0;\n        if(n==1||n==2) return 1;\n        int dp[]=new int[n+1];\n        dp[0]=0;\n        dp[1]=1;\n        dp[2]=1;\n        for(int i=3;i<=n;i++){\n            dp[i]=dp[i-1]+dp[i-2]+dp[i-3];\n        }\n        return dp[n];\n    }\n}",
        "content": "# Complexity\\n- Time complexity: O(N)\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int tribonacci(int n) {\\n        if(n==0)return 0;\\n        if(n==1||n==2) return 1;\\n        int dp[]=new int[n+1];\\n        dp[0]=0;\\n        dp[1]=1;\\n        dp[2]=1;\\n        for(int i=3;i<=n;i++){\\n            dp[i]=dp[i-1]+dp[i-2]+dp[i-3];\\n        }\\n        return dp[n];\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "maximum-sum-with-exactly-k-elements",
        "description": "You are given a 0-indexed integer array nums and an integer k. Your task is to perform the following operation exactly k times in order to maximize your score:\n\nSelect an element m from nums.\nRemove the selected element m from the array.\nAdd a new element with a value of m + 1 to the array.\nIncrease your score by m.\n\nReturn the maximum score you can achieve after performing the operation exactly k times.",
        "examples": [
            "Input: nums = [1,2,3,4,5], k = 3\nOutput: 18\nExplanation: We need to choose exactly 3 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [1,2,3,4,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 and nums = [1,2,3,4,7]\nFor the third iteration, we choose 7. Then sum is 5 + 6 + 7 = 18 and nums = [1,2,3,4,8]\nSo, we will return 18.\nIt can be proven, that 18 is the maximum answer that we can achieve.",
            "Input: nums = [5,5,5], k = 2\nOutput: 11\nExplanation: We need to choose exactly 2 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [5,5,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 = 11 and nums = [5,5,7]\nSo, we will return 11.\nIt can be proven, that 11 is the maximum answer that we can achieve."
        ],
        "constrains": "1 <= nums.length <= 100\n1 <= nums[i] <= 100\n1 <= k <= 100",
        "release_time": 1682846234,
        "oracle_code": "class Solution {\n    public int maximizeSum(int[] nums, int k) {\n                int max = nums[0];\n        for (int m: nums)\n            max = Math.max(m, max);\n        int sum = max++;\n        for (int i = 0; i < k - 1; i++)\n            sum += max++;\n        return sum;\n    }\n}",
        "content": "\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n                int max = nums[0];\\n        for (int m: nums)\\n            max = Math.max(m, max);\\n        int sum = max++;\\n        for (int i = 0; i < k - 1; i++)\\n            sum += max++;\\n        return sum;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "swap-adjacent-in-lr-string",
        "description": "In a string composed of 'L', 'R', and 'X' characters, like \"RXXLRXRXL\", a move consists of either replacing one occurrence of \"XL\" with \"LX\", or replacing one occurrence of \"RX\" with \"XR\". Given the starting string start and the ending string end, return True if and only if there exists a sequence of moves to transform one string to the other.",
        "examples": [
            "Input: start = \"RXXLRXRXL\", end = \"XRLXXRRLX\"\nOutput: true\nExplanation: We can transform start to end following these steps:\nRXXLRXRXL ->\nXRXLRXRXL ->\nXRLXRXRXL ->\nXRLXXRRXL ->\nXRLXXRRLX",
            "Input: start = \"X\", end = \"L\"\nOutput: false"
        ],
        "constrains": "1 <= start.length\u00a0<= 104\nstart.length == end.length\nBoth start and end will only consist of characters in 'L', 'R', and\u00a0'X'.",
        "release_time": 1665638009,
        "oracle_code": "class Solution {\n    public boolean canTransform(String start, String end) {\n        Queue<Node> logs = new LinkedList<>();\n\n        int count = 0;\n        for (char c : start.toCharArray()) {\n            if (c == 'X') count++;\n            else {\n                logs.add(new Node(c, count));\n            }\n        }\n\n        count = 0;\n        for (char c : end.toCharArray()) {\n            if (c == 'X') count++;\n            else {\n                if (logs.isEmpty()) return false;\n\n                Node node = logs.poll();\n                if (c != node.c) return false;\n\n                if (c == 'L' && count > node.count) return false;\n                if (c == 'R' && count < node.count) return false;                \n            }\n        }\n\n        return logs.isEmpty();\n    }\n\n    class Node {\n        public Character c;\n        public int count;\n\n        public Node(Character c, int count) {\n            this.c = c;\n            this.count = count;\n        }\n    }\n}",
        "content": "The idea is must guarantee:\\n- Number of L, R are the same and keep ordering. \\n- Number of X on the left of L from `end` always less than or equal the corresponding L from `start`\\n- Number of X on the right of R from `end` always more than or equal the corresponding R from `start`\\n\\nWe can terminate the process early once got the first violation, no need to loop through the end of `start`.\\n\\n# Complexity\\n- Time complexity: `O(n)`\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: `O(n)`\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean canTransform(String start, String end) {\\n        Queue<Node> logs = new LinkedList<>();\\n\\n        int count = 0;\\n        for (char c : start.toCharArray()) {\\n            if (c == \\'X\\') count++;\\n            else {\\n                logs.add(new Node(c, count));\\n            }\\n        }\\n\\n        count = 0;\\n        for (char c : end.toCharArray()) {\\n            if (c == \\'X\\') count++;\\n            else {\\n                if (logs.isEmpty()) return false;\\n\\n                Node node = logs.poll();\\n                if (c != node.c) return false;\\n\\n                if (c == \\'L\\' && count > node.count) return false;\\n                if (c == \\'R\\' && count < node.count) return false;                \\n            }\\n        }\\n\\n        return logs.isEmpty();\\n    }\\n\\n    class Node {\\n        public Character c;\\n        public int count;\\n\\n        public Node(Character c, int count) {\\n            this.c = c;\\n            this.count = count;\\n        }\\n    }\\n}\\n```",
        "level": "medium"
    },
    {
        "slug": "maximum-sum-with-exactly-k-elements",
        "description": "You are given a 0-indexed integer array nums and an integer k. Your task is to perform the following operation exactly k times in order to maximize your score:\n\nSelect an element m from nums.\nRemove the selected element m from the array.\nAdd a new element with a value of m + 1 to the array.\nIncrease your score by m.\n\nReturn the maximum score you can achieve after performing the operation exactly k times.",
        "examples": [
            "Input: nums = [1,2,3,4,5], k = 3\nOutput: 18\nExplanation: We need to choose exactly 3 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [1,2,3,4,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 and nums = [1,2,3,4,7]\nFor the third iteration, we choose 7. Then sum is 5 + 6 + 7 = 18 and nums = [1,2,3,4,8]\nSo, we will return 18.\nIt can be proven, that 18 is the maximum answer that we can achieve.",
            "Input: nums = [5,5,5], k = 2\nOutput: 11\nExplanation: We need to choose exactly 2 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [5,5,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 = 11 and nums = [5,5,7]\nSo, we will return 11.\nIt can be proven, that 11 is the maximum answer that we can achieve."
        ],
        "constrains": "1 <= nums.length <= 100\n1 <= nums[i] <= 100\n1 <= k <= 100",
        "release_time": 1682812985,
        "oracle_code": "class Solution {\n    public int maximizeSum(int[] nums, int k) {\n        int max = 0;\n        for(int i = 0; i<nums.length; i++){ \n            max = Math.max(max, nums[i]);\n        }\n        \n        int ans = 0;\n        while(k>0){\n            ans+=max;\n            max = max+1;\n            k--;\n        }\n        return ans;\n    }   \n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n + k)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = 0;\\n        for(int i = 0; i<nums.length; i++){ \\n            max = Math.max(max, nums[i]);\\n        }\\n        \\n        int ans = 0;\\n        while(k>0){\\n            ans+=max;\\n            max = max+1;\\n            k--;\\n        }\\n        return ans;\\n    }   \\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "keyboard-row",
        "description": "Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.\nIn the American keyboard:\n\nthe first row consists of the characters \"qwertyuiop\",\nthe second row consists of the characters \"asdfghjkl\", and\nthe third row consists of the characters \"zxcvbnm\".",
        "examples": [
            "Input: words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]\nOutput: [\"Alaska\",\"Dad\"]",
            "Input: words = [\"omk\"]\nOutput: []",
            "Input: words = [\"adsdf\",\"sfd\"]\nOutput: [\"adsdf\",\"sfd\"]"
        ],
        "constrains": "1 <= words.length <= 20\n1 <= words[i].length <= 100\nwords[i] consists of English letters (both lowercase and uppercase).",
        "release_time": 1691312916,
        "oracle_code": "class Solution {\n    public String[] findWords(String[] words) {\n        List<String> res = new ArrayList<>();\n        String firstRow = \"qwertyuiop\";\n        String secondRow = \"asdfghjkl\";\n        String thirdRow = \"zxcvbnm\";\n\n        loop:\n        for(String word : words) {\n            char[] chars = word.toLowerCase().toCharArray();\n\n            boolean canBeTyped = true;\n            for(char c : chars) {\n                int idx = firstRow.indexOf(c);\n                if(idx == -1) {\n                    canBeTyped = false;\n                    break;\n                }\n            }\n            if(canBeTyped) {\n                res.add(word);\n                continue loop;\n            }\n\n            canBeTyped = true;\n            for(char c : chars) {\n                int idx = secondRow.indexOf(c);\n                if(idx == -1) {\n                    canBeTyped = false;\n                    break;\n                }\n            }\n            if(canBeTyped) {\n                res.add(word);\n                continue loop;\n            }\n\n            canBeTyped = true;\n            for(char c : chars) {\n                int idx = thirdRow.indexOf(c);\n                if(idx == -1) {\n                    canBeTyped = false;\n                    break;\n                }\n            }\n            if(canBeTyped) {\n                res.add(word);\n                continue loop;\n            }\n        }\n        \n        String[] ans = new String[res.size()];\n        int i = 0;\n        for(String word : res) {\n            ans[i++] = word;\n        }\n\n        return ans;\n    }\n}",
        "content": "# Approach\\nTo solve this problem, we need to check whether each word can be typed using letters from only one row of the American keyboard. We can achieve this by iterating through each word and checking if all its characters belong to the same row.\\n\\n**Logic:**\\n1. Create three sets to store the characters of each row in the American keyboard: `firstRow`, `secondRow`, and `thirdRow`. Initialize them with the corresponding characters.\\n2. Initialize an empty list `res` to store the words that can be typed using only one row.\\n3. Loop through each word in the input array `words`.\\n4. For each word, convert it to lowercase (to handle both uppercase and lowercase characters).\\n5. Check if all characters of the word belong to the same row:\\n   - Create a boolean variable `canBeTyped` and set it to `true`.\\n   - For each character in the word, check if it belongs to the first row (`firstRow.indexOf(c) != -1`). If not, set `canBeTyped` to `false` and break the loop.\\n   - If `canBeTyped` is still `true` after checking all characters, it means the word can be typed using the first row. Add the word to the `res` list and continue to the next word.\\n   - Repeat the above steps for the second and third rows, adding the word to the `res` list if it can be typed using any of these rows.\\n6. Convert the `res` list to the final result array `ans`.\\n7. Return the `ans` array containing words that can be typed using only one row.\\n\\n**Step-by-Step Example:**\\nLet\\'s take an example to understand the approach better:\\nInput: words = [\"Hello\", \"Alaska\", \"Dad\", \"Peace\"]\\n\\n1. Initialize three sets: `firstRow = {\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"}`, `secondRow = {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"}`, `thirdRow = {\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\"}`.\\n2. Initialize an empty list `res`.\\n3. For the first word \"Hello\":\\n   - Convert it to lowercase: \"hello\".\\n   - Check each character: \\'h\\', \\'e\\', \\'l\\', \\'l\\', \\'o\\'.\\n   - All characters are in the second row (`secondRow.indexOf(\\'h\\') != -1` is true), so `canBeTyped = true`.\\n   - Add \"Hello\" to `res` and continue to the next word.\\n4. For the second word \"Alaska\":\\n   - Convert it to lowercase: \"alaska\".\\n   - Check each character: \\'a\\', \\'l\\', \\'a\\', \\'s\\', \\'k\\', \\'a\\'.\\n   - First character \\'a\\' is in the second row, but the second character \\'l\\' is in the third row, so `canBeTyped = false`.\\n   - Move to the next row: check if all characters belong to the third row.\\n   - All characters are in the third row (`thirdRow.indexOf(\\'a\\') != -1`, `thirdRow.indexOf(\\'l\\') != -1`, etc.), so `canBeTyped = true`.\\n   - Add \"Alaska\" to `res` and continue to the next word.\\n5. For the third word \"Dad\":\\n   - Convert it to lowercase: \"dad\".\\n   - Check each character: \\'d\\', \\'a\\', \\'d\\'.\\n   - All characters are in the second row, so `canBeTyped = true`.\\n   - Add \"Dad\" to `res` and continue to the next word.\\n6. For the fourth word \"Peace\":\\n   - Convert it to lowercase: \"peace\".\\n   - Check each character: \\'p\\', \\'e\\', \\'a\\', \\'c\\', \\'e\\'.\\n   - First character \\'p\\' is in the first row, but the second character \\'e\\' is in the second row, so `canBeTyped = false`.\\n   - Move to the next row: check if all characters belong to the second row.\\n   - All characters are in the second row (`secondRow.indexOf(\\'p\\') != -1`, `secondRow.indexOf(\\'e\\') != -1`, etc.), so `canBeTyped = true`.\\n   - Add \"Peace\" to `res` and continue to the next word.\\n\\n7. Convert the `res` list to the final result array `ans`: `ans = [\"Alaska\", \"Dad\"]`.\\n8. Return the `ans` array as the final output.\\n\\n# Complexity    \\n- Time complexity: $$O(n * m)$$\\n\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public String[] findWords(String[] words) {\\n        List<String> res = new ArrayList<>();\\n        String firstRow = \"qwertyuiop\";\\n        String secondRow = \"asdfghjkl\";\\n        String thirdRow = \"zxcvbnm\";\\n\\n        loop:\\n        for(String word : words) {\\n            char[] chars = word.toLowerCase().toCharArray();\\n\\n            boolean canBeTyped = true;\\n            for(char c : chars) {\\n                int idx = firstRow.indexOf(c);\\n                if(idx == -1) {\\n                    canBeTyped = false;\\n                    break;\\n                }\\n            }\\n            if(canBeTyped) {\\n                res.add(word);\\n                continue loop;\\n            }\\n\\n            canBeTyped = true;\\n            for(char c : chars) {\\n                int idx = secondRow.indexOf(c);\\n                if(idx == -1) {\\n                    canBeTyped = false;\\n                    break;\\n                }\\n            }\\n            if(canBeTyped) {\\n                res.add(word);\\n                continue loop;\\n            }\\n\\n            canBeTyped = true;\\n            for(char c : chars) {\\n                int idx = thirdRow.indexOf(c);\\n                if(idx == -1) {\\n                    canBeTyped = false;\\n                    break;\\n                }\\n            }\\n            if(canBeTyped) {\\n                res.add(word);\\n                continue loop;\\n            }\\n        }\\n        \\n        String[] ans = new String[res.size()];\\n        int i = 0;\\n        for(String word : res) {\\n            ans[i++] = word;\\n        }\\n\\n        return ans;\\n    }\\n}\\n```\\n\\n***Optimized Version:***\\n```\\nclass Solution {\\n    public String[] findWords(String[] words) {\\n        List<String> res = new ArrayList<>();\\n\\n        loop:\\n        for (String word : words) {\\n            char[] chars = word.toLowerCase().toCharArray();\\n            if (canBeTypedUsingRow(chars, \"qwertyuiop\") || canBeTypedUsingRow(chars, \"asdfghjkl\") || canBeTypedUsingRow(chars, \"zxcvbnm\")) {\\n                res.add(word);\\n            }\\n        }\\n\\n        String[] ans = new String[res.size()];\\n        int i = 0;\\n        for (String word : res) {\\n            ans[i++] = word;\\n        }\\n\\n        return ans;\\n    }\\n\\n    private boolean canBeTypedUsingRow(char[] chars, String row) {\\n        for (char c : chars) {\\n            if (row.indexOf(c) == -1) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
        "level": "easy"
    },
    {
        "slug": "groups-of-strings",
        "description": "You are given a 0-indexed array of strings words. Each string consists of lowercase English letters only. No letter occurs more than once in any string of words.\nTwo strings s1 and s2 are said to be connected if the set of letters of s2 can be obtained from the set of letters of s1 by any one of the following operations:\n\nAdding exactly one letter to the set of the letters of s1.\nDeleting exactly one letter from the set of the letters of s1.\nReplacing exactly one letter from the set of the letters of s1 with any letter, including itself.\n\nThe array words can be divided into one or more non-intersecting groups. A string belongs to a group if any one of the following is true:\n\nIt is connected to at least one other string of the group.\nIt is the only string present in the group.\n\nNote that the strings in words should be grouped in such a manner that a string belonging to a group cannot be connected to a string present in any other group. It can be proved that such an arrangement is always unique.\nReturn an array ans of size 2 where:\n\nans[0] is the maximum number of groups words can be divided into, and\nans[1] is the size of the largest group.",
        "examples": [
            "Input: words = [\"a\",\"b\",\"ab\",\"cde\"]\nOutput: [2,3]\nExplanation:\n- words[0] can be used to obtain words[1] (by replacing 'a' with 'b'), and words[2] (by adding 'b'). So words[0] is connected to words[1] and words[2].\n- words[1] can be used to obtain words[0] (by replacing 'b' with 'a'), and words[2] (by adding 'a'). So words[1] is connected to words[0] and words[2].\n- words[2] can be used to obtain words[0] (by deleting 'b'), and words[1] (by deleting 'a'). So words[2] is connected to words[0] and words[1].\n- words[3] is not connected to any string in words.\nThus, words can be divided into 2 groups [\"a\",\"b\",\"ab\"] and [\"cde\"]. The size of the largest group is 3.",
            "Input: words = [\"a\",\"ab\",\"abc\"]\nOutput: [1,3]\nExplanation:\n- words[0] is connected to words[1].\n- words[1] is connected to words[0] and words[2].\n- words[2] is connected to words[1].\nSince all strings are connected to each other, they should be grouped together.\nThus, the size of the largest group is 3."
        ],
        "constrains": "1 <= words.length <= 2 * 104\n1 <= words[i].length <= 26\nwords[i] consists of lowercase English letters only.\nNo letter occurs more than once in words[i].",
        "release_time": 1643524944,
        "oracle_code": "class Solution {\n    public int[] groupStrings(String[] words) {\n        int n = words.length;\n        Map<Integer, Integer> maskToIndex = new HashMap<>();\n        int[] masks = new int[n];\n        for (int i = 0; i < n; i++) {\n            for (char ch : words[i].toCharArray()) {\n                masks[i] |= (1 << ch - 'a');\n            }\n            maskToIndex.put(masks[i], i);\n        }\n        \n        DisjointSet disjointSet = new DisjointSet(n);\n        for (int i = 0; i < n; i++) {\n            // This is necessary to union the duplicate words\n            disjointSet.union(i, maskToIndex.get(masks[i]));\n            for (char ch : words[i].toCharArray()) {\n                // Removing ch from the word\n                int maskWithoutCh = masks[i] ^ (1 << ch - 'a');\n                if (maskToIndex.containsKey(maskWithoutCh)) {\n                    disjointSet.union(i, maskToIndex.get(maskWithoutCh));\n                }\n                \n                // Replace ch with any other charactor\n                for (int j = 0; j < 26; j++) {\n\t\t\t\t\t// Skip if the word already contains the char at j\n                    if (j == ch - 'a' || (maskWithoutCh | (1 << j)) == maskWithoutCh) {\n                        continue;\n                    }\n                    int maskWithReplace = maskWithoutCh | (1 << j);\n                    if (maskToIndex.containsKey(maskWithReplace)) {\n                        disjointSet.union(i, maskToIndex.get(maskWithReplace));\n                    }\n                }\n            }\n        }\n        return disjointSet.getState();\n    }\n\n    private final class DisjointSet {\n        private int[] parent;\n        private int[] size;\n        private int groupCount;\n        private int maxSize;\n        \n        DisjointSet(int n) {\n            groupCount = n;\n            maxSize = 1;\n            parent = new int[n];\n            size = new int[n];\n            for (int i = 0; i < n; i++) {\n                parent[i] = i;\n                size[i] = 1;\n            }\n        }\n        \n        public int find(int a) {\n            if (parent[a] != a) {\n                parent[a] = find(parent[a]);\n            }\n            return parent[a];\n        }\n        \n        public void union(int a, int b) {\n            if (a == b) {\n                return;\n            }\n            int pa = find(a);\n            int pb = find(b);\n            if (pa != pb) {\n\t\t\t\t// Improving the runtime for find operations by joining the small group to large one\n                if (size[pb] < size[pa]) {\n                    parent[pa] = pb;\n                    size[pb] += size[pa];\n                    maxSize = Math.max(maxSize, size[pb]);\n                } else {\n                    parent[pb] = pa;\n                    size[pa] += size[pb];\n                    maxSize = Math.max(maxSize, size[pa]);\n                }\n                groupCount--;\n            }\n        }\n        \n        public int[] getState() {\n            return new int[]{groupCount, maxSize};\n        }\n    }\n}",
        "content": "My O(26 * 26 * n) solution using union-find + bitmask. using a couple of ideas to optimize the runtime. Beat 100% with ~600ms runtime.\\n\\n```\\nclass Solution {\\n    public int[] groupStrings(String[] words) {\\n        int n = words.length;\\n        Map<Integer, Integer> maskToIndex = new HashMap<>();\\n        int[] masks = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            for (char ch : words[i].toCharArray()) {\\n                masks[i] |= (1 << ch - \\'a\\');\\n            }\\n            maskToIndex.put(masks[i], i);\\n        }\\n        \\n        DisjointSet disjointSet = new DisjointSet(n);\\n        for (int i = 0; i < n; i++) {\\n            // This is necessary to union the duplicate words\\n            disjointSet.union(i, maskToIndex.get(masks[i]));\\n            for (char ch : words[i].toCharArray()) {\\n                // Removing ch from the word\\n                int maskWithoutCh = masks[i] ^ (1 << ch - \\'a\\');\\n                if (maskToIndex.containsKey(maskWithoutCh)) {\\n                    disjointSet.union(i, maskToIndex.get(maskWithoutCh));\\n                }\\n                \\n                // Replace ch with any other charactor\\n                for (int j = 0; j < 26; j++) {\\n\\t\\t\\t\\t\\t// Skip if the word already contains the char at j\\n                    if (j == ch - \\'a\\' || (maskWithoutCh | (1 << j)) == maskWithoutCh) {\\n                        continue;\\n                    }\\n                    int maskWithReplace = maskWithoutCh | (1 << j);\\n                    if (maskToIndex.containsKey(maskWithReplace)) {\\n                        disjointSet.union(i, maskToIndex.get(maskWithReplace));\\n                    }\\n                }\\n            }\\n        }\\n        return disjointSet.getState();\\n    }\\n\\n    private final class DisjointSet {\\n        private int[] parent;\\n        private int[] size;\\n        private int groupCount;\\n        private int maxSize;\\n        \\n        DisjointSet(int n) {\\n            groupCount = n;\\n            maxSize = 1;\\n            parent = new int[n];\\n            size = new int[n];\\n            for (int i = 0; i < n; i++) {\\n                parent[i] = i;\\n                size[i] = 1;\\n            }\\n        }\\n        \\n        public int find(int a) {\\n            if (parent[a] != a) {\\n                parent[a] = find(parent[a]);\\n            }\\n            return parent[a];\\n        }\\n        \\n        public void union(int a, int b) {\\n            if (a == b) {\\n                return;\\n            }\\n            int pa = find(a);\\n            int pb = find(b);\\n            if (pa != pb) {\\n\\t\\t\\t\\t// Improving the runtime for find operations by joining the small group to large one\\n                if (size[pb] < size[pa]) {\\n                    parent[pa] = pb;\\n                    size[pb] += size[pa];\\n                    maxSize = Math.max(maxSize, size[pb]);\\n                } else {\\n                    parent[pb] = pa;\\n                    size[pa] += size[pb];\\n                    maxSize = Math.max(maxSize, size[pa]);\\n                }\\n                groupCount--;\\n            }\\n        }\\n        \\n        public int[] getState() {\\n            return new int[]{groupCount, maxSize};\\n        }\\n    }\\n}\\n```",
        "level": "hard"
    },
    {
        "slug": "maximum-strictly-increasing-cells-in-a-matrix",
        "description": "Given a 1-indexed\u00a0m x n integer matrix mat, you can select any cell in the matrix as your starting cell.\nFrom the starting cell, you can move to any other cell in the same row or column, but only if the value of the destination cell is strictly greater than the value of the current cell. You can repeat this process as many times as possible, moving from cell to cell until you can no longer make any moves.\nYour task is to find the maximum number of cells that you can visit in the matrix by starting from some cell.\nReturn an integer denoting the maximum number of cells that can be visited.",
        "examples": [
            "Input: mat = [[3,1],[3,4]]\nOutput: 2\nExplanation: The image shows how we can visit 2 cells starting from row 1, column 2. It can be shown that we cannot visit more than 2 cells no matter where we start from, so the answer is 2.",
            "Input: mat = [[1,1],[1,1]]\nOutput: 1\nExplanation: Since the cells must be strictly increasing, we can only visit one cell in this example.",
            "Input: mat = [[3,1,6],[-9,5,7]]\nOutput: 4\nExplanation: The image above shows how we can visit 4 cells starting from row 2, column 1. It can be shown that we cannot visit more than 4 cells no matter where we start from, so the answer is 4."
        ],
        "constrains": "m == mat.length\u00a0\nn == mat[i].length\u00a0\n1 <= m, n <= 105\n1 <= m * n <= 105\n-105\u00a0<= mat[i][j] <= 105",
        "release_time": 1685246871,
        "oracle_code": "class Solution {\n    public int maxIncreasingCells(int[][] mat) {\n        int m = mat.length, n = mat[0].length;\n        int[] rows = new int[m], cols = new int[n];\n        int[] rowMaxVals = new int[m], colMaxVals = new int[n];\n        \n        int[] rowSubMaxVals = new int[m], colSubMaxVals = new int[n];\n        for(int i=0;i<m;i++) {\n            rows[i] = Integer.MIN_VALUE;\n        }\n        for(int i=0;i<n;i++) {\n            cols[i] = Integer.MIN_VALUE;\n        }\n        PriorityQueue<int[]> queue = new PriorityQueue<>((int[] a, int[] b) -> {\n            return a[0] - b[0];\n        });\n        for(int i=0;i<m;i++) {\n            for(int j=0;j<n;j++) {\n                queue.add(new int[]{mat[i][j], i, j});\n            }\n        }\n        int res = 0;\n        while(!queue.isEmpty()) {\n            int[] arr = queue.remove();\n            int val = arr[0], row = arr[1], col = arr[2];\n            int cur = 1;\n            if(val == rows[row]) {\n                cur = Math.max(rowSubMaxVals[row] + 1, cur);\n            } else {\n                cur = Math.max(rowMaxVals[row] + 1, cur);\n            }\n            if(val == cols[col]) {\n                cur = Math.max(colSubMaxVals[col] + 1, cur);\n            } else {\n                cur = Math.max(colMaxVals[col] + 1, cur);\n            }\n            \n\n            if(val > rows[row]) {\n                rowSubMaxVals[row] = rowMaxVals[row];\n                rows[row] = val;\n            }\n            if(val > cols[col]) {\n                colSubMaxVals[col] = colMaxVals[col];\n                cols[col] = val;\n            }\n            rowMaxVals[row] = Math.max(rowMaxVals[row], cur);\n            colMaxVals[col] = Math.max(colMaxVals[col], cur);\n            \n            res = Math.max(res, cur);\n        }\n        \n        return res;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxIncreasingCells(int[][] mat) {\\n        int m = mat.length, n = mat[0].length;\\n        int[] rows = new int[m], cols = new int[n];\\n        int[] rowMaxVals = new int[m], colMaxVals = new int[n];\\n        \\n        int[] rowSubMaxVals = new int[m], colSubMaxVals = new int[n];\\n        for(int i=0;i<m;i++) {\\n            rows[i] = Integer.MIN_VALUE;\\n        }\\n        for(int i=0;i<n;i++) {\\n            cols[i] = Integer.MIN_VALUE;\\n        }\\n        PriorityQueue<int[]> queue = new PriorityQueue<>((int[] a, int[] b) -> {\\n            return a[0] - b[0];\\n        });\\n        for(int i=0;i<m;i++) {\\n            for(int j=0;j<n;j++) {\\n                queue.add(new int[]{mat[i][j], i, j});\\n            }\\n        }\\n        int res = 0;\\n        while(!queue.isEmpty()) {\\n            int[] arr = queue.remove();\\n            int val = arr[0], row = arr[1], col = arr[2];\\n            int cur = 1;\\n            if(val == rows[row]) {\\n                cur = Math.max(rowSubMaxVals[row] + 1, cur);\\n            } else {\\n                cur = Math.max(rowMaxVals[row] + 1, cur);\\n            }\\n            if(val == cols[col]) {\\n                cur = Math.max(colSubMaxVals[col] + 1, cur);\\n            } else {\\n                cur = Math.max(colMaxVals[col] + 1, cur);\\n            }\\n            \\n\\n            if(val > rows[row]) {\\n                rowSubMaxVals[row] = rowMaxVals[row];\\n                rows[row] = val;\\n            }\\n            if(val > cols[col]) {\\n                colSubMaxVals[col] = colMaxVals[col];\\n                cols[col] = val;\\n            }\\n            rowMaxVals[row] = Math.max(rowMaxVals[row], cur);\\n            colMaxVals[col] = Math.max(colMaxVals[col], cur);\\n            \\n            res = Math.max(res, cur);\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
        "level": "hard"
    }
]