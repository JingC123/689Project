[
    {
        "slug": "reverse-odd-levels-of-binary-tree",
        "description": "Given the root of a perfect binary tree, reverse the node values at each odd level of the tree.\n\nFor example, suppose the node values at level 3 are [2,1,3,4,7,11,29,18], then it should become [18,29,11,7,4,3,1,2].\n\nReturn the root of the reversed tree.\nA binary tree is perfect if all parent nodes have two children and all leaves are on the same level.\nThe level of a node is the number of edges along the path between it and the root node.",
        "examples": [
            "Input: root = [2,3,5,8,13,21,34]\nOutput: [2,5,3,8,13,21,34]\nExplanation: \nThe tree has only one odd level.\nThe nodes at level 1 are 3, 5 respectively, which are reversed and become 5, 3.",
            "Input: root = [7,13,11]\nOutput: [7,11,13]\nExplanation: \nThe nodes at level 1 are 13, 11, which are reversed and become 11, 13.",
            "Input: root = [0,1,2,0,0,0,0,1,1,1,1,2,2,2,2]\nOutput: [0,2,1,0,0,0,0,2,2,2,2,1,1,1,1]\nExplanation: \nThe odd levels have non-zero values.\nThe nodes at level 1 were 1, 2, and are 2, 1 after the reversal.\nThe nodes at level 3 were 1, 1, 1, 1, 2, 2, 2, 2, and are 2, 2, 2, 2, 1, 1, 1, 1 after the reversal."
        ],
        "constrains": "The number of nodes in the tree is in the range [1, 214].\n0 <= Node.val <= 105\nroot is a perfect binary tree.",
        "release_time": 1665040875,
        "oracle_code": "class Solution {\npublic:\n    TreeNode* reverseOddLevels(TreeNode* root) {\n        queue<TreeNode*> q;\n        q.push(root);\n        int x = 1,n,i,z;\n        vector<TreeNode*> tmp;\n        TreeNode* node;\n        while(!q.empty()){\n            tmp.clear();\n            n = q.size();\n            // cout<<n<<\" \";\n            while(n--){\n                node = q.front();q.pop();\n                // cout<<node->val<<\" \";\n                if(x==0){\n                    tmp.push_back(node);\n                }\n                if(node->left)\n                    q.push(node->left);\n                if(node->right){\n                    q.push(node->right);\n                }\n            }\n            n = tmp.size();\n            for(i = 0; i < n/2; i++){\n                z = tmp[i]->val;\n                tmp[i]->val = tmp[n-1-i]->val;\n                tmp[n-1-i]->val = z;\n            }\n            x ^= 1;\n            n = 0;\n        }\n        return root;\n    }\n};",
        "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* reverseOddLevels(TreeNode* root) {\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        int x = 1,n,i,z;\\n        vector<TreeNode*> tmp;\\n        TreeNode* node;\\n        while(!q.empty()){\\n            tmp.clear();\\n            n = q.size();\\n            // cout<<n<<\" \";\\n            while(n--){\\n                node = q.front();q.pop();\\n                // cout<<node->val<<\" \";\\n                if(x==0){\\n                    tmp.push_back(node);\\n                }\\n                if(node->left)\\n                    q.push(node->left);\\n                if(node->right){\\n                    q.push(node->right);\\n                }\\n            }\\n            n = tmp.size();\\n            for(i = 0; i < n/2; i++){\\n                z = tmp[i]->val;\\n                tmp[i]->val = tmp[n-1-i]->val;\\n                tmp[n-1-i]->val = z;\\n            }\\n            x ^= 1;\\n            n = 0;\\n        }\\n        return root;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    TreeNode* reverseOddLevels(TreeNode* root) {\n        queue<TreeNode*> q;\n        q.push(root);\n        int x = 1,n,i,z;\n        vector<TreeNode*> tmp;\n        TreeNode* node;\n        while(!q.empty()){\n            tmp.clear();\n            n = q.size();\n            // cout<<n<<\" \";\n            while(n--){\n                node = q.front();q.pop();\n                // cout<<node->val<<\" \";\n                if(x==0){\n                    tmp.push_back(node);\n                }\n                if(node->left)\n                    q.push(node->left);\n                if(node->right){\n                    q.push(node->right);\n                }\n            }\n            n = tmp.size();\n            for(i = 0; i <= n/2; i++){\n                z = tmp[i]->val;\n                tmp[i]->val = tmp[n-1-i]->val;\n                tmp[n-1-i]->val = z;\n            }\n            x ^= 1;\n            n = 0;\n        }\n        return root;\n    }\n};\n",
        "explanations": "\nThis bug tries to access an out-of-bounds index within a vector, leading to undefined behavior.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    TreeNode* reverseOddLevels(TreeNode* root) {\n        if(!root)\n            return NULL;\n        queue<TreeNode*> q;\n        q.push(root);\n        int x = 1,n,i,z;\n        vector<TreeNode*> tmp;\n        TreeNode* node;\n        while(!q.empty()){\n            tmp.clear();\n            n = q.size();\n            // cout<<n<<\" \";\n            while(n--){\n                node = q.front();q.pop();\n                // cout<<node->val<<\" \";\n                if(x==0){\n                    tmp.push_back(node);\n                }\n                if(node->left)\n                    q.push(node->left);\n                if(node->right){\n                    q.push(node->right);\n                }\n            }\n            n = tmp.size();\n            if(n > 0) {\n                for(i = 0; i < n/2; i++){\n                    z = tmp[i]->val;\n                    tmp[i]->val = tmp[n-1-i]->val;\n                    tmp[n-1-i]->val = z;\n                }\n            }\n            x ^= 1;\n            n = 0;\n        }\n        return root;\n    }\n};\n",
        "fixing_exp": "\nAdded null pointer checks for root and before reversing the tree nodes in a level.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "167 ms",
            "memory": 75740000,
            "question_id": "2493",
            "elapsed_time": 215,
            "compare_result": "111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701963541512,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 57,
            "total_testcases": 57,
            "runtime_percentile": 52.68140000000007,
            "status_memory": "75.7 MB",
            "memory_percentile": 56.78160000000003,
            "pretty_lang": "C++",
            "submission_id": "1114450866",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": "Line 1037: Char 9: runtime error: reference binding to null pointer of type 'TreeNode *' (stl_vector.h)"
    },
    {
        "slug": "perfect-squares",
        "description": "Given an integer n, return the least number of perfect square numbers that sum to n.\nA perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.",
        "examples": [
            "Input: n = 12\nOutput: 3\nExplanation: 12 = 4 + 4 + 4.",
            "Input: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9."
        ],
        "constrains": "1 <= n <= 104",
        "release_time": 1669088721,
        "oracle_code": "class Solution {\npublic:\n\n    // declare a dp\n\n    int dp[105][10005];\n\n    int helper(vector<int>& arr, int i, int n, int sum)\n    {\n        // base case\n\n        if(sum == 0)\n        {\n            return 0;\n        }\n\n        if(i >= n || sum < 0)\n        {\n            return INT_MAX - 1000;\n        }\n\n        // if already calculated\n\n        if(dp[i][sum] != -1)\n        {\n            return dp[i][sum];\n        }\n\n        // at each ith element we have two options either include or exclude\n\n        int mini = INT_MAX;\n\n        // inclusion part\n\n        if(arr[i] <= sum)\n        {\n            mini = min(mini, 1 + helper(arr, i, n, sum - arr[i]));\n        }\n\n        // exclusion part\n\n        mini = min(mini, helper(arr, i + 1, n, sum));\n\n        // store the res in dp\n\n        return dp[i][sum] = mini;\n    }\n\n    int numSquares(int n) {\n\n        vector<int> arr;\n\n        // find all the squares between 1 to n\n\n        for(int i = 1; i * i <= n; i++)\n        {\n            arr.push_back(i * i);\n        }\n\n        // initialize dp with -1\n\n        memset(dp, -1, sizeof(dp));\n\n        return helper(arr, 0, arr.size(), n);\n    }\n};",
        "content": "* ***Using Recursion && Memoization***\\n\\n* ***Time Complexity :- O(N * sqrt(N))***\\n\\n* ***Space Complexity :- O(N * sqrt(N))***\\n\\n* ***There are sqrt(N), squares between 1 to N***\\n\\n```\\nclass Solution {\\npublic:\\n\\n    // declare a dp\\n\\n    int dp[105][10005];\\n\\n    int helper(vector<int>& arr, int i, int n, int sum)\\n    {\\n        // base case\\n\\n        if(sum == 0)\\n        {\\n            return 0;\\n        }\\n\\n        if(i >= n || sum < 0)\\n        {\\n            return INT_MAX - 1000;\\n        }\\n\\n        // if already calculated\\n\\n        if(dp[i][sum] != -1)\\n        {\\n            return dp[i][sum];\\n        }\\n\\n        // at each ith element we have two options either include or exclude\\n\\n        int mini = INT_MAX;\\n\\n        // inclusion part\\n\\n        if(arr[i] <= sum)\\n        {\\n            mini = min(mini, 1 + helper(arr, i, n, sum - arr[i]));\\n        }\\n\\n        // exclusion part\\n\\n        mini = min(mini, helper(arr, i + 1, n, sum));\\n\\n        // store the res in dp\\n\\n        return dp[i][sum] = mini;\\n    }\\n\\n    int numSquares(int n) {\\n\\n        vector<int> arr;\\n\\n        // find all the squares between 1 to n\\n\\n        for(int i = 1; i * i <= n; i++)\\n        {\\n            arr.push_back(i * i);\\n        }\\n\\n        // initialize dp with -1\\n\\n        memset(dp, -1, sizeof(dp));\\n\\n        return helper(arr, 0, arr.size(), n);\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n\n    // declare a dp\n\n    int dp[105][10005];\n\n    int helper(vector<int>& arr, int i, int n, int sum)\n    {\n        // base case\n\n        if(sum == 0)\n        {\n            return 0;\n        }\n\n        if(i > n || sum < 0)\n        {\n            return INT_MAX - 1000;\n        }\n\n        // if already calculated\n\n        if(dp[i][sum] != -1)\n        {\n            return dp[i][sum];\n        }\n\n        // at each ith element we have two options either include or exclude\n\n        int mini = INT_MAX;\n\n        // inclusion part\n\n        if(arr[i] <= sum)\n        {\n            mini = min(mini, 1 + helper(arr, i, n, sum - arr[i]));\n        }\n\n        // exclusion part\n\n        mini = min(mini, helper(arr, i + 1, n, sum));\n\n        // store the res in dp\n\n        return dp[i][sum] = mini;\n    }\n\n    int numSquares(int n) {\n\n        vector<int> arr;\n\n        // find all the squares between 1 to n\n\n        for(int i = 1; i * i <= n; i++)\n        {\n            arr.push_back(i * i);\n        }\n\n        // initialize dp with -1\n\n        memset(dp, -1, sizeof(dp));\n\n        return helper(arr, 0, arr.size(), n);\n    }\n};\n",
        "explanations": "\nThere is an indexing error when i > n in helper, which may access invalid array index.\n",
        "fixed_code": "\nclass Solution {\npublic:\n\n    // declare a dp\n    int dp[105][10005];\n\n    int helper(vector<int>& arr, int i, int n, int sum)\n    {\n        // base case\n        if(sum == 0)\n        {\n            return 0;\n        }\n\n        if(i >= n || sum < 0)\n        {\n            return INT_MAX - 1000;\n        }\n\n        // if already calculated\n        if(dp[i][sum] != -1)\n        {\n            return dp[i][sum];\n        }\n\n        // at each ith element we have two options either include or exclude\n        int mini = INT_MAX;\n\n        // inclusion part\n        if(arr[i] <= sum)\n        {\n            mini = min(mini, 1 + helper(arr, i, n, sum - arr[i]));\n        }\n\n        // exclusion part\n        mini = min(mini, helper(arr, i + 1, n, sum));\n\n        // store the res in dp\n        return dp[i][sum] = mini;\n    }\n\n    int numSquares(int n) {\n\n        vector<int> arr;\n\n        // find all the squares between 1 to n\n        for(int i = 1; i * i <= n; i++)\n        {\n            arr.push_back(i * i);\n        }\n\n        // initialize dp with -1\n        memset(dp, -1, sizeof(dp));\n\n        return helper(arr, 0, arr.size(), n);\n    }\n};\n",
        "fixing_exp": "\nThe array was going out of bounds. Changed condition \"i > n\" to \"i >= n\".\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "457 ms",
            "memory": 12128000,
            "question_id": "279",
            "elapsed_time": 517,
            "compare_result
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701963577772,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 588,
            "total_testcases": 588,
            "runtime_percentile": 10.667399999999976,
            "status_memory": "12.1 MB",
            "memory_percentile": 18.603500000000004,
            "pretty_lang": "C++",
            "submission_id": "1114451210",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": "Line 25: Char 12: runtime error: index 1094795587 out of bounds for type 'int [10005]' (solution.cpp)"
    },
    {
        "slug": "power-of-heroes",
        "description": "You are given a 0-indexed integer array nums representing the strength of some heroes. The power of a group of heroes is defined as follows:\n\nLet i0, i1, ... ,ik be the indices of the heroes in a group. Then, the power of this group is max(nums[i0], nums[i1], ... ,nums[ik])2 * min(nums[i0], nums[i1], ... ,nums[ik]).\n\nReturn the sum of the power of all non-empty groups of heroes possible. Since the sum could be very large, return it modulo 109 + 7.",
        "examples": [
            "Input: nums = [2,1,4]\nOutput: 141\nExplanation: \n1st\u00a0group: [2] has power = 22\u00a0* 2 = 8.\n2nd\u00a0group: [1] has power = 12 * 1 = 1. \n3rd\u00a0group: [4] has power = 42 * 4 = 64. \n4th\u00a0group: [2,1] has power = 22 * 1 = 4. \n5th\u00a0group: [2,4] has power = 42 * 2 = 32. \n6th\u00a0group: [1,4] has power = 42 * 1 = 16. \n\u200b\u200b\u200b\u200b\u200b\u200b\u200b7th\u00a0group: [2,1,4] has power = 42\u200b\u200b\u200b\u200b\u200b\u200b\u200b * 1 = 16. \nThe sum of powers of all groups is 8 + 1 + 64 + 4 + 32 + 16 + 16 = 141.",
            "Input: nums = [1,1,1]\nOutput: 7\nExplanation: A total of 7 groups are possible, and the power of each group will be 1. Therefore, the sum of the powers of all groups is 7."
        ],
        "constrains": "1 <= nums.length <= 105\n1 <= nums[i] <= 109",
        "release_time": 1683993728,
        "oracle_code": "class Solution {\n    const int M = 1000000007;\n    int mul(long long x, long long y) {\n        return x * y % M;\n    }\n    \n    int add(int x, int y) {\n        if ((x += y) >= M) {\n            x -= M;\n        }\n        return x; \n    }\n\npublic:\n    int sumOfPower(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        const int n = nums.size();\n        int r = mul(mul(nums[0], nums[0]), nums[0]);\n        for (int i = 1, last = 0; i < n; ++i) {\n            last = add(nums[i - 1], add(last, last));\n            r = add(r, mul(add(last, nums[i]), mul(nums[i], nums[i])));\n        }\n        \n        return r;\n    }\n};",
        "content": "# Intuition\\nJust sort\\n\\n# Approach\\nJust sort\\n\\n# Complexity\\n- Time complexity:\\nO(nlogn)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\nC++\\n```\\nclass Solution {\\n    const int M = 1000000007;\\n    int mul(long long x, long long y) {\\n        return x * y % M;\\n    }\\n    \\n    int add(int x, int y) {\\n        if ((x += y) >= M) {\\n            x -= M;\\n        }\\n        return x; \\n    }\\n\\npublic:\\n    int sumOfPower(vector<int>& nums) {\\n        sort(nums.begin(), nums.end());\\n        const int n = nums.size();\\n        int r = mul(mul(nums[0], nums[0]), nums[0]);\\n        for (int i = 1, last = 0; i < n; ++i) {\\n            last = add(nums[i - 1], add(last, last));\\n            r = add(r, mul(add(last, nums[i]), mul(nums[i], nums[i])));\\n        }\\n        \\n        return r;\\n    }\\n};\\n```\\n\\n\\nJava\\n```\\n\\nclass Solution {\\n    private final int M = 1000000007;\\n    private int mul(long x, long y) {\\n        return (int) (x * y % M);\\n    }\\n\\n    private int add(int x, int y) {\\n        if ((x += y) >= M) {\\n            x -= M;\\n        }\\n        return x; \\n    }\\n\\n    public int sumOfPower(int[] nums) {\\n        Arrays.sort(nums);\\n        final int n = nums.length;\\n        int r = mul(mul(nums[0], nums[0]), nums[0]);\\n        for (int i = 1, last = 0; i < n; ++i) {\\n            last = add(nums[i - 1], add(last, last));\\n            r = add(r, mul(add(last, nums[i]), mul(nums[i], nums[i])));\\n        }\\n\\n        return r;\\n    }\\n}\\n\\n```\\n\\nPython3\\n\\n```\\nclass Solution:\\n    def sumOfPower(self, nums: List[int]) -> int:\\n        M = 1000000007\\n        def mul(x: int, y: int) -> int:\\n            return x * y % M\\n        \\n        def add(x: int, y: int) -> int:\\n            x += y\\n            if x >= M:\\n                x -= M\\n            return x; \\n        nums.sort()\\n        n = len(nums)\\n        r = mul(mul(nums[0], nums[0]), nums[0])\\n        last = 0\\n        for i in range(1, n):\\n            last = add(nums[i - 1], add(last, last));\\n            r = add(r, mul(add(last, nums[i]), mul(nums[i], nums[i])));\\n        return r;\\n\\n        \\n```\\n",
        "level": "hard",
        "buggy_code": "\nclass Solution {\n    const int M = 1000000007;\n    int mul(long long x, long long y) {\n        return x * y % M;\n    }\n    \n    int add(int x, int y) {\n        if ((x += y) >= M) {\n            x -= M;\n        }\n        return x; \n    }\n\npublic:\n    int sumOfPower(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        const int n = nums.size() + 1;\n        int r = mul(mul(nums[0], nums[0]), nums[0]);\n        for (int i = 1, last = 0; i < n; ++i) {\n            last = add(nums[i - 1], add(last, last));\n            r = add(r, mul(add(last, nums[i]), mul(nums[i], nums[i])));\n        }\n        \n        return r;\n    }\n};\n",
        "explanations": "\nThe size of the vector(nums) was increased by 1, causing indexing beyond its bounds.\n",
        "fixed_code": "\nclass Solution {\n    const int M = 1000000007;\n    long long mul(long long x, long long y) {\n        return (x * y) % M;\n    }\n    \n    long long add(long long x, long long y) {\n        return ((x + y) >= M) ? (x + y) - M : (x + y);\n    }\n\npublic:\n    int sumOfPower(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        const int n = nums.size();\n        long long r = mul(mul(nums[0], nums[0]), nums[0]);\n        for (int i = 1, last = 0; i < n; ++i) {\n            last = add(nums[i - 1], add(last, last));\n            r = add(r, mul(add(last, nums[i]), mul(nums[i], nums[i])));\n        }\n        \n        return r;\n    }\n};\n",
        "fixing_exp": "\nChanged the operators, variable types and constraints to handle overflow and achieve correct results.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "96 ms",
            "memory": 93292000,
            "question_id": "2784",
            "elapsed_time": 143,
            "compare_result
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701963607496,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 2584,
            "total_testcases": 2584,
            "runtime_percentile": 26.25,
            "status_memory": "93.3 MB",
            "memory_percentile": 66.875,
            "pretty_lang": "C++",
            "submission_id": "1114451510",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "find-the-minimum-and-maximum-number-of-nodes-between-critical-points",
        "description": "A critical point in a linked list is defined as either a local maxima or a local minima.\nA node is a local maxima if the current node has a value strictly greater than the previous node and the next node.\nA node is a local minima if the current node has a value strictly smaller than the previous node and the next node.\nNote that a node can only be a local maxima/minima if there exists both a previous node and a next node.\nGiven a linked list head, return an array of length 2 containing [minDistance, maxDistance] where minDistance is the minimum distance between any\u00a0two distinct critical points and maxDistance is the maximum distance between any\u00a0two distinct critical points. If there are fewer than two critical points, return [-1, -1].",
        "examples": [
            "Input: head = [3,1]\nOutput: [-1,-1]\nExplanation: There are no critical points in [3,1].",
            "Input: head = [5,3,1,2,5,1,2]\nOutput: [1,3]\nExplanation: There are three critical points:\n- [5,3,1,2,5,1,2]: The third node is a local minima because 1 is less than 3 and 2.\n- [5,3,1,2,5,1,2]: The fifth node is a local maxima because 5 is greater than 2 and 1.\n- [5,3,1,2,5,1,2]: The sixth node is a local minima because 1 is less than 5 and 2.\nThe minimum distance is between the fifth and the sixth node. minDistance = 6 - 5 = 1.\nThe maximum distance is between the third and the sixth node. maxDistance = 6 - 3 = 3.",
            "Input: head = [1,3,2,2,3,2,2,2,7]\nOutput: [3,3]\nExplanation: There are two critical points:\n- [1,3,2,2,3,2,2,2,7]: The second node is a local maxima because 3 is greater than 1 and 2.\n- [1,3,2,2,3,2,2,2,7]: The fifth node is a local maxima because 3 is greater than 2 and 2.\nBoth the minimum and maximum distances are between the second and the fifth node.\nThus, minDistance and maxDistance is 5 - 2 = 3.\nNote that the last node is not considered a local maxima because it does not have a next node."
        ],
        "constrains": "The number of nodes in the list is in the range [2, 105].\n1 <= Node.val <= 105",
        "release_time": 1692541932,
        "oracle_code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> nodesBetweenCriticalPoints(ListNode* head) {\n      int count=2;\n      vector<int>v;\n      ListNode * temp=head->next;\n      ListNode * prev=head;\n      while(temp->next)\n      {\n          if(temp->val > prev->val && temp->val > temp->next->val)\n          {\n              v.push_back(count);\n          }\n          if(temp->val < prev->val && temp->val < temp->next->val)\n          {\n              v.push_back(count);\n          }\n          count++;\n          prev=temp;\n          temp=temp->next;\n      }\n      if(v.size()<2)\n      {\n          return {-1,-1};\n      }\n    sort(v.begin(), v.end()); // Sort the vector\n\n    int maxDifference = v[v.size() - 1] - v[0];\n    int minDifference = INT_MAX;\n\n    for (int i = 1; i < v.size(); ++i) {\n        int diff = v[i] - v[i - 1];\n        minDifference = min(minDifference, diff);\n    }\n    return {minDifference,maxDifference};\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<int> nodesBetweenCriticalPoints(ListNode* head) {\\n      int count=2;\\n      vector<int>v;\\n      ListNode * temp=head->next;\\n      ListNode * prev=head;\\n      while(temp->next)\\n      {\\n          if(temp->val > prev->val && temp->val > temp->next->val)\\n          {\\n              v.push_back(count);\\n          }\\n          if(temp->val < prev->val && temp->val < temp->next->val)\\n          {\\n              v.push_back(count);\\n          }\\n          count++;\\n          prev=temp;\\n          temp=temp->next;\\n      }\\n      if(v.size()<2)\\n      {\\n          return {-1,-1};\\n      }\\n    sort(v.begin(), v.end()); // Sort the vector\\n\\n    int maxDifference = v[v.size() - 1] - v[0];\\n    int minDifference = INT_MAX;\\n\\n    for (int i = 1; i < v.size(); ++i) {\\n        int diff = v[i] - v[i - 1];\\n        minDifference = min(minDifference, diff);\\n    }\\n    return {minDifference,maxDifference};\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> nodesBetweenCriticalPoints(ListNode* head) {\n      int count=2;\n      vector<int>v;\n      ListNode * temp=head->next;\n      ListNode * prev=head;\n      while(temp->next)\n      {\n          if(temp->val > prev->val && temp->val > temp->next->val)\n          {\n              v.push_back(count);\n          }\n          if(temp->val < prev->val && temp->val < temp->next->val)\n          {\n              v.push_back(count);\n          }\n          count++;\n          prev=temp;\n          temp=temp->next;\n      }\n      if(v.size()<2)\n      {\n          return {-1,-1};\n      }\n    sort(v.begin(), v.end()); // Sort the vector\n\n    int maxDifference = v[v.size()] - v[0]; \n    int minDifference = INT_MAX;\n\n    for (int i = 1; i < v.size(); ++i) {\n        int diff = v[i] - v[i - 1];\n        minDifference = min(minDifference, diff);\n    }\n    return {minDifference,maxDifference};\n    }\n};\n",
        "explanations": "\nThe indexing in maxDifference calculation is v.size(), it is out of bounds.\n",
        "fixed_code": "\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> nodesBetweenCriticalPoints(ListNode* head) {\n      int count=2;\n      vector<int>v;\n      ListNode * temp=head->next;\n      ListNode * prev=head;\n      while(temp->next)\n      {\n          if(temp->val > prev->val && temp->val > temp->next->val)\n          {\n              v.push_back(count);\n          }\n          if(temp->val < prev->val && temp->val < temp->next->val)\n          {\n              v.push_back(count);\n          }\n          count++;\n          prev=temp;\n          temp=temp->next;\n      }\n      if(v.size()<2)\n      {\n          return {-1,-1};\n      }\n    sort(v.begin(), v.end()); // Sort the vector\n\n    int maxDifference = v[v.size()-1] - v[0]; \n    int minDifference = INT_MAX;\n\n    for (int i = 1; i < v.size(); ++i) {\n        int diff = v[i] - v[i - 1];\n        minDifference = min(minDifference, diff);\n    }\n    return {minDifference,maxDifference};\n    }\n};\n",
        "fixing_exp": "\nCorrected array out of bound error by replacing v[v.size()] with v[v.size()-1].\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "168 ms",
            "memory": 117608000,
            "question_id": "2182",
            "elapsed_time": 233,
            "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701963640520,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 139,
            "total_testcases": 139,
            "runtime_percentile": 84.09820000000008,
            "status_memory": "117.6 MB",
            "memory_percentile": 19.820800000000006,
            "pretty_lang": "C++",
            "submission_id": "1114451842",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "add-binary",
        "description": "Given two binary strings a and b, return their sum as a binary string.",
        "examples": [
            "Input: a = \"11\", b = \"1\"\nOutput: \"100\"",
            "Input: a = \"1010\", b = \"1011\"\nOutput: \"10101\""
        ],
        "constrains": "1 <= a.length, b.length <= 104\na and b consist\u00a0only of '0' or '1' characters.\nEach string does not contain leading zeros except for the zero itself.",
        "release_time": 1676392785,
        "oracle_code": "class Solution {\npublic:\n    string addBinary(string a, string b) {\n        int c=0;\n        string s=\"\";\n        int i=0;\n        while(i<a.length() || i<b.length() || c!=0){\n            int x=0;\n            if(i<a.length() && a[a.length()-i-1]=='1')\n                x=1;\n            int y=0;\n            if(i<b.length() && b[b.length()-1-i]=='1')\n                y=1;\n            s=to_string((x+y+c)%2)+s;\n            c=(x+y+c)/2;\n            i++;\n        }\n        return s;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int c=0;\\n        string s=\"\";\\n        int i=0;\\n        while(i<a.length() || i<b.length() || c!=0){\\n            int x=0;\\n            if(i<a.length() && a[a.length()-i-1]==\\'1\\')\\n                x=1;\\n            int y=0;\\n            if(i<b.length() && b[b.length()-1-i]==\\'1\\')\\n                y=1;\\n            s=to_string((x+y+c)%2)+s;\\n            c=(x+y+c)/2;\\n            i++;\\n        }\\n        return s;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    string addBinary(string a, string b) {\n        int c=0;\n        string s=\"\";\n        int i=0;\n        while(i<=a.length() || i<=b.length() || c!=0){\n            int x=0;\n            if(i<a.length() && a[a.length()-i-1]=='1')\n                x=1;\n            int y=0;\n            if(i<b.length() && b[b.length()-1-i]=='1')\n                y=1;\n            s=to_string((x+y+c)%2)+s;\n            c=(x+y+c)/2;\n            i++;\n        }\n        return s;\n    }\n};\n",
        "explanations": "\nThe bug lies in the condition of the while loop where it checks i<=a.length() or i<=b.length(), which can cause indexing outside of the array bounds on the last iteration, leading to undefined behavior.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    string addBinary(string a, string b) {\n        int c=0;\n        string s=\"\";\n        int i=0;\n        while(i<a.length() || i<b.length() || c!=0){\n            int x=0;\n            if(i<a.length() && a[a.length()-i-1]=='1')\n                x=1;\n            int y=0;\n            if(i<b.length() && b[b.length()-1-i]=='1')\n                y=1;\n            s=to_string((x+y+c)%2)+s;\n            c=(x+y+c)/2;\n            i++;\n        }\n        return s;\n    }\n};\n",
        "fixing_exp": "\nChanged the while loop condition from '<=' to '<', preventing an out of bounds error.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "7 ms",
            "memory": 8644000,
            "question_id": "67",
            "elapsed_time": 16,
            "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701963673629,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 296,
            "total_testcases": 296,
            "runtime_percentile": 11.9392,
            "status_memory": "8.6 MB",
            "memory_percentile": 18.921299999999988,
            "pretty_lang": "C++",
            "submission_id": "1114452207",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "cat-and-mouse-ii",
        "description": "A game is played by a cat and a mouse named Cat and Mouse.\nThe environment is represented by a grid of size rows x cols, where each element is a wall, floor, player (Cat, Mouse), or food.\n\nPlayers are represented by the characters 'C'(Cat),'M'(Mouse).\nFloors are represented by the character '.' and can be walked on.\nWalls are represented by the character '#' and cannot be walked on.\nFood is represented by the character 'F' and can be walked on.\nThere is only one of each character 'C', 'M', and 'F' in grid.\n\nMouse and Cat play according to the following rules:\n\nMouse moves first, then they take turns to move.\nDuring each turn, Cat and Mouse can jump in one of the four directions (left, right, up, down). They cannot jump over the wall nor outside of the grid.\ncatJump, mouseJump are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.\nStaying in the same position is allowed.\nMouse can jump over Cat.\n\nThe game can end in 4 ways:\n\nIf Cat occupies the same position as Mouse, Cat wins.\nIf Cat reaches the food first, Cat wins.\nIf Mouse reaches the food first, Mouse wins.\nIf Mouse cannot get to the food within 1000 turns, Cat wins.\n\nGiven a rows x cols matrix grid and two integers catJump and mouseJump, return true if Mouse can win the game if both Cat and Mouse play optimally, otherwise return false.",
        "examples": [
            "Input: grid = [\"####F\",\"#C...\",\"M....\"], catJump = 1, mouseJump = 2\nOutput: true\nExplanation: Cat cannot catch Mouse on its turn nor can it get the food before Mouse.",
            "Input: grid = [\"M.C...F\"], catJump = 1, mouseJump = 4\nOutput: true",
            "Input: grid = [\"M.C...F\"], catJump = 1, mouseJump = 3\nOutput: false"
        ],
        "constrains": "rows == grid.length\ncols = grid[i].length\n1 <= rows, cols <= 8\ngrid[i][j] consist only of characters 'C', 'M', 'F', '.', and '#'.\nThere is only one of each character 'C', 'M', and 'F' in grid.\n1 <= catJump, mouseJump <= 8",
        "release_time": 1652504475,
        "oracle_code": "class Solution {\npublic:\n    int dp[9][9][9][9][140];\n    int dx[4] = {0,1,0,-1};\n    int dy[4] = {1,0,-1,0};\n    \n    bool solve(vector<string>& grid, int catJump, int mouseJump, int catR, int catC, int mouseR, int mouseC, int moves){        \n        int r = grid.size(), c = grid[0].size();\n        if(moves >= 128) return false;\n        if(mouseR==catR && mouseC==catC) return false;\n        if(grid[catR][catC] == 'F') return false;\n        if(grid[mouseR][mouseC] == 'F') return true;\n        \n        if(dp[catR][catC][mouseR][mouseC][moves] != -1) \n            return dp[catR][catC][mouseR][mouseC][moves];\n        \n        if(moves%2 == 0){\n            for(int i=0; i<4; ++i){\n                for(int j=0; j<=mouseJump; ++j){\n                    int x = mouseR+j*dx[i], y = mouseC+j*dy[i];\n                    if(x>=0 && x<r && y>=0 && y<c && grid[x][y]!='#'){\n                        if(solve(grid, catJump, mouseJump, catR, catC, x, y, moves+1) == true) \n                            return dp[catR][catC][mouseR][mouseC][moves] = true;\n                    }else break;\n                }\n            }\n            return dp[catR][catC][mouseR][mouseC][moves] = false;\n        }else{\n            for(int i=0; i<4; ++i){\n                for(int j=0; j<=catJump; ++j){\n                    int x = catR+dx[i]*j, y = catC+dy[i]*j;\n                    if(x>=0 && x<r && y>=0 && y<c && grid[x][y]!='#'){\n                        if(solve(grid, catJump, mouseJump, x, y, mouseR, mouseC, moves+1) == false) \n                            return dp[catR][catC][mouseR][mouseC][moves] = false; \n                    }else break;\n                }\n            }\n            return dp[catR][catC][mouseR][mouseC][moves] = true;\n        }\n    }\n    \n    bool canMouseWin(vector<string>& grid, int catJump, int mouseJump) {\n       memset(dp,-1,sizeof(dp));\n        int r = grid.size(), c =grid[0].size();\n        int catR, catC, mouseR, mouseC;\n        for(int i=0; i<r; ++i){\n            for(int j=0; j<c; ++j){\n                if(grid[i][j] == 'C'){\n                    catR = i, catC = j;\n                }\n                else if(grid[i][j] == 'M'){\n                    mouseR = i, mouseC = j;\n                }\n            }\n        }\n        \n        return solve(grid, catJump, mouseJump, catR, catC, mouseR, mouseC, 0);\n    }\n};",
        "content": "```\\nclass Solution {\\npublic:\\n    int dp[9][9][9][9][140];\\n    int dx[4] = {0,1,0,-1};\\n    int dy[4] = {1,0,-1,0};\\n    \\n    bool solve(vector<string>& grid, int catJump, int mouseJump, int catR, int catC, int mouseR, int mouseC, int moves){        \\n        int r = grid.size(), c = grid[0].size();\\n        if(moves >= 128) return false;\\n        if(mouseR==catR && mouseC==catC) return false;\\n        if(grid[catR][catC] == \\'F\\') return false;\\n        if(grid[mouseR][mouseC] == \\'F\\') return true;\\n        \\n        if(dp[catR][catC][mouseR][mouseC][moves] != -1) \\n            return dp[catR][catC][mouseR][mouseC][moves];\\n        \\n        if(moves%2 == 0){\\n            for(int i=0; i<4; ++i){\\n                for(int j=0; j<=mouseJump; ++j){\\n                    int x = mouseR+j*dx[i], y = mouseC+j*dy[i];\\n                    if(x>=0 && x<r && y>=0 && y<c && grid[x][y]!=\\'#\\'){\\n                        if(solve(grid, catJump, mouseJump, catR, catC, x, y, moves+1) == true) \\n                            return dp[catR][catC][mouseR][mouseC][moves] = true;\\n                    }else break;\\n                }\\n            }\\n            return dp[catR][catC][mouseR][mouseC][moves] = false;\\n        }else{\\n            for(int i=0; i<4; ++i){\\n                for(int j=0; j<=catJump; ++j){\\n                    int x = catR+dx[i]*j, y = catC+dy[i]*j;\\n                    if(x>=0 && x<r && y>=0 && y<c && grid[x][y]!=\\'#\\'){\\n                        if(solve(grid, catJump, mouseJump, x, y, mouseR, mouseC, moves+1) == false) \\n                            return dp[catR][catC][mouseR][mouseC][moves] = false; \\n                    }else break;\\n                }\\n            }\\n            return dp[catR][catC][mouseR][mouseC][moves] = true;\\n        }\\n    }\\n    \\n    bool canMouseWin(vector<string>& grid, int catJump, int mouseJump) {\\n       memset(dp,-1,sizeof(dp));\\n        int r = grid.size(), c =grid[0].size();\\n        int catR, catC, mouseR, mouseC;\\n        for(int i=0; i<r; ++i){\\n            for(int j=0; j<c; ++j){\\n                if(grid[i][j] == \\'C\\'){\\n                    catR = i, catC = j;\\n                }\\n                else if(grid[i][j] == \\'M\\'){\\n                    mouseR = i, mouseC = j;\\n                }\\n            }\\n        }\\n        \\n        return solve(grid, catJump, mouseJump, catR, catC, mouseR, mouseC, 0);\\n    }\\n};\\n```\\n**Please UPVOTE**",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n    int dp[9][9][9][9][140];\n    int dx[4] = {0,1,0,-1};\n    int dy[4] = {1,0,-1,0};\n    \n    bool solve(vector<string>& grid, int catJump, int mouseJump, int catR, int catC, int mouseR, int mouseC, int moves){        \n        int r = grid.size(), c = grid[0].size() + 1;\n        if(moves >= 128) return false;\n        if(mouseR==catR && mouseC==catC) return false;\n        if(grid[catR][catC] == 'F') return false;\n        if(grid[mouseR][mouseC] == 'F') return true;\n        \n        if(dp[catR][catC][mouseR][mouseC][moves] != -1) \n            return dp[catR][catC][mouseR][mouseC][moves];\n        \n        if(moves%2 == 0){\n            for(int i=0; i<4; ++i){\n                for(int j=0; j<=mouseJump; ++j){\n                    int x = mouseR+j*dx[i], y = mouseC+j*dy[i];\n                    if(x>=0 && x<r && y>=0 && y<c && grid[x][y]!='#'){\n                        if(solve(grid, catJump, mouseJump, catR, catC, x, y, moves+1) == true) \n                            return dp[catR][catC][mouseR][mouseC][moves] = true;\n                    }else break;\n                }\n            }\n            return dp[catR][catC][mouseR][mouseC][moves] = false;\n        }else{\n            for(int i=0; i<4; ++i){\n                for(int j=0; j<=catJump; ++j){\n                    int x = catR+dx[i]*j, y = catC+dy[i]*j;\n                    if(x>=0 && x<r && y>=0 && y<c && grid[x][y]!='#'){\n                        if(solve(grid, catJump, mouseJump, x, y, mouseR, mouseC, moves+1) == false) \n                            return dp[catR][catC][mouseR][mouseC][moves] = false; \n                    }else break;\n                }\n            }\n            return dp[catR][catC][mouseR][mouseC][moves] = true;\n        }\n    }\n    \n    bool canMouseWin(vector<string>& grid, int catJump, int mouseJump) {\n       memset(dp,-1,sizeof(dp));\n        int r = grid.size(), c =grid[0].size();\n        int catR, catC, mouseR, mouseC;\n        for(int i=0; i<r; ++i){\n            for(int j=0; j<c; ++j){\n                if(grid[i][j] == 'C'){\n                    catR = i, catC = j;\n                }\n                else if(grid[i][j] == 'M'){\n                    mouseR = i, mouseC = j;\n                }\n            }\n        }\n        \n        return solve(grid, catJump, mouseJump, catR, catC, mouseR, mouseC, 0);\n    }\n};\n",
        "explanations": "\nThe bug is that the column size is incremented by 1 which results in out-of-bounds.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int dp[9][9][9][9][140];\n    int dx[4] = {0,1,0,-1};\n    int dy[4] = {1,0,-1,0};\n\n    int r, c;\n\n    Solution() {\n        memset(dp,-1,sizeof(dp));\n    }\n\n    bool solve(vector<string>& grid, int catJump, int mouseJump, int catR, int catC, int mouseR, int mouseC, int moves){\n        if(moves >= 128) return false;\n        if(mouseR==catR && mouseC==catC) return false;\n        if(grid[catR][catC] == 'F') return false;\n        if(grid[mouseR][mouseC] == 'F') return true;\n\n        if(dp[catR][catC][mouseR][mouseC][moves] != -1) \n            return dp[catR][catC][mouseR][mouseC][moves];\n\n        if(moves%2 == 0){\n            for(int i=0; i<4; ++i){\n                for(int j=0; j<=mouseJump; ++j){\n                    int x = mouseR+j*dx[i], y = mouseC+j*dy[i];\n                    if(x>=0 && x<r && y>=0 && y<c && grid[x][y]!='#'){\n                        if(solve(grid, catJump, mouseJump, catR, catC, x, y, moves+1) == true) \n                            return dp[catR][catC][mouseR][mouseC][moves] = true;\n                    }else break;\n                }\n            }\n            return dp[catR][catC][mouseR][mouseC][moves] = false;\n        }else{\n            for(int i=0; i<4; ++i){\n                for(int j=0; j<=catJump; ++j){\n                    int x = catR+dx[i]*j, y = catC+dy[i]*j;\n                    if(x>=0 && x<r && y>=0 && y<c && grid[x][y]!='#'){\n                        if(solve(grid, catJump, mouseJump, x, y, mouseR, mouseC, moves+1) == false) \n                            return dp[catR][catC][mouseR][mouseC][moves] = false; \n                    }else break;\n                }\n            }\n            return dp[catR][catC][mouseR][mouseC][moves] = true;\n        }\n    }\n\n    bool canMouseWin(vector<string>& grid, int catJump, int mouseJump) {\n        r = grid.size(), c =grid[0].size();\n        int catR, catC, mouseR, mouseC;\n        for(int i=0; i<r; ++i){\n            for(int j=0; j<c; ++j){\n                if(grid[i][j] == 'C'){\n                    catR = i, catC = j;\n                }\n                else if(grid[i][j] == 'M'){\n                    mouseR = i, mouseC = j;\n                }\n            }\n        }\n        return solve(grid, catJump, mouseJump, catR, catC, mouseR, mouseC, 0);\n    }\n};\n",
        "fixing_exp": "\nRelocated the code initializing the `dp` array (i.e., `memset(dp,-1,sizeof(dp));`) to the class constructor from the `canMouseWin` method.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "354 ms",
            "memory": 14392000,
            "question_id": "1727",
            "elapsed_time": 395,
            "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701963732282,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 179,
            "total_testcases": 179,
            "runtime_percentile": 66.6673,
            "status_memory": "14.4 MB",
            "memory_percentile": 34.48289999999997,
            "pretty_lang": "C++",
            "submission_id": "1114452815",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "most-beautiful-item-for-each-query",
        "description": "You are given a 2D integer array items where items[i] = [pricei, beautyi] denotes the price and beauty of an item respectively.\nYou are also given a 0-indexed integer array queries. For each queries[j], you want to determine the maximum beauty of an item whose price is less than or equal to queries[j]. If no such item exists, then the answer to this query is 0.\nReturn an array answer of the same length as queries where answer[j] is the answer to the jth query.",
        "examples": [
            "Input: items = [[1,2],[3,2],[2,4],[5,6],[3,5]], queries = [1,2,3,4,5,6]\nOutput: [2,4,5,5,6,6]\nExplanation:\n- For queries[0]=1, [1,2] is the only item which has price <= 1. Hence, the answer for this query is 2.\n- For queries[1]=2, the items which can be considered are [1,2] and [2,4]. \n  The maximum beauty among them is 4.\n- For queries[2]=3 and queries[3]=4, the items which can be considered are [1,2], [3,2], [2,4], and [3,5].\n  The maximum beauty among them is 5.\n- For queries[4]=5 and queries[5]=6, all items can be considered.\n  Hence, the answer for them is the maximum beauty of all items, i.e., 6.",
            "Input: items = [[1,2],[1,2],[1,3],[1,4]], queries = [1]\nOutput: [4]\nExplanation: \nThe price of every item is equal to 1, so we choose the item with the maximum beauty 4. \nNote that multiple items can have the same price and/or beauty.",
            "Input: items = [[10,1000]], queries = [5]\nOutput: [0]\nExplanation:\nNo item has a price less than or equal to 5, so no item can be chosen.\nHence, the answer to the query is 0."
        ],
        "constrains": "1 <= items.length, queries.length <= 105\nitems[i].length == 2\n1 <= pricei, beautyi, queries[j] <= 109",
        "release_time": 1664512625,
        "oracle_code": "class Solution {\n    int bs(vector<vector<int>>& items, int t, vector<int> &beauty) {\n        int ans = 0, s = 0, e = items.size() - 1;\n        while(s <= e) {\n            int m = (s + e) / 2;\n            if(items[m][0] <= t) ans = beauty[m], s = m + 1;\n            else e = m - 1;\n        }\n        return ans;\n    }\n\npublic:\n    vector<int> maximumBeauty(vector<vector<int>>& items, vector<int>& queries) {\n        sort(items.begin(), items.end());\n        vector<int> ans, beauty(items.size(), items[0][1]);\n\n        for(int i=1; i<items.size(); i++) beauty[i] = max(beauty[i - 1], items[i][1]);\n\n        for(int i : queries) ans.push_back(bs(items, i, beauty));\n        return ans;\n    }\n};",
        "content": "\\n# C++\\n```\\nclass Solution {\\n    int bs(vector<vector<int>>& items, int t, vector<int> &beauty) {\\n        int ans = 0, s = 0, e = items.size() - 1;\\n        while(s <= e) {\\n            int m = (s + e) / 2;\\n            if(items[m][0] <= t) ans = beauty[m], s = m + 1;\\n            else e = m - 1;\\n        }\\n        return ans;\\n    }\\n\\npublic:\\n    vector<int> maximumBeauty(vector<vector<int>>& items, vector<int>& queries) {\\n        sort(items.begin(), items.end());\\n        vector<int> ans, beauty(items.size(), items[0][1]);\\n\\n        for(int i=1; i<items.size(); i++) beauty[i] = max(beauty[i - 1], items[i][1]);\\n\\n        for(int i : queries) ans.push_back(bs(items, i, beauty));\\n        return ans;\\n    }\\n};\\n```\\n\\n# Python\\n```\\nclass Solution(object):\\n    def maximumBeauty(self, items, queries):\\n        items.sort()\\n        ans, beauty = [], [items[0][1]] * len(items)\\n        for i in range(1, len(items)): beauty[i] = max(beauty[i - 1], items[i][1])\\n\\n        def bs(t):\\n            ans, s, e = 0, 0, len(items) - 1\\n            while s <= e:\\n                m = (s + e) // 2\\n                if items[m][0] <= t:\\n                    ans = beauty[m]\\n                    s = m + 1\\n                else: e = m - 1\\n            return ans\\n\\n        for i in queries: ans.append(bs(i))\\n        return ans\\n```\\n",
        "level": "medium",
        "buggy_code": "\nclass Solution {\n    int bs(vector<vector<int>>& items, int t, vector<int> &beauty) {\n        int ans = 0, s = 0, e = items.size();\n        while(s <= e) {\n            int m = (s + e) / 2;\n            if(items[m][0] <= t) ans = beauty[m], s = m + 1;\n            else e = m - 1;\n        }\n        return ans;\n    }\n\npublic:\n    vector<int> maximumBeauty(vector<vector<int>>& items, vector<int>& queries) {\n        sort(items.begin(), items.end());\n        vector<int> ans, beauty(items.size(), items[0][1]);\n\n        for(int i=1; i<items.size(); i++) beauty[i] = max(beauty[i - 1], items[i][1]);\n\n        for(int i : queries) ans.push_back(bs(items, i, beauty));\n        return ans;\n    }\n};\n",
        "explanations": "\nThe 'end' value in binary search is set as items.size(), causing out of bounds error.\n",
        "fixed_code": "\nclass Solution {\n    int bs(vector<vector<int>>& items, int t, vector<int> &beauty) {\n        int ans = 0, s = 0, e = items.size() - 1;\n        while(s <= e) {\n            int m = (s + e) / 2;\n            if(items[m][0] <= t) ans = beauty[m], s = m + 1;\n            else e = m - 1;\n        }\n        return ans;\n    }\n\npublic:\n    vector<int> maximumBeauty(vector<vector<int>>& items, vector<int>& queries) {\n        sort(items.begin(), items.end());\n        vector<int> ans, beauty(items.size(), items[0][1]);\n\n        for(int i=1; i<items.size(); i++) beauty[i] = max(beauty[i - 1], items[i][1]);\n\n        for(int i : queries) ans.push_back(bs(items, i, beauty));\n        return ans;\n    }\n};\n",
        "fixing_exp": "\nThe binary search end index was off by one.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "328 ms",
            "memory": 89876000,
            "question_id": "2179",
            "elapsed_time": 375,
            "compare_result": "11111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701963763676,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 35,
            "total_testcases": 35,
            "runtime_percentile": 56.13190000000009,
            "status_memory": "89.9 MB",
            "memory_percentile": 63.20740000000001,
            "pretty_lang": "C++",
            "submission_id": "1114453132",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": "Line 1037: Char 9: runtime error: reference binding to misaligned address 0xbebebebebebebebe for type 'int', which requires 4 byte alignment (stl_vector.h)"
    },
    {
        "slug": "perfect-rectangle",
        "description": "Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).\nReturn true if all the rectangles together form an exact cover of a rectangular region.",
        "examples": [
            "Input: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]\nOutput: true\nExplanation: All 5 rectangles together form an exact cover of a rectangular region.",
            "Input: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]\nOutput: false\nExplanation: Because there is a gap between the two rectangular regions.",
            "Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]\nOutput: false\nExplanation: Because two of the rectangles overlap with each other."
        ],
        "constrains": "1 <= rectangles.length <= 2 * 104\nrectangles[i].length == 4\n-105 <= xi, yi, ai, bi <= 105",
        "release_time": 1672756201,
        "oracle_code": "class Solution {\npublic:\n    bool isRectangleCover(vector<vector<int>>& rectangles) {\n        map<pair<int,int>,int>m;\n        for(auto it:rectangles){\n            m[{it[0],it[1]}]++;\n            m[{it[2],it[3]}]++;\n            m[{it[0],it[3]}]--;\n            m[{it[2],it[1]}]--;\n        }\n        int cnt=0;\n        for( auto it=m.begin();it!=m.end();it++){\n            if(abs(it->second)==1){\n                cnt++;\n            }\n            else if(abs(it->second)!=1&&it->second!=0){\n                return false;\n            }\n        }\n        return cnt==4;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nJust used map to keep the count of edges.\\nIncreasing the count of bottom left and top right vertices.\\nDecreasing the count of bottom right and top left vertices.\\nAt Last We sum all the values of map.\\nIf the value is 4 then return true as four vertices are there, else return false. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nCreate a map with key as pair of int and int(pair<int,int>);\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N);\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isRectangleCover(vector<vector<int>>& rectangles) {\\n        map<pair<int,int>,int>m;\\n        for(auto it:rectangles){\\n            m[{it[0],it[1]}]++;\\n            m[{it[2],it[3]}]++;\\n            m[{it[0],it[3]}]--;\\n            m[{it[2],it[1]}]--;\\n        }\\n        int cnt=0;\\n        for( auto it=m.begin();it!=m.end();it++){\\n            if(abs(it->second)==1){\\n                cnt++;\\n            }\\n            else if(abs(it->second)!=1&&it->second!=0){\\n                return false;\\n            }\\n        }\\n        return cnt==4;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n    bool isRectangleCover(vector<vector<int>>& rectangles) {\n        map<pair<int,int>,int>m;\n        for(auto it:rectangles){\n            m[{it[0],it[1]}]++;\n            m[{it[2],it[3]}]++;\n            m[{it[0],it[3]}]--;\n            m[{it[2],it[1]}]--;\n        }\n        int cnt=0;\n        for( auto it=m.begin();it!=m.end()+1;it++){\n            if(abs(it->second)==1){\n                cnt++;\n            }\n            else if(abs(it->second)!=1&&it->second!=0){\n                return false;\n            }\n        }\n        return cnt==4;\n    }\n}; \n",
        "explanations": "\nTrying to access the map iterator past its end, causing an indexing error.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    bool isRectangleCover(vector<vector<int>>& rectangles) {\n        map<pair<int,int>,int>m;\n        for(auto it:rectangles){\n            m[{it[0],it[1]}]++;\n            m[{it[2],it[3]}]++;\n            m[{it[0],it[3]}]--;\n            m[{it[2],it[1]}]--;\n        }\n        int cnt=0;\n        for(auto it=m.begin();it!=m.end();it++){\n            if(abs(it->second)==1){\n                cnt++;\n            }\n            else if(abs(it->second)!=1&&it->second!=0){\n                return false;\n            }\n        }\n        return cnt==4;\n    }\n};\n",
        "fixing_exp": "\nIterator to map end moved out of range by it!=m.end()+1, replaced with it!=m.end()\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "110 ms",
            "memory": 34564000,
            "question_id": "391",
            "elapsed_time": 136,
            "compare_result": "1111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701963793417,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 49,
            "total_testcases": 49,
            "runtime_percentile": 42.322100000000106,
            "status_memory": "34.6 MB",
            "memory_percentile": 34.45740000000007,
            "pretty_lang": "C++",
            "submission_id": "1114453430",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "minimum-incompatibility",
        "description": "You are given an integer array nums\u200b\u200b\u200b and an integer k. You are asked to distribute this array into k subsets of equal size such that there are no two equal elements in the same subset.\nA subset's incompatibility is the difference between the maximum and minimum elements in that array.\nReturn the minimum possible sum of incompatibilities of the k subsets after distributing the array optimally, or return -1 if it is not possible.\nA subset is a group integers that appear in the array with no particular order.",
        "examples": [
            "Input: nums = [1,2,1,4], k = 2\nOutput: 4\nExplanation: The optimal distribution of subsets is [1,2] and [1,4].\nThe incompatibility is (2-1) + (4-1) = 4.\nNote that [1,1] and [2,4] would result in a smaller sum, but the first subset contains 2 equal elements.",
            "Input: nums = [6,3,8,1,3,1,2,2], k = 4\nOutput: 6\nExplanation: The optimal distribution of subsets is [1,2], [2,3], [6,8], and [1,3].\nThe incompatibility is (2-1) + (3-2) + (8-6) + (3-1) = 6.",
            "Input: nums = [5,3,3,6,3,3], k = 3\nOutput: -1\nExplanation: It is impossible to distribute nums into 3 subsets where no two elements are equal in the same subset."
        ],
        "constrains": "1 <= k <= nums.length <= 16\nnums.length is divisible by k\n1 <= nums[i] <= nums.length",
        "release_time": 1682291828,
        "oracle_code": "class Solution {\npublic:\n    const int inf = 0x3f3f3f3f;\n    int minimumIncompatibility(vector<int>& nums, int k) {\n      int n = nums.size();\n      int sz = n/k; // size of every group\n      //dp(mask, i) select mask, pre select i\n      //if (bit set of mask) == sz, select first available\n      //else select first after i available\n      sort(nums.begin(), nums.end());\n      int dp[1<<n][n];\n      memset(dp, inf, sizeof(dp));\n      for (int i = 0; i < n; ++i) { dp[0][i] = 0; }\n      for (int m = 0; m < (1<<n)-1; ++m) {\n        int cnt = __builtin_popcount(m);\n        for (int i = 0; i < n; ++i) {\n          if (dp[m][i] == inf) { continue; }\n          if (cnt%sz == 0) {\n            int j = __builtin_ffs(~m)-1;\n            dp[m|(1<<j)][j] = min(dp[m|(1<<j)][j],dp[m][i]);\n          } else {\n            for (int j = i+1; j < n; ++j) {\n              if (m&(1<<j) || nums[j] == nums[i]) { continue; }\n              dp[m|(1<<j)][j] = min(dp[m|(1<<j)][j],dp[m][i]+nums[j]-nums[i]);\n            }\n          }\n        }\n      }\n      return dp[(1<<n)-1][n-1] == inf? -1: dp[(1<<n)-1][n-1];\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    const int inf = 0x3f3f3f3f;\\n    int minimumIncompatibility(vector<int>& nums, int k) {\\n      int n = nums.size();\\n      int sz = n/k; // size of every group\\n      //dp(mask, i) select mask, pre select i\\n      //if (bit set of mask) == sz, select first available\\n      //else select first after i available\\n      sort(nums.begin(), nums.end());\\n      int dp[1<<n][n];\\n      memset(dp, inf, sizeof(dp));\\n      for (int i = 0; i < n; ++i) { dp[0][i] = 0; }\\n      for (int m = 0; m < (1<<n)-1; ++m) {\\n        int cnt = __builtin_popcount(m);\\n        for (int i = 0; i < n; ++i) {\\n          if (dp[m][i] == inf) { continue; }\\n          if (cnt%sz == 0) {\\n            int j = __builtin_ffs(~m)-1;\\n            dp[m|(1<<j)][j] = min(dp[m|(1<<j)][j],dp[m][i]);\\n          } else {\\n            for (int j = i+1; j < n; ++j) {\\n              if (m&(1<<j) || nums[j] == nums[i]) { continue; }\\n              dp[m|(1<<j)][j] = min(dp[m|(1<<j)][j],dp[m][i]+nums[j]-nums[i]);\\n            }\\n          }\\n        }\\n      }\\n      return dp[(1<<n)-1][n-1] == inf? -1: dp[(1<<n)-1][n-1];\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n    const int inf = 0x3f3f3f3f;\n    int minimumIncompatibility(vector<int>& nums, int k) {\n      int n = nums.size();\n      int sz = n/k; // size of every group\n      sort(nums.begin(), nums.end());\n      int dp[1<<n][n+1];  \n      memset(dp, inf, sizeof(dp));\n      for (int i = 0; i <= n; ++i) { dp[0][i] = 0; }  \n      for (int m = 0; m < (1<<n)-1; ++m) {\n        int cnt = __builtin_popcount(m);\n        for (int i = 0; i <= n; ++i) {  \n          if (dp[m][i] == inf) { continue; }\n          if (cnt%sz == 0) {\n            int j = __builtin_ffs(~m)-1;\n            dp[m|(1<<j)][j] = min(dp[m|(1<<j)][j],dp[m][i]);\n          } else {\n            for (int j = i+1; j <= n; ++j) { \n              if (m&(1<<j) || nums[j] == nums[i]) { continue; }\n              dp[m|(1<<j)][j] = min(dp[m|(1<<j)][j],dp[m][i]+nums[j]-nums[i]);\n            }\n          }\n        }\n      }\n      return dp[(1<<n)-1][n] == inf? -1: dp[(1<<n)-1][n];  \n    }\n};\n",
        "explanations": "\nThe loop conditions and array indexing go beyond the boundaries, causing indexing error.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    const int inf = 0x3f3f3f3f;\n    int minimumIncompatibility(vector<int>& nums, int k) {\n      int n = nums.size();\n      int sz = n/k; // size of every group\n      sort(nums.begin(), nums.end());\n      int dp[1<<n][n];  \n      memset(dp, inf, sizeof(dp));\n      for (int i = 0; i < n; ++i) { dp[0][i] = 0; }  \n      for (int m = 0; m < (1<<n)-1; ++m) {\n        int cnt = __builtin_popcount(m);\n        for (int i = 0; i < n; ++i) {  \n          if (dp[m][i] == inf) { continue; }\n          if (cnt%sz == 0) {\n            int j = __builtin_ffs(~m)-1;\n            dp[m|(1<<j)][j] = min(dp[m|(1<<j)][j],dp[m][i]);\n          } else {\n            for (int j = i+1; j < n; ++j) { \n              if (m&(1<<j) || nums[j] == nums[i]) { continue; }\n              dp[m|(1<<j)][j] = min(dp[m|(1<<j)][j],dp[m][i]+nums[j]-nums[i]);\n            }\n          }\n        }\n      }\n      return dp[(1<<n)-1][n-1] == inf? -1: dp[(1<<n)-1][n-1];  \n    }\n};\n",
        "fixing_exp": "\nReduced the size of the dp array and adjusted the indices accordingly to avoid heap-buffer-overflow.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "39 ms",
            "memory": 12272000,
            "question_id": "1799",
            "elapsed_time": 52,
            "compare_result": "1111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701963830312,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 58,
            "total_testcases": 58,
            "runtime_percentile": 89.8735,
            "status_memory": "12.3 MB",
            "memory_percentile": 72.15220000000002,
            "pretty_lang": "C++",
            "submission_id": "1114453838",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": "AddressSanitizer: heap-buffer-overflow on address 0x6020000000a0 at pc 0x000000368387 bp 0x7fffe2449990 sp 0x7fffe2449988"
    },
    {
        "slug": "check-if-there-is-a-valid-path-in-a-grid",
        "description": "You are given an m x n grid. Each cell of grid represents a street. The street of grid[i][j] can be:\n\n1 which means a street connecting the left cell and the right cell.\n2 which means a street connecting the upper cell and the lower cell.\n3 which means a street connecting the left cell and the lower cell.\n4 which means a street connecting the right cell and the lower cell.\n5 which means a street connecting the left cell and the upper cell.\n6 which means a street connecting the right cell and the upper cell.\n\n\nYou will initially start at the street of the upper-left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1). The path should only follow the streets.\nNotice that you are not allowed to change any street.\nReturn true if there is a valid path in the grid or false otherwise.",
        "examples": [
            "Input: grid = [[2,4,3],[6,5,2]]\nOutput: true\nExplanation: As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1).",
            "Input: grid = [[1,2,1],[1,2,1]]\nOutput: false\nExplanation: As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)",
            "Input: grid = [[1,1,2]]\nOutput: false\nExplanation: You will get stuck at cell (0, 1) and you cannot reach cell (0, 2)."
        ],
        "constrains": "m == grid.length\nn == grid[i].length\n1 <= m, n <= 300\n1 <= grid[i][j] <= 6",
        "release_time": 1686021362,
        "oracle_code": "class DisjointSet{\npublic:\n    vector<int>par,size;\n    DisjointSet(int n){\n        par.resize(n+1);\n        size.resize(n+1,1);\n        for(int i=0; i<=n; i++){\n            par[i] = i;\n        }\n    }\n    int findpar(int u){\n        if(u == par[u]) return u;\n        return par[u] = findpar(par[u]);\n    }\n\n    void unionBySize(int u, int v){\n        u = findpar(u);\n        v = findpar(v);\n\n        if(u == v) return;\n\n        if(size[u] >= size[v]){\n            par[v] = u;\n            size[u] += size[v];\n        }\n        else{\n            par[u] = v;\n            size[v] += size[u];\n        }\n    }\n    \n};\nclass Solution {\npublic:\n    bool hasValidPath(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        DisjointSet ds(n*m);\n        for(int i=0; i<n; i++){\n            for(int j=0; j<m; j++){\n                int p = i * m + j;\n                int p1 = (i-1)*m + j;  // 1\n                int p2 = (i+1)*m + j;  // 1\n                int p3 = i*m + (j+1);  // 2\n                int p4 = i*m + (j-1);  // 2\n\n                if(grid[i][j] == 1){\n                    if(j+1 < m && (grid[i][j+1] == 1 || grid[i][j+1] == 3 || grid[i][j+1] == 5) ){\n                        ds.unionBySize(p,p3);\n                    }\n                    if(j-1 >= 0 && (grid[i][j-1] == 1 || grid[i][j-1] == 4 || grid[i][j-1] == 6) ){\n                        ds.unionBySize(p,p4);\n                    }\n                }\n                else if(grid[i][j] == 2){\n                    if(i+1 < n && (grid[i+1][j] == 2 || grid[i+1][j] == 5 || grid[i+1][j] == 6) ){\n                        ds.unionBySize(p,p2);\n                    }\n\n                    if(i-1>=0 && (grid[i-1][j] == 2 || grid[i-1][j] == 3 || grid[i-1][j] == 4)){\n                        ds.unionBySize(p,p1);\n                    }\n                }\n                else if(grid[i][j] == 3){\n                    if(j-1 >= 0 && (grid[i][j-1] == 1 || grid[i][j-1] == 4 || grid[i][j-1] == 6) ){\n                        ds.unionBySize(p,p4);\n                    }\n                    if(i+1 < n && (grid[i+1][j] == 2 || grid[i+1][j] == 5 || grid[i+1][j] == 6) ){\n                        ds.unionBySize(p,p2);\n                    }\n                }\n                else if(grid[i][j] == 4){\n                    if(j+1 < m && (grid[i][j+1] == 1 || grid[i][j+1] == 3 || grid[i][j+1] == 5) ){\n                        ds.unionBySize(p,p3);\n                    }\n                    if(i+1 < n && (grid[i+1][j] == 2 || grid[i+1][j] == 5 || grid[i+1][j] == 6) ){\n                        ds.unionBySize(p,p2);\n                    }\n                }\n                else if(grid[i][j] == 5){\n                    if(i-1>=0 && (grid[i-1][j] == 2 || grid[i-1][j] == 3 || grid[i-1][j] == 4)){\n                        ds.unionBySize(p,p1);\n                    }\n                    if(j-1 >= 0 && (grid[i][j-1] == 1 || grid[i][j-1] == 4 || grid[i][j-1] == 6) ){\n                        ds.unionBySize(p,p4);\n                    }\n                }\n                else if(grid[i][j] == 6){\n                    if(i-1>=0 && (grid[i-1][j] == 2 || grid[i-1][j] == 3 || grid[i-1][j] == 4)){\n                        ds.unionBySize(p,p1);\n                    }\n                    if(j+1 < m && (grid[i][j+1] == 1 || grid[i][j+1] == 3 || grid[i][j+1] == 5) ){\n                        ds.unionBySize(p,p3);\n                    }\n                }\n            }\n        }\n        return ds.findpar(0) == ds.findpar(n*m-1);\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass DisjointSet{\\npublic:\\n    vector<int>par,size;\\n    DisjointSet(int n){\\n        par.resize(n+1);\\n        size.resize(n+1,1);\\n        for(int i=0; i<=n; i++){\\n            par[i] = i;\\n        }\\n    }\\n    int findpar(int u){\\n        if(u == par[u]) return u;\\n        return par[u] = findpar(par[u]);\\n    }\\n\\n    void unionBySize(int u, int v){\\n        u = findpar(u);\\n        v = findpar(v);\\n\\n        if(u == v) return;\\n\\n        if(size[u] >= size[v]){\\n            par[v] = u;\\n            size[u] += size[v];\\n        }\\n        else{\\n            par[u] = v;\\n            size[v] += size[u];\\n        }\\n    }\\n    \\n};\\nclass Solution {\\npublic:\\n    bool hasValidPath(vector<vector<int>>& grid) {\\n        int n = grid.size();\\n        int m = grid[0].size();\\n        DisjointSet ds(n*m);\\n        for(int i=0; i<n; i++){\\n            for(int j=0; j<m; j++){\\n                int p = i * m + j;\\n                int p1 = (i-1)*m + j;  // 1\\n                int p2 = (i+1)*m + j;  // 1\\n                int p3 = i*m + (j+1);  // 2\\n                int p4 = i*m + (j-1);  // 2\\n\\n                if(grid[i][j] == 1){\\n                    if(j+1 < m && (grid[i][j+1] == 1 || grid[i][j+1] == 3 || grid[i][j+1] == 5) ){\\n                        ds.unionBySize(p,p3);\\n                    }\\n                    if(j-1 >= 0 && (grid[i][j-1] == 1 || grid[i][j-1] == 4 || grid[i][j-1] == 6) ){\\n                        ds.unionBySize(p,p4);\\n                    }\\n                }\\n                else if(grid[i][j] == 2){\\n                    if(i+1 < n && (grid[i+1][j] == 2 || grid[i+1][j] == 5 || grid[i+1][j] == 6) ){\\n                        ds.unionBySize(p,p2);\\n                    }\\n\\n                    if(i-1>=0 && (grid[i-1][j] == 2 || grid[i-1][j] == 3 || grid[i-1][j] == 4)){\\n                        ds.unionBySize(p,p1);\\n                    }\\n                }\\n                else if(grid[i][j] == 3){\\n                    if(j-1 >= 0 && (grid[i][j-1] == 1 || grid[i][j-1] == 4 || grid[i][j-1] == 6) ){\\n                        ds.unionBySize(p,p4);\\n                    }\\n                    if(i+1 < n && (grid[i+1][j] == 2 || grid[i+1][j] == 5 || grid[i+1][j] == 6) ){\\n                        ds.unionBySize(p,p2);\\n                    }\\n                }\\n                else if(grid[i][j] == 4){\\n                    if(j+1 < m && (grid[i][j+1] == 1 || grid[i][j+1] == 3 || grid[i][j+1] == 5) ){\\n                        ds.unionBySize(p,p3);\\n                    }\\n                    if(i+1 < n && (grid[i+1][j] == 2 || grid[i+1][j] == 5 || grid[i+1][j] == 6) ){\\n                        ds.unionBySize(p,p2);\\n                    }\\n                }\\n                else if(grid[i][j] == 5){\\n                    if(i-1>=0 && (grid[i-1][j] == 2 || grid[i-1][j] == 3 || grid[i-1][j] == 4)){\\n                        ds.unionBySize(p,p1);\\n                    }\\n                    if(j-1 >= 0 && (grid[i][j-1] == 1 || grid[i][j-1] == 4 || grid[i][j-1] == 6) ){\\n                        ds.unionBySize(p,p4);\\n                    }\\n                }\\n                else if(grid[i][j] == 6){\\n                    if(i-1>=0 && (grid[i-1][j] == 2 || grid[i-1][j] == 3 || grid[i-1][j] == 4)){\\n                        ds.unionBySize(p,p1);\\n                    }\\n                    if(j+1 < m && (grid[i][j+1] == 1 || grid[i][j+1] == 3 || grid[i][j+1] == 5) ){\\n                        ds.unionBySize(p,p3);\\n                    }\\n                }\\n            }\\n        }\\n        return ds.findpar(0) == ds.findpar(n*m-1);\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass DisjointSet{\npublic:\n    vector<int>par,size;\n    DisjointSet(int n){\n        par.resize(n+1);\n        size.resize(n+1,1);\n        for(int i=0; i<=n; i++){\n            par[i] = i;\n        }\n    }\n    int findpar(int u){\n        if(u == par[u]) return u;\n        return par[u] = findpar(par[u]);\n    }\n\n    void unionBySize(int u, int v){\n        u = findpar(u);\n        v = findpar(v);\n\n        if(u == v) return;\n\n        if(size[u-1] >= size[v-1]){\n            par[v-1] = u;\n            size[u-1] += size[v];\n        }\n        else{\n            par[u-1] = v;\n            size[v-1] += size[u];\n        }\n    }\n    \n};\nclass Solution {\npublic:\n    bool hasValidPath(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        DisjointSet ds(n*m);\n        for(int i=0; i<n; i++){\n            for(int j=0; j<m; j++){\n                int p = i * m + j;\n                int p1 = (i-1)*m + j;  \n                int p2 = (i+1)*m + j;  \n                int p3 = i*m + (j+1);  \n                int p4 = i*m + (j-1);  \n\n                if(grid[i][j] == 1){\n                    if(j+1 < m && (grid[i][j+1] == 1 || grid[i][j+1] == 3 || grid[i][j+1] == 5) ){\n                        ds.unionBySize(p,p3);\n                    }\n                    if(j-1 >= 0 && (grid[i][j-1] == 1 || grid[i][j-1] == 4 || grid[i][j-1] == 6) ){\n                        ds.unionBySize(p,p4);\n                    }\n                }\n                else if(grid[i][j] == 2){\n                    if(i+1 < n && (grid[i+1][j] == 2 || grid[i+1][j] == 5 || grid[i+1][j] == 6) ){\n                        ds.unionBySize(p,p2);\n                    }\n\n                    if(i-1>=0 && (grid[i-1][j] == 2 || grid[i-1][j] == 3 || grid[i-1][j] == 4)){\n                        ds.unionBySize(p,p1);\n                    }\n                }\n                else if(grid[i][j] == 3){\n                    if(j-1 >= 0 && (grid[i][j-1] == 1 || grid[i][j-1] == 4 || grid[i][j-1] == 6) ){\n                        ds.unionBySize(p,p4);\n                    }\n                    if(i+1 < n && (grid[i+1][j] == 2 || grid[i+1][j] == 5 || grid[i+1][j] == 6) ){\n                        ds.unionBySize(p,p2);\n                    }\n                }\n                else if(grid[i][j] == 4){\n                    if(j+1 < m && (grid[i][j+1] == 1 || grid[i][j+1] == 3 || grid[i][j+1] == 5) ){\n                        ds.unionBySize(p,p3);\n                    }\n                    if(i+1 < n && (grid[i+1][j] == 2 || grid[i+1][j] == 5 || grid[i+1][j] == 6) ){\n                        ds.unionBySize(p,p2);\n                    }\n                }\n                else if(grid[i][j] == 5){\n                    if(i-1>=0 && (grid[i-1][j] == 2 || grid[i-1][j] == 3 || grid[i-1][j] == 4)){\n                        ds.unionBySize(p,p1);\n                    }\n                    if(j-1 >= 0 && (grid[i][j-1] == 1 || grid[i][j-1] == 4 || grid[i][j-1] == 6) ){\n                        ds.unionBySize(p,p4);\n                    }\n                }\n                else if(grid[i][j] == 6){\n                    if(i-1>=0 && (grid[i-1][j] == 2 || grid[i-1][j] == 3 || grid[i-1][j] == 4)){\n                        ds.unionBySize(p,p1);\n                    }\n                    if(j+1 < m && (grid[i][j+1] == 1 || grid[i][j+1] == 3 || grid[i][j+1] == 5) ){\n                        ds.unionBySize(p,p3);\n                    }\n                }\n            }\n        }\n        return ds.findpar(0) == ds.findpar(n*m-1);\n    }\n};\n",
        "explanations": "\nThe indexing used in the function unionBySize is off by 1, which can result in accessing invalid memory.\n",
        "fixed_code": "\nclass DisjointSet{\npublic:\n    vector<int>par, rnk;\n    DisjointSet(int n){\n        par.resize(n+1);\n        rnk.resize(n+1,0);\n        for(int i=0; i<=n; i++){\n            par[i] = i;\n        }\n    }\n    int findpar(int u){\n        if(u != par[u]) par[u] = findpar(par[u]);\n        return par[u];\n    }\n\n    void unionByRank(int u, int v){\n        u = findpar(u);\n        v = findpar(v);\n\n        if(u != v){\n            if(rnk[u] > rnk[v]) par[v] = u;\n            else {\n                par[u] = v;\n                if(rnk[u] == rnk[v]) rnk[v]++;\n            }\n        }\n    }\n    \n};\n",
        "fixing_exp": "\nThe bug was incorrect indices in \"unionBySize\" function, replaced by union-by-rank.\n",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 20,
            "lang": "cpp",
            "run_success": false,
            "compile_error": "Line 38: Char 18: error: use of undeclared identifier 'Solution'",
            "full_compile_error": "Line 38: Char 18: error: use of undeclared identifier 'Solution'\n      bool ret = Solution().hasValidPath(param_1); return ret;\n                 ^\n1 error generated.",
            "status_runtime": "N/A",
            "memory": 0,
            "question_id": "1507",
            "task_finish_time": 1701963865362,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": null,
            "total_testcases": null,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1114454235",
            "status_msg": "Compile Error",
            "state": "SUCCESS"
        },
        "traceback_messages": "Line 1037: Char 34: runtime error: addition of unsigned offset to 0x6030000000d0 overflowed to 0x6030000000cc (stl_vector.h)"
    },
    {
        "slug": "product-of-array-except-self",
        "description": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\nYou must write an algorithm that runs in\u00a0O(n)\u00a0time and without using the division operation.",
        "examples": [
            "Input: nums = [1,2,3,4]\nOutput: [24,12,8,6]",
            "Input: nums = [-1,1,0,-3,3]\nOutput: [0,0,9,0,0]"
        ],
        "constrains": "2 <= nums.length <= 105\n-30 <= nums[i] <= 30\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.",
        "release_time": 1691071622,
        "oracle_code": "class Solution {\npublic:\n    vector<int> productExceptSelf(vector<int>& nums) {\n        vector<int>prefVector(nums.size(),1);\n        vector<int>suffVector(nums.size(),1);\n        int prefPro=1;\n        for(int i=0;i<nums.size();i++){\n            prefVector[i]=prefPro;\n            prefPro*=nums[i];\n        }\n        int suffPro=1;\n        for(int i=nums.size()-1;i>=0;i--){\n            suffVector[i]=suffPro;\n            suffPro*=nums[i];\n        }\n        vector<int>ans(nums.size());\n        for(int i=0;i<nums.size();i++){\n            ans[i]=prefVector[i]*suffVector[i];\n        }\n        return ans;\n    }\n};",
        "content": "# Intuition:\\nwe use two different vectors to store the product of all left elements to that element and another vector to store the product of all right values to that value.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> productExceptSelf(vector<int>& nums) {\\n        vector<int>prefVector(nums.size(),1);\\n        vector<int>suffVector(nums.size(),1);\\n        int prefPro=1;\\n        for(int i=0;i<nums.size();i++){\\n            prefVector[i]=prefPro;\\n            prefPro*=nums[i];\\n        }\\n        int suffPro=1;\\n        for(int i=nums.size()-1;i>=0;i--){\\n            suffVector[i]=suffPro;\\n            suffPro*=nums[i];\\n        }\\n        vector<int>ans(nums.size());\\n        for(int i=0;i<nums.size();i++){\\n            ans[i]=prefVector[i]*suffVector[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    vector<int> productExceptSelf(vector<int>& nums) {\n        vector<int>prefVector(nums.size(),1);\n        vector<int>suffVector(nums.size(),1);\n        int prefPro=1;\n        for(int i=0;i<=nums.size();i++){\n            prefVector[i]=prefPro;\n            prefPro*=nums[i];\n        }\n        int suffPro=1;\n        for(int i=nums.size();i>=0;i--){\n            suffVector[i]=suffPro;\n            suffPro*=nums[i];\n        }\n        vector<int>ans(nums.size());\n        for(int i=0;i<nums.size();i++){\n            ans[i]=prefVector[i]*suffVector[i];\n        }\n        return ans;\n    }\n};\n",
        "explanations": "\n'nums' array is accessed beyond its size in the prefix and suffix product calculation.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    vector<int> productExceptSelf(vector<int>& nums) {\n        vector<int>prefVector(nums.size(),1);\n        vector<int>suffVector(nums.size(),1);\n        int prefPro=1;\n        for(int i=0;i<nums.size();i++){\n            prefVector[i]=prefPro;\n            prefPro*=nums[i];\n        }\n        int suffPro=1;\n        for(int i=nums.size()-1;i>=0;i--){\n            suffVector[i]=suffPro;\n            suffPro*=nums[i];\n        }\n        vector<int>ans(nums.size());\n        for(int i=0;i<nums.size();i++){\n            ans[i]=prefVector[i]*suffVector[i];\n        }\n        return ans;\n    }\n};\n",
        "fixing_exp": "\nModified code is not trying to access out of bounds which was causing heap-buffer-overflow error.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "11 ms",
            "memory": 25528000,
            "question_id": "238",
            "elapsed_time": 36,
            "compare_result": "1111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701963907449,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 22,
            "total_testcases": 22,
            "runtime_percentile": 97.22579999999998,
            "status_memory": "25.5 MB",
            "memory_percentile": 16.172099999999983,
            "pretty_lang": "C++",
            "submission_id": "1114454681",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": "AddressSanitizer: heap-buffer-overflow on address 0x6020000000c0 at pc 0x000000367ba9 bp 0x7ffc1960e530 sp 0x7ffc1960e528"
    },
    {
        "slug": "longest-cycle-in-a-graph",
        "description": "You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.\nThe graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. If there is no outgoing edge from node i, then edges[i] == -1.\nReturn the length of the longest cycle in the graph. If no cycle exists, return -1.\nA cycle is a path that starts and ends at the same node.",
        "examples": [
            "Input: edges = [3,3,4,2,3]\nOutput: 3\nExplanation: The longest cycle in the graph is the cycle: 2 -> 4 -> 3 -> 2.\nThe length of this cycle is 3, so 3 is returned.",
            "Input: edges = [2,-1,3,1]\nOutput: -1\nExplanation: There are no cycles in this graph."
        ],
        "constrains": "n == edges.length\n2 <= n <= 105\n-1 <= edges[i] < n\nedges[i] != i",
        "release_time": 1679835912,
        "oracle_code": "class Solution {\npublic:\n    int mx=-1;\n    void dfs(vector<int> &ed , vector<int> &pvis , vector<int> &vis , int i , int j)\n    {\n        if(pvis[i])\n        {\n            mx = max(mx , j - pvis[i]);\n            return;\n        }\n        if(!vis[i])\n        {\n            pvis[i] =j; j++; vis[i]=1;\n            if(ed[i]!=-1) dfs(ed , pvis , vis , ed[i],j);\n        }\n        pvis[i] = 0;\n        return;\n    }\n    int longestCycle(vector<int>& ed)\n     {\n        vector<int> vis(ed.size(),0) , pvis(ed.size(),0);\n        mx = -1;\n        for(int i=0;i<ed.size();i++)\n        {\n            if(!vis[i]) dfs(ed,pvis,vis,i,1);\n        }\n        return mx;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mx=-1;\\n    void dfs(vector<int> &ed , vector<int> &pvis , vector<int> &vis , int i , int j)\\n    {\\n        if(pvis[i])\\n        {\\n            mx = max(mx , j - pvis[i]);\\n            return;\\n        }\\n        if(!vis[i])\\n        {\\n            pvis[i] =j; j++; vis[i]=1;\\n            if(ed[i]!=-1) dfs(ed , pvis , vis , ed[i],j);\\n        }\\n        pvis[i] = 0;\\n        return;\\n    }\\n    int longestCycle(vector<int>& ed)\\n     {\\n        vector<int> vis(ed.size(),0) , pvis(ed.size(),0);\\n        mx = -1;\\n        for(int i=0;i<ed.size();i++)\\n        {\\n            if(!vis[i]) dfs(ed,pvis,vis,i,1);\\n        }\\n        return mx;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n    int mx=-1;\n    void dfs(vector<int> &ed , vector<int> &pvis , vector<int> &vis , int i , int j)\n    {\n        if(pvis[i])\n        {\n            mx = max(mx , j - pvis[i+1]);\n            return;\n        }\n        if(!vis[i])\n        {\n            pvis[i] =j; j++; vis[i]=1;\n            if(ed[i]!=-1) dfs(ed , pvis , vis , ed[i],j);\n        }\n        pvis[i] = 0;\n        return;\n    }\n    int longestCycle(vector<int>& ed)\n     {\n        vector<int> vis(ed.size(),0) , pvis(ed.size(),0);\n        mx = -1;\n        for(int i=0;i<ed.size();i++)\n        {\n            if(!vis[i]) dfs(ed,pvis,vis,i,1);\n        }\n        return mx;\n    }\n};\n",
        "explanations": "\nReferencing pvis[i+1] could lead to accessing out of array bounds and undefined behaviour.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int mx=-1;\n    void dfs(vector<int> &ed , vector<int> &pvis , vector<int> &vis , int i , int j)\n    {\n        if(pvis[i])\n        {\n            mx = max(mx , j - pvis[i]);\n            return;\n        }\n        if(!vis[i])\n        {\n            pvis[i] = j; \n            j++; \n            vis[i] = 1;\n            if(ed[i] != -1) \n                dfs(ed , pvis , vis , ed[i], j);\n        }\n        pvis[i] = 0;\n        return;\n    }\n    int longestCycle(vector<int>& ed)\n    {\n        vector<int> vis(ed.size(),0) , pvis(ed.size(),0);\n        mx = -1;\n        for(int i=0;i<ed.size();i++)\n        {\n            if(!vis[i]) dfs(ed,pvis,vis,i,1);\n        }\n        return mx;\n    }\n};\n",
        "fixing_exp": "\nFixed array out of bound error in line \"mx = max(mx , j - pvis[i+1])\" by removing \"+1\" from \"pvis[i+1]\" inside array.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "157 ms",
            "memory": 101992000,
            "question_id": "2439",
            "elapsed_time": 196,
            "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701963944663,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 81,
            "total_testcases": 81,
            "runtime_percentile": 62.159299999999995,
            "status_memory": "102 MB",
            "memory_percentile": 74.31879999999991,
            "pretty_lang": "C++",
            "submission_id": "1114455070",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "path-with-maximum-probability",
        "description": "You are given an undirected weighted graph of\u00a0n\u00a0nodes (0-indexed), represented by an edge list where\u00a0edges[i] = [a, b]\u00a0is an undirected edge connecting the nodes\u00a0a\u00a0and\u00a0b\u00a0with a probability of success of traversing that edge\u00a0succProb[i].\nGiven two nodes\u00a0start\u00a0and\u00a0end, find the path with the maximum probability of success to go from\u00a0start\u00a0to\u00a0end\u00a0and return its success probability.\nIf there is no path from\u00a0start\u00a0to\u00a0end, return\u00a00. Your answer will be accepted if it differs from the correct answer by at most 1e-5.",
        "examples": [
            "Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2\nOutput: 0.25000\nExplanation:\u00a0There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25.",
            "Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2\nOutput: 0.30000",
            "Input: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2\nOutput: 0.00000\nExplanation:\u00a0There is no path between 0 and 2."
        ],
        "constrains": "2 <= n <= 10^4\n0 <= start, end < n\nstart != end\n0 <= a, b < n\na != b\n0 <= succProb.length == edges.length <= 2*10^4\n0 <= succProb[i] <= 1\nThere is at most one edge between every two nodes.",
        "release_time": 1687928964,
        "oracle_code": "class Solution {\npublic:\n    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {\n        unordered_map<int, vector<pair<int, int>>> graph;\n        \n        // Build the graph using an adjacency list representation\n        // Each edge is represented as a pair (neighbor node, edge index)\n        for (int i = 0; i < edges.size(); i++) {\n            int u = edges[i][0], v = edges[i][1], edgeIdx = i;\n            graph[u].push_back({v, edgeIdx});\n            graph[v].push_back({u, edgeIdx});\n        }\n        \n        vector<double> probabilities(n, 0.0);\n        probabilities[start] = 1.0;\n        \n        priority_queue<pair<double, int>> nodesToExplore;\n        // Add the start node to the priority queue with probability 1.0\n        nodesToExplore.push({1.0, start});\n        \n        while (!nodesToExplore.empty()) {\n            auto [prob, u] = nodesToExplore.top();\n            nodesToExplore.pop();\n            \n            // If we've reached the end node, return the probability\n            if (u == end) \n                return prob;\n            // If we've already explored this node with a higher probability, skip it\n            if (probabilities[u] > prob) \n                continue;\n                \n            // Explore the neighbors of the current node\n            for (auto [v, edgeIdx] : graph[u]) {\n                double newProb = prob * succProb[edgeIdx];\n                \n                // Update the probability of the neighbor node if we've found a higher probability\n                if (newProb > probabilities[v]) {\n                    probabilities[v] = newProb;\n                    \n                    // Add the neighbor node to the priority queue with its new probability\n                    nodesToExplore.push({newProb, v});\n                }\n            }\n        }\n        \n        // If we've explored all nodes and haven't reached the end node, return 0.0\n        return 0.0;\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {\\n        unordered_map<int, vector<pair<int, int>>> graph;\\n        \\n        // Build the graph using an adjacency list representation\\n        // Each edge is represented as a pair (neighbor node, edge index)\\n        for (int i = 0; i < edges.size(); i++) {\\n            int u = edges[i][0], v = edges[i][1], edgeIdx = i;\\n            graph[u].push_back({v, edgeIdx});\\n            graph[v].push_back({u, edgeIdx});\\n        }\\n        \\n        vector<double> probabilities(n, 0.0);\\n        probabilities[start] = 1.0;\\n        \\n        priority_queue<pair<double, int>> nodesToExplore;\\n        // Add the start node to the priority queue with probability 1.0\\n        nodesToExplore.push({1.0, start});\\n        \\n        while (!nodesToExplore.empty()) {\\n            auto [prob, u] = nodesToExplore.top();\\n            nodesToExplore.pop();\\n            \\n            // If we\\'ve reached the end node, return the probability\\n            if (u == end) \\n                return prob;\\n            // If we\\'ve already explored this node with a higher probability, skip it\\n            if (probabilities[u] > prob) \\n                continue;\\n                \\n            // Explore the neighbors of the current node\\n            for (auto [v, edgeIdx] : graph[u]) {\\n                double newProb = prob * succProb[edgeIdx];\\n                \\n                // Update the probability of the neighbor node if we\\'ve found a higher probability\\n                if (newProb > probabilities[v]) {\\n                    probabilities[v] = newProb;\\n                    \\n                    // Add the neighbor node to the priority queue with its new probability\\n                    nodesToExplore.push({newProb, v});\\n                }\\n            }\\n        }\\n        \\n        // If we\\'ve explored all nodes and haven\\'t reached the end node, return 0.0\\n        return 0.0;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {\n        unordered_map<int, vector<pair<int, int>>> graph;\n        \n        // Build the graph using an adjacency list representation\n        // Each edge is represented as a pair (neighbor node, edge index)\n        for (int i = 0; i <= edges.size(); i++) {\n            int u = edges[i][0], v = edges[i][1], edgeIdx = i;\n            graph[u].push_back({v, edgeIdx});\n            graph[v].push_back({u, edgeIdx});\n        }\n        \n        vector<double> probabilities(n, 0.0);\n        probabilities[start] = 1.0;\n        \n        priority_queue<pair<double, int>> nodesToExplore;\n        // Add the start node to the priority queue with probability 1.0\n        nodesToExplore.push({1.0, start});\n        \n        while (!nodesToExplore.empty()) {\n            auto [prob, u] = nodesToExplore.top();\n            nodesToExplore.pop();\n            \n            // If we've reached the end node, return the probability\n            if (u == end) \n                return prob;\n            // If we've already explored this node with a higher probability, skip it\n            if (probabilities[u] > prob) \n                continue;\n                \n            // Explore the neighbors of the current node\n            for (auto [v, edgeIdx] : graph[u]) {\n                double newProb = prob * succProb[edgeIdx];\n                \n                // Update the probability of the neighbor node if we've found a higher probability\n                if (newProb > probabilities[v]) {\n                    probabilities[v] = newProb;\n                    \n                    // Add the neighbor node to the priority queue with its new probability\n                    nodesToExplore.push({newProb, v});\n                }\n            }\n        }\n        \n        // If we've explored all nodes and haven't reached the end node, return 0.0\n        return 0.0;\n    }\n};\n",
        "explanations": "\nIteration over edges vector goes beyond its size causing an out-of-bounds exception.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {\n        unordered_map<int, vector<pair<int, int>>> graph;\n\n        // Build the graph using an adjacency list representation\n        // Each edge is represented as a pair (neighbor node, edge index)\n        for (int i = 0; i < edges.size(); i++) {\n            int u = edges[i][0], v = edges[i][1], edgeIdx = i;\n            graph[u].push_back({v, edgeIdx});\n            graph[v].push_back({u, edgeIdx});\n        }\n\n        vector<double> probabilities(n, 0.0);\n        probabilities[start] = 1.0;\n        \n        priority_queue<pair<double, int>> nodesToExplore;\n        // Add the start node to the priority queue with probability 1.0\n        nodesToExplore.push({1.0, start});\n        \n        while (!nodesToExplore.empty()) {\n            auto [prob, u] = nodesToExplore.top();\n            nodesToExplore.pop();\n            \n            // If we've reached the end node, return the probability\n            if (u == end) \n                return prob;\n            // If we've already explored this node with a higher probability, skip it\n            if (probabilities[u] > prob) \n                continue;\n                \n            // Explore the neighbors of the current node\n            for (auto [v, edgeIdx] : graph[u]) {\n                double newProb = prob * succProb[edgeIdx];\n                \n                // Update the probability of the neighbor node if we've found a higher probability\n                if (newProb > probabilities[v]) {\n                    probabilities[v] = newProb;\n                    \n                    // Add the neighbor node to the priority queue with its new probability\n                    nodesToExplore.push({newProb, v});\n                }\n            }\n        }\n        \n        // If we've explored all nodes and haven't reached the end node, return 0.0\n        return 0.0;\n    }\n};\n",
        "fixing_exp": "\nFixed the loop bounds to prevent accessing the vector out of its size, which was causing an unaligned address error.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "155 ms",
            "memory": 65536000,
            "question_id": "1325",
            "elapsed_time": 196,
            "compare_result": "1111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701963985368,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 19,
            "total_testcases": 19,
            "runtime_percentile": 53.85800000000007,
            "status_memory": "65.5 MB",
            "memory_percentile": 77.07900000000004,
            "pretty_lang": "C++",
            "submission_id": "1114455505",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": "Line 1037: Char 9: runtime error: reference binding to misaligned address 0xbebebebebebebebe for type 'int', which requires 4 byte alignment (stl_vector.h)"
    },
    {
        "slug": "print-words-vertically",
        "description": "Given a string s.\u00a0Return\u00a0all the words vertically in the same order in which they appear in s.\r\nWords are returned as a list of strings, complete with\u00a0spaces when is necessary. (Trailing spaces are not allowed).\r\nEach word would be put on only one column and that in one column there will be only one word.",
        "examples": [
            "Input: s = \"HOW ARE YOU\"\r\nOutput: [\"HAY\",\"ORO\",\"WEU\"]\r\nExplanation: Each word is printed vertically. \r\n \"HAY\"\r\n\u00a0\"ORO\"\r\n\u00a0\"WEU\"",
            "Input: s = \"TO BE OR NOT TO BE\"\r\nOutput: [\"TBONTB\",\"OEROOE\",\"   T\"]\r\nExplanation: Trailing spaces is not allowed. \r\n\"TBONTB\"\r\n\"OEROOE\"\r\n\"   T\"",
            "Input: s = \"CONTEST IS COMING\"\r\nOutput: [\"CIC\",\"OSO\",\"N M\",\"T I\",\"E N\",\"S G\",\"T\"]"
        ],
        "constrains": "1 <= s.length <= 200\ns\u00a0contains only upper case English letters.\nIt's guaranteed that there is only one\u00a0space between 2 words.",
        "release_time": 1665332375,
        "oracle_code": "class Solution {\npublic:\n    vector<string> printVertically(string s) \n    {\n         int idx=0;\n         int len=0;\n\n         vector<string>words;\n\n         while(idx<s.length())\n         {\n             if(idx<s.length() and s[idx]>='A' and s[idx]<='Z')\n             {\n                string word=\"\";\n                while(idx<s.length() and s[idx]>='A' and s[idx]<='Z')\n                {\n                    word.push_back(s[idx]);\n                    idx++;\n                }\t\n                if(word.length() > 0)\n                {\n                   words.push_back(word); \n                   if(word.length()>len)\n                   {\n                       len=word.length();\n                   }\n                }\n             }\t\n         \n             while(idx<s.length() and s[idx]==' ')\n             {\n                idx++;\n             }\n\n         }      \n        \n         vector<string>ans(len,\"\");\n         \n         for(int i=0;i<words.size();i++)\n         {\n              string currword=words[i];\n              for(int j=0;j<len;j++)\n              {\n                  if(j<=currword.length()-1)\n                  {\n                     ans[j].push_back(currword[j]);             \n                  }\n                  else if(j>currword.length()-1)\n                  {\n                      ans[j].push_back(' ');\n                  }\n              }\n         }\n         vector<string>result;\n         for(int i=0;i<ans.size();i++)\n         {\n             string currword = ans[i];\n             int idx=-1;\n             int j;\n             for(j=0;j<currword.length();j++)\n             {\n                 if(currword[j]>='A' and currword[j]<='Z')\n                 {\n                     idx=j;\n                 }\n             }\n             result.push_back(currword.substr(0,idx+1));\n         }\n         return result;\n    }\n};",
        "content": "```\\nclass Solution {\\npublic:\\n    vector<string> printVertically(string s) \\n    {\\n         int idx=0;\\n         int len=0;\\n\\n         vector<string>words;\\n\\n         while(idx<s.length())\\n         {\\n             if(idx<s.length() and s[idx]>=\\'A\\' and s[idx]<=\\'Z\\')\\n             {\\n                string word=\"\";\\n                while(idx<s.length() and s[idx]>=\\'A\\' and s[idx]<=\\'Z\\')\\n                {\\n                    word.push_back(s[idx]);\\n                    idx++;\\n                }\\t\\n                if(word.length() > 0)\\n                {\\n                   words.push_back(word); \\n                   if(word.length()>len)\\n                   {\\n                       len=word.length();\\n                   }\\n                }\\n             }\\t\\n         \\n             while(idx<s.length() and s[idx]==\\' \\')\\n             {\\n                idx++;\\n             }\\n\\n         }      \\n        \\n         vector<string>ans(len,\"\");\\n         \\n         for(int i=0;i<words.size();i++)\\n         {\\n              string currword=words[i];\\n              for(int j=0;j<len;j++)\\n              {\\n                  if(j<=currword.length()-1)\\n                  {\\n                     ans[j].push_back(currword[j]);             \\n                  }\\n                  else if(j>currword.length()-1)\\n                  {\\n                      ans[j].push_back(\\' \\');\\n                  }\\n              }\\n         }\\n         vector<string>result;\\n         for(int i=0;i<ans.size();i++)\\n         {\\n             string currword = ans[i];\\n             int idx=-1;\\n             int j;\\n             for(j=0;j<currword.length();j++)\\n             {\\n                 if(currword[j]>=\\'A\\' and currword[j]<=\\'Z\\')\\n                 {\\n                     idx=j;\\n                 }\\n             }\\n             result.push_back(currword.substr(0,idx+1));\\n         }\\n         return result;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    vector<string> printVertically(string s) \n    {\n         int idx=0;\n         int len=0;\n\n         vector<string>words;\n\n         while(idx<s.length())\n         {\n             if(idx<s.length() and s[idx]>='A' and s[idx]<='Z')\n             {\n                string word=\"\";\n                while(idx<s.length() and s[idx]>='A' and s[idx]<='Z')\n                {\n                    word.push_back(s[idx]);\n                    idx++;\n                }\t\n                if(word.length() > 0)\n                {\n                   words.push_back(word); \n                   if(word.length()>len)\n                   {\n                       len=word.length();\n                   }\n                }\n             }\t\n         \n             while(idx<s.length() and s[idx]==' ')\n             {\n                idx++;\n             }\n\n         }      \n        \n         vector<string>ans(len,\"\");\n         \n         for(int i=0;i<words.size();i++)\n         {\n              string currword=words[i];\n              for(int j=0;j<len;j++)\n              {\n                  if(j<=currword.length()-1)\n                  {\n                     ans[j].push_back(currword[j]);             \n                  }\n                  else if(j>currword.length())\n                  {\n                      ans[j].push_back(' ');\n                  }\n              }\n         }\n         vector<string>result;\n         for(int i=0;i<=ans.size();i++)\n         {\n             string currword = ans[i];\n             int idx=-1;\n             int j;\n             for(j=0;j<currword.length();j++)\n             {\n                 if(currword[j]>='A' and currword[j]<='Z')\n                 {\n                     idx=j;\n                 }\n             }\n             result.push_back(currword.substr(0,idx+1));\n         }\n         return result;\n    }\n};\n",
        "explanations": "\nYou are accessing vector 'ans' at an out-of-bound index in the second for loop.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    vector<string> printVertically(string s) \n    {\n         int idx=0;\n         int len=0;\n\n         vector<string>words;\n\n         while(idx<s.length())\n         {\n             if(idx<s.length() and s[idx]>='A' and s[idx]<='Z')\n             {\n                string word=\"\";\n                while(idx<s.length() and s[idx]>='A' and s[idx]<='Z')\n                {\n                    word.push_back(s[idx]);\n                    idx++;\n                }\t\n                if(word.length() > 0)\n                {\n                   words.push_back(word); \n                   if(word.length()>len)\n                   {\n                       len=word.length();\n                   }\n                }\n             }\t\n         \n             while(idx<s.length() and s[idx]==' ')\n             {\n                idx++;\n             }\n\n         }      \n        \n         vector<string>ans(len,\"\");\n         \n         for(int i=0;i<words.size();i++)\n         {\n              string currword=words[i];\n              for(int j=0;j<len;j++)\n              {\n                  if(j<=currword.length()-1)\n                  {\n                     ans[j].push_back(currword[j]);             \n                  }\n                  else if(j>=currword.length())\n                  {\n                      ans[j].push_back(' ');\n                  }\n              }\n         }\n         vector<string>result;\n         for(int i=0;i<ans.size();i++)\n         {\n             string currword = ans[i];\n             int idx=-1;\n             int j;\n             for(j=0;j<currword.length();j++)\n             {\n                 if(currword[j]>='A' and currword[j]<='Z')\n                 {\n                     idx=j;\n                 }\n             }\n             result.push_back(currword.substr(0,idx+1));\n         }\n         return result;\n    }\n};\n",
        "fixing_exp": "\nThis fixes out-of-bounds condition from incorrect loop terminations and incorrect checks in if conditions.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "3 ms",
            "memory": 7136000,
            "question_id": "1449",
            "elapsed_time": 39,
            "compare_result": "11111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701964033289,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 32,
            "total_testcases": 32,
            "runtime_percentile": 43.6975,
            "status_memory": "7.1 MB",
            "memory_percentile": 14.285700000000006,
            "pretty_lang": "C++",
            "submission_id": "1114456057",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": "AddressSanitizer: heap-buffer-overflow on address 0x608000000080 at pc 0x000000372392 bp 0x7fff705f95e0 sp 0x7fff705f95d8"
    },
    {
        "slug": "shortest-path-to-get-all-keys",
        "description": "You are given an m x n grid grid where:\n\n'.' is an empty cell.\n'#' is a wall.\n'@' is the starting point.\nLowercase letters represent keys.\nUppercase letters represent locks.\n\nYou start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall.\nIf you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.\nFor some 1 <= k <= 6, there is exactly one lowercase and one uppercase letter of the first k letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.\nReturn the lowest number of moves to acquire all keys. If it is impossible, return -1.",
        "examples": [
            "Input: grid = [\"@.a..\",\"###.#\",\"b.A.B\"]\nOutput: 8\nExplanation: Note that the goal is to obtain all the keys not to open all the locks.",
            "Input: grid = [\"@..aA\",\"..B#.\",\"....b\"]\nOutput: 6",
            "Input: grid = [\"@Aa\"]\nOutput: -1"
        ],
        "constrains": "m == grid.length\nn == grid[i].length\n1 <= m, n <= 30\ngrid[i][j] is either an English letter, '.', '#', or '@'.\u00a0\nThere is exactly one\u00a0'@'\u00a0in the grid.\nThe number of keys in the grid is in the range [1, 6].\nEach key in the grid is unique.\nEach key in the grid has a matching lock.",
        "release_time": 1688009151,
        "oracle_code": "class Solution {\npublic:\n    using int2 = pair<int, int>;\n\n    int shortestPathAllKeys(vector<string>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n\n        int2 start;\n        // Scan the start and KeyMask\n        int KeyMask = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                char c = grid[i][j];\n                int2 pos = {i, j};\n                if (c == '@')\n                    start = pos;  // Store the position of the starting point\n                if ('a' <= c && c <= 'z')\n                    KeyMask |= (1 << (c - 'a'));  // Set the corresponding bit in KeyMask for each key found\n            }\n        }\n        // Record the visiting status for every key status\n        vector<vector<vector<bool>>> \n        visit(n, vector<vector<bool>>(m, vector<bool>(KeyMask+1, 0)));\n\n        // [i, j, key state, distance]\n        queue<tuple<int, int, int, int>> q;\n        auto [i0, j0] = start;\n        q.push({i0, j0, 0, 0});  // Push the starting point with initial key state and distance 0\n\n        while (!q.empty()) {\n            auto [i, j, keyState, distance] = q.front();  // Extract current position, key state, and distance from the front of the queue\n            q.pop();\n            vector<int2> adj = {{i + 1, j}, {i, j + 1}, {i - 1, j}, {i, j - 1}};\n            for (auto [a, b] : adj) {\n                if (a < 0 || a >= n || b < 0 || b >= m || grid[a][b] == '#')\n                    continue;  // Skip if the next position is out of bounds or a wall ('#')\n                char c = grid[a][b];\n                // c is a key\n                if ('a' <= c && c <= 'z') {\n                    int keyIdx = c - 'a';  // Calculate the index of the key\n                    int newState = keyState | (1 << keyIdx);  // Update the key state by setting the corresponding bit\n                    if (visit[a][b][newState]) continue;  // Skip if this key state has been visited before at this position\n                    visit[a][b][newState] = 1;  // Mark the current key state as visited at this position\n                    if (newState == KeyMask) return distance + 1;  // If all keys are collected, return the distance\n                    q.push({a, b, newState, distance + 1});  // Push the next position with updated key state and increased distance\n                }\n                // c is a lock\n                else if ('A' <= c && c <= 'F') {\n                    int lockIdx = c - 'A';  // Calculate the index of the lock\n                    if ((keyState & (1 << lockIdx)) == 0) continue;  // Skip if the corresponding key for the lock is missing\n                    if (visit[a][b][keyState]) continue;  // Skip if this key state has been visited before at this position\n                    visit[a][b][keyState] = 1;  // Mark the current key state as visited at this position\n                    q.push({a, b, keyState, distance + 1});  // Push the next position with the same key state and increased distance\n                }\n                // c is ',' or '@'\n                else if (visit[a][b][keyState])\n                    continue;  // Skip if this key state has been visited before at this position\n\n                visit[a][b][keyState] = 1;  // Mark the current key state as visited at this position\n                q.push({a, b, keyState, distance + 1});  // Push the next position with the same key state and increased distance\n            }\n        }\n\n        return -1;  // If all keys cannot be collected, return -1\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nC++ code solves the problem of finding the shortest path to collect all keys in a grid. It uses a BFS approach to explore the grid. It initializes the start position and a bitmask to track collected keys. \\n \\nIt checks if the position contains a key or a lock and updates the key state accordingly. It also keeps track of visited positions with different key states to avoid revisiting them. If all keys are collected, it returns the shortest distance. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThere are at most $2^6=64$ key states, not a large amount. In this case, using the boolean array is faster than using the hash tables.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$O(m\\u22C5n\\u22C52^k)$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$O(m\\u22C5n\\u22C52^k)$\\n# Code with Explanation in comments\\n```\\nclass Solution {\\npublic:\\n    using int2 = pair<int, int>;\\n\\n    int shortestPathAllKeys(vector<string>& grid) {\\n        int n = grid.size();\\n        int m = grid[0].size();\\n\\n        int2 start;\\n        // Scan the start and KeyMask\\n        int KeyMask = 0;\\n        for (int i = 0; i < n; i++) {\\n            for (int j = 0; j < m; j++) {\\n                char c = grid[i][j];\\n                int2 pos = {i, j};\\n                if (c == \\'@\\')\\n                    start = pos;  // Store the position of the starting point\\n                if (\\'a\\' <= c && c <= \\'z\\')\\n                    KeyMask |= (1 << (c - \\'a\\'));  // Set the corresponding bit in KeyMask for each key found\\n            }\\n        }\\n        // Record the visiting status for every key status\\n        vector<vector<vector<bool>>> \\n        visit(n, vector<vector<bool>>(m, vector<bool>(KeyMask+1, 0)));\\n\\n        // [i, j, key state, distance]\\n        queue<tuple<int, int, int, int>> q;\\n        auto [i0, j0] = start;\\n        q.push({i0, j0, 0, 0});  // Push the starting point with initial key state and distance 0\\n\\n        while (!q.empty()) {\\n            auto [i, j, keyState, distance] = q.front();  // Extract current position, key state, and distance from the front of the queue\\n            q.pop();\\n            vector<int2> adj = {{i + 1, j}, {i, j + 1}, {i - 1, j}, {i, j - 1}};\\n            for (auto [a, b] : adj) {\\n                if (a < 0 || a >= n || b < 0 || b >= m || grid[a][b] == \\'#\\')\\n                    continue;  // Skip if the next position is out of bounds or a wall (\\'#\\')\\n                char c = grid[a][b];\\n                // c is a key\\n                if (\\'a\\' <= c && c <= \\'z\\') {\\n                    int keyIdx = c - \\'a\\';  // Calculate the index of the key\\n                    int newState = keyState | (1 << keyIdx);  // Update the key state by setting the corresponding bit\\n                    if (visit[a][b][newState]) continue;  // Skip if this key state has been visited before at this position\\n                    visit[a][b][newState] = 1;  // Mark the current key state as visited at this position\\n                    if (newState == KeyMask) return distance + 1;  // If all keys are collected, return the distance\\n                    q.push({a, b, newState, distance + 1});  // Push the next position with updated key state and increased distance\\n                }\\n                // c is a lock\\n                else if (\\'A\\' <= c && c <= \\'F\\') {\\n                    int lockIdx = c - \\'A\\';  // Calculate the index of the lock\\n                    if ((keyState & (1 << lockIdx)) == 0) continue;  // Skip if the corresponding key for the lock is missing\\n                    if (visit[a][b][keyState]) continue;  // Skip if this key state has been visited before at this position\\n                    visit[a][b][keyState] = 1;  // Mark the current key state as visited at this position\\n                    q.push({a, b, keyState, distance + 1});  // Push the next position with the same key state and increased distance\\n                }\\n                // c is \\',\\' or \\'@\\'\\n                else if (visit[a][b][keyState])\\n                    continue;  // Skip if this key state has been visited before at this position\\n\\n                visit[a][b][keyState] = 1;  // Mark the current key state as visited at this position\\n                q.push({a, b, keyState, distance + 1});  // Push the next position with the same key state and increased distance\\n            }\\n        }\\n\\n        return -1;  // If all keys cannot be collected, return -1\\n    }\\n};\\n\\n\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n    using int2 = pair<int, int>;\n\n    int shortestPathAllKeys(vector<string>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n\n        int2 start;\n        // Scan the start and KeyMask\n        int KeyMask = 0;\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= m; j++) {\n                char c = grid[i][j];\n                int2 pos = {i, j};\n                if (c == '@')\n                    start = pos;  // Store the position of the starting point\n                if ('a' <= c && c <= 'z')\n                    KeyMask |= (1 << (c - 'a'));  // Set the corresponding bit in KeyMask for each key found\n            }\n        }\n        // Record the visiting status for every key status\n        vector<vector<vector<bool>>> \n        visit(n, vector<vector<bool>>(m, vector<bool>(KeyMask+1, 0)));\n\n        // [i, j, key state, distance]\n        queue<tuple<int, int, int, int>> q;\n        auto [i0, j0] = start;\n        q.push({i0, j0, 0, 0});  // Push the starting point with initial key state and distance 0\n\n        while (!q.empty()) {\n            auto [i, j, keyState, distance] = q.front();  // Extract current position, key state, and distance from the front of the queue\n            q.pop();\n            vector<int2> adj = {{i + 1, j}, {i, j + 1}, {i - 1, j}, {i, j - 1}};\n            for (auto [a, b] : adj) {\n                if (a < 0 || a > n || b < 0 || b > m || grid[a][b] == '#')\n                    continue;  // Skip if the next position is out of bounds or a wall ('#')\n                char c = grid[a][b];\n                // c is a key\n                if ('a' <= c && c <= 'z') {\n                    int keyIdx = c - 'a';  // Calculate the index of the key\n                    int newState = keyState | (1 << keyIdx);  // Update the key state by setting the corresponding bit\n                    if (visit[a][b][newState]) continue;  // Skip if this key state has been visited before at this position\n                    visit[a][b][newState] = 1;  // Mark the current key state as visited at this position\n                    if (newState == KeyMask) return distance + 1;  // If all keys are collected, return the distance\n                    q.push({a, b, newState, distance + 1});  // Push the next position with updated key state and increased distance\n                }\n                // c is a lock\n                else if ('A' <= c && c <= 'F') {\n                    int lockIdx = c - 'A';  // Calculate the index of the lock\n                    if ((keyState & (1 << lockIdx)) == 0) continue;  // Skip if the corresponding key for the lock is missing\n                    if (visit[a][b][keyState]) continue;  // Skip if this key state has been visited before at this position\n                    visit[a][b][keyState] = 1;  // Mark the current key state as visited at this position\n                    q.push({a, b, keyState, distance + 1});  // Push the next position with the same key state and increased distance\n                }\n                // c is ',' or '@'\n                else if (visit[a][b][keyState])\n                    continue;  // Skip if this key state has been visited before at this position\n\n                visit[a][b][keyState] = 1;  // Mark the current key state as visited at this position\n                q.push({a, b, keyState, distance + 1});  // Push the next position with the same key state and increased distance\n            }\n        }\n\n        return -1;  // If all keys cannot be collected, return -1\n    }\n};\n",
        "explanations": "\nFor loop bounds are wrong, accessing out-of-bounds index, causing a segmentation fault.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    using int2 = pair<int, int>;\n\n    int shortestPathAllKeys(vector<string>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n\n        int2 start;\n        int KeyMask = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                char c = grid[i][j];\n                int2 pos = {i, j};\n                if (c == '@')\n                    start = pos;  \n                if ('a' <= c && c <= 'z')\n                    KeyMask |= (1 << (c - 'a')); \n            }\n        }\n\n        vector<vector<vector<bool>>> \n        visit(n, vector<vector<bool>>(m, vector<bool>(KeyMask+1, 0)));\n\n        queue<tuple<int, int, int, int>> q;\n        auto [i0, j0] = start;\n        q.push({i0, j0, 0, 0});\n\n        while (!q.empty()) {\n            auto [i, j, keyState, distance] = q.front(); \n            q.pop();\n            vector<int2> adj = {{i + 1, j}, {i, j + 1}, {i - 1, j}, {i, j - 1}};\n            for (auto [a, b] : adj) {\n                if (a < 0 || a >= n || b < 0 || b >= m || grid[a][b] == '#')\n                    continue;  \n                char c = grid[a][b];\n                if ('a' <= c && c <= 'z') {\n                    int keyIdx = c - 'a';  \n                    int newState = keyState | (1 << keyIdx);  \n                    if (visit[a][b][newState]) continue; \n                    visit[a][b][newState] = 1;  \n                    if (newState == KeyMask) return distance + 1;\n                    q.push({a, b, newState, distance + 1});\n                }\n                else if ('A' <= c && c <= 'F') {\n                    int lockIdx = c - 'A'; \n                    if ((keyState & (1 << lockIdx)) == 0) continue;\n                    if (visit[a][b][keyState]) continue;\n                    visit[a][b][keyState] = 1;\n                    q.push({a, b, keyState, distance + 1});\n                }\n                else if (visit[a][b][keyState])\n                    continue;\n                visit[a][b][keyState] = 1; \n                q.push({a, b, keyState, distance + 1});\n\n            }\n        }\n\n        return -1;\n    }\n};\n",
        "fixing_exp": "\nThe array indices were going out of bounds causing segmentation fault.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "59 ms",
            "memory": 21832000,
            "question_id": "895",
            "elapsed_time": 76,
            "compare_result": "11111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701964088880,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 35,
            "total_testcases": 35,
            "runtime_percentile": 59.25060000000002,
            "status_memory": "21.8 MB",
            "memory_percentile": 53.74390000000001,
            "pretty_lang": "C++",
            "submission_id": "1114456629",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": "AddressSanitizer: SEGV on unknown address (pc 0x000000369eda bp 0x7ffd11cc1ef0 sp 0x7ffd11cc1800 T0)"
    },
    {
        "slug": "longest-subarray-of-1s-after-deleting-one-element",
        "description": "Given a binary array nums, you should delete one element from it.\nReturn the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray.",
        "examples": [
            "Input: nums = [1,1,0,1]\nOutput: 3\nExplanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.",
            "Input: nums = [0,1,1,1,0,1,1,0,1]\nOutput: 5\nExplanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].",
            "Input: nums = [1,1,1]\nOutput: 2\nExplanation: You must delete one element."
        ],
        "constrains": "1 <= nums.length <= 105\nnums[i] is either 0 or 1.",
        "release_time": 1688536604,
        "oracle_code": "class Solution {\npublic:\n    int longestSubarray(vector<int>& nums) {\n        int n = nums.size();\n        int left = 0, right, zeros = 0, ans = 0;\n\n        for (right = 0; right < n; right++) {\n            if (nums[right] == 0){\n                zeros++;\n                }\n            if (zeros > 1 && nums[left++] == 0){\n                zeros--;\n                }\n            ans = max(ans, right - left);\n        }\n        return ans; \n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int longestSubarray(vector<int>& nums) {\\n        int n = nums.size();\\n        int left = 0, right, zeros = 0, ans = 0;\\n\\n        for (right = 0; right < n; right++) {\\n            if (nums[right] == 0){\\n                zeros++;\\n                }\\n            if (zeros > 1 && nums[left++] == 0){\\n                zeros--;\\n                }\\n            ans = max(ans, right - left);\\n        }\\n        return ans; \\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int longestSubarray(vector<int>& nums) {\n        int n = nums.size();\n        int left = 0, right, zeros = 0, ans = 0;\n\n        for (right = 0; right <= n; right++) {\n            if (nums[right] == 0){\n                zeros++;\n                }\n            if (zeros > 1 && nums[left++] == 0){\n                zeros--;\n                }\n            ans = max(ans, right - left);\n        }\n        return ans; \n    }\n};\n",
        "explanations": "\nThe loop iterates beyond the size of the vector, causing array index out of bound errors.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int longestSubarray(vector<int>& nums) {\n        int n = nums.size();\n        int left = 0, right, zeros = 0, ans = 0;\n\n        for (right = 0; right < n; right++) {\n            if (nums[right] == 0){\n                zeros++;\n                }\n            if (zeros > 1 && nums[left++] == 0){\n                zeros--;\n                }\n            ans = max(ans, right - left);\n        }\n        return ans; \n    }\n};\n",
        "fixing_exp": "\nFixed the out-of-bound condition in the for loop. Changed \"<=\" operator to \"<\"\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "53 ms",
            "memory": 56700000,
            "question_id": "1586",
            "elapsed_time": 125,
            "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701964120465,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 82,
            "total_testcases": 82,
            "runtime_percentile": 11.886199999999995,
            "status_memory": "56.7 MB",
            "memory_percentile": 11.666899999999954,
            "pretty_lang": "C++",
            "submission_id": "1114456956",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": "AddressSanitizer: heap-buffer-overflow on address 0x6020000000a0 at pc 0x000000367059 bp 0x7fffaa8f10a0 sp 0x7fffaa8f1098"
    },
    {
        "slug": "find-all-numbers-disappeared-in-an-array",
        "description": "Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.",
        "examples": [
            "Input: nums = [4,3,2,7,8,2,3,1]\nOutput: [5,6]",
            "Input: nums = [1,1]\nOutput: [2]"
        ],
        "constrains": "n == nums.length\n1 <= n <= 105\n1 <= nums[i] <= n",
        "release_time": 1687767620,
        "oracle_code": "class Solution {\npublic:\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\n        int n = nums.size();\n        int i = 0;\n        while (i<n) {\n            if (nums[i] != nums[nums[i]-1] && i != nums[i]-1)\n                swap(nums[i], nums[nums[i]-1]);\n            else i++;\n        }\n        \n        vector<int> res;\n        for (int i=0; i<n; i++) {\n            if (nums[i] != i+1) res.push_back(i+1);\n        }\n\n        return res;\n    }\n};",
        "content": "**Swap Sort** can be used in various problems where we have to find the **missing or duplicates values** in array and the array must contain **values in range [1..n]**.\\n```\\nclass Solution {\\npublic:\\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\\n        int n = nums.size();\\n        int i = 0;\\n        while (i<n) {\\n            if (nums[i] != nums[nums[i]-1] && i != nums[i]-1)\\n                swap(nums[i], nums[nums[i]-1]);\\n            else i++;\\n        }\\n        \\n        vector<int> res;\\n        for (int i=0; i<n; i++) {\\n            if (nums[i] != i+1) res.push_back(i+1);\\n        }\\n\\n        return res;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\n        int n = nums.size();\n        int i = 0;\n        while (i<n) {\n            if (nums[i] != nums[nums[i]-1] && i != nums[i]-1)\n                swap(nums[i], nums[nums[i]]);\n            else i++;\n        }\n        \n        vector<int> res;\n        for (int i=0; i<n; i++) {\n            if (nums[i] != i+1) res.push_back(i+1);\n        }\n\n        return res;\n    }\n};\n",
        "explanations": "\nThe bug is in the swap statement. nums[nums[i]] will have an index value of nums[i] which might exceed the size of the array.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\n        int n = nums.size();\n        int i = 0;\n        while (i < n) {\n            while(nums[i] != nums[nums[i]-1] && i != nums[i]-1) {\n                swap(nums[i], nums[nums[i]-1]);\n            }\n            i++;\n        }\n        \n        vector<int> res;\n        for (int i=0; i<n; i++) {\n            if (nums[i] != i+1) res.push_back(i+1);\n        }\n\n        return res;\n    }\n};\n",
        "fixing_exp": "\nThe index is calculated wrong in the swap function, causing a heap-buffer-overflow.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "49 ms",
            "memory": 33956000,
            "question_id": "448",
            "elapsed_time": 69,
            "compare_result": "1111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701964151885,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 34,
            "total_testcases": 34,
            "runtime_percentile": 44.86030000000001,
            "status_memory": "34 MB",
            "memory_percentile": 90.3904,
            "pretty_lang": "C++",
            "submission_id": "1114457295",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": "AddressSanitizer: heap-buffer-overflow on address 0x603000000090 at pc 0x000000367720 bp 0x7fff81dc2310 sp 0x7fff81dc2308"
    },
    {
        "slug": "widest-vertical-area-between-two-points-containing-no-points",
        "description": "Given n points on a 2D plane where points[i] = [xi, yi], Return\u00a0the widest vertical area between two points such that no points are inside the area.\nA vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The widest vertical area is the one with the maximum width.\nNote that points on the edge of a vertical area are not considered included in the area.",
        "examples": [
            "\u200b\n\nInput: points = [[8,7],[9,9],[7,4],[9,7]]\nOutput: 1\nExplanation: Both the red and the blue area are optimal.",
            "Input: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]\nOutput: 3"
        ],
        "constrains": "n == points.length\n2 <= n <= 105\npoints[i].length == 2\n0 <= xi, yi\u00a0<= 109",
        "release_time": 1666839967,
        "oracle_code": "class Solution {\npublic:\n  int maxWidthOfVerticalArea(vector<vector<int>>& points) {\n    set<int> x;\n    int res = 0;\n    for (auto &p : points)\n        x.insert(p[0]);\n    for (auto it = next(begin(x)); it != end(x); ++it)\n        res = max(res, *it - *prev(it));\n    return res;\n}\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n  int maxWidthOfVerticalArea(vector<vector<int>>& points) {\\n    set<int> x;\\n    int res = 0;\\n    for (auto &p : points)\\n        x.insert(p[0]);\\n    for (auto it = next(begin(x)); it != end(x); ++it)\\n        res = max(res, *it - *prev(it));\\n    return res;\\n}\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n  int maxWidthOfVerticalArea(vector<vector<int>>& points) {\n    set<int> x;\n    int res = 0;\n    for (auto &p : points)\n        x.insert(p[2]);\n    for (auto it = next(begin(x)); it != end(x); ++it)\n        res = max(res, *it - *prev(it));\n    return res;\n}\n};\n",
        "explanations": "\nThe vector 'p' doesn't have a third element, causing an out-of-bounds indexing error.\n",
        "fixed_code": "\nclass Solution {\npublic:\n  int maxWidthOfVerticalArea(vector<vector<int>>& points) {\n    set<int> x;\n    int res = 0;\n    for (auto &p : points)\n        x.insert(p[0]);\n    for (auto it = next(begin(x)); it != end(x); ++it)\n        res = max(res, *it - *prev(it));\n    return res;\n}\n};\n",
        "fixing_exp": "\nThe point array index p[2] was out of bounds; corrected to p[0].\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "245 ms",
            "memory": 81484000,
            "question_id": "1742",
            "elapsed_time": 280,
            "compare_result": "1111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701964182136,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 55,
            "total_testcases": 55,
            "runtime_percentile": 45.05710000000009,
            "status_memory": "81.5 MB",
            "memory_percentile": 27.87699999999997,
            "pretty_lang": "C++",
            "submission_id": "1114457634",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": "AddressSanitizer: heap-buffer-overflow on address 0x602000000078 at pc 0x000000368cf7 bp 0x7ffe2d7e0ca0 sp 0x7ffe2d7e0c98"
    },
    {
        "slug": "count-number-of-possible-root-nodes",
        "description": "Alice has an undirected tree with n nodes labeled from 0 to n - 1. The tree is represented as a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nAlice wants Bob to find the root of the tree. She allows Bob to make several guesses about her tree. In one guess, he does the following:\n\nChooses two distinct integers u and v such that there exists an edge [u, v] in the tree.\nHe tells Alice that u is the parent of v in the tree.\n\nBob's guesses are represented by a 2D integer array guesses where guesses[j] = [uj, vj] indicates Bob guessed uj to be the parent of vj.\nAlice being lazy, does not reply to each of Bob's guesses, but just says that at least k of his guesses are true.\nGiven the 2D integer arrays edges, guesses and the integer k, return the number of possible nodes that can be the root of Alice's tree. If there is no such tree, return 0.",
        "examples": [
            "Input: edges = [[0,1],[1,2],[1,3],[4,2]], guesses = [[1,3],[0,1],[1,0],[2,4]], k = 3\nOutput: 3\nExplanation: \nRoot = 0, correct guesses = [1,3], [0,1], [2,4]\nRoot = 1, correct guesses = [1,3], [1,0], [2,4]\nRoot = 2, correct guesses = [1,3], [1,0], [2,4]\nRoot = 3, correct guesses = [1,0], [2,4]\nRoot = 4, correct guesses = [1,3], [1,0]\nConsidering 0, 1, or 2 as root node leads to 3 correct guesses.",
            "Input: edges = [[0,1],[1,2],[2,3],[3,4]], guesses = [[1,0],[3,4],[2,1],[3,2]], k = 1\nOutput: 5\nExplanation: \nRoot = 0, correct guesses = [3,4]\nRoot = 1, correct guesses = [1,0], [3,4]\nRoot = 2, correct guesses = [1,0], [2,1], [3,4]\nRoot = 3, correct guesses = [1,0], [2,1], [3,2], [3,4]\nRoot = 4, correct guesses = [1,0], [2,1], [3,2]\nConsidering any node as root will give at least 1 correct guess."
        ],
        "constrains": "edges.length == n - 1\n2 <= n <= 105\n1 <= guesses.length <= 105\n0 <= ai, bi, uj, vj <= n - 1\nai != bi\nuj != vj\nedges represents a valid tree.\nguesses[j] is an edge of the tree.\nguesses is unique.\n0 <= k <= guesses.length",
        "release_time": 1677967205,
        "oracle_code": "class Solution {\npublic:\n    map<pair<int,int>,int> mp;\n    void dfs(vector<vector<int>>& tree,vector<int>& possible,int cur ,int ans,int k)\n    {\n        for(auto& a:tree[cur])\n        {\n            if(possible[a]==-1)\n            {\n                int new_ans=ans;\n                bool a1=false,a2=false;\n                if(mp.find({a,cur})!=mp.end() && mp[{a,cur}]==0  )\n                {\n                    mp[{a,cur}]=1;\n                    new_ans++;\n                    a1=true;\n                }\n                if(mp.find({cur,a })!=mp.end() && mp[{cur,a}]==1  )\n                {\n                    mp[{cur,a}]=0;\n                    new_ans--;\n                    a2=true;\n                }\n                possible[a]=0;\n                if(new_ans>=k)\n                {\n                    possible[a]=1;\n                }\n                dfs(tree,possible,a,new_ans,k);\n                if(a1)\n                {\n                    mp[{a,cur}]=0;\n                }\n                if(a2)\n                {\n                    mp[{cur,a}]=1;\n                }\n            }\n        }\n\n    }\n    int rootCount(vector<vector<int>>& edges, vector<vector<int>>& guesses, int k) {\n        \n        for(auto&e : guesses)\n        {\n            mp[ {e[0],e[1]}]=0;\n        }\n        int n=edges.size()+1;\n        vector<vector<int>> tree(n);\n        for(auto& e:edges)\n        {\n            tree[e[0]].push_back(e[1]);\n            tree[e[1]].push_back(e[0]);\n        }\n        queue<int> q;\n        q.push(0);\n        vector<bool> visited(n,false);\n        visited[0]=true;\n        int ans=0;\n        while(q.size()>0)\n        {\n            int a=q.front();\n            q.pop();\n            for(int i=0;i<tree[a].size();i++)\n            {\n                if(visited[tree[a][i]])\n                    continue;\n                visited[tree[a][i]]=true;\n                if(mp.find({a,tree[a][i]})!=mp.end() && mp[{a,tree[a][i]}]==0  )\n                {\n                    mp[{a,tree[a][i]}]=1;\n                    ans++;\n                }\n                if(mp.find({tree[a][i],a })!=mp.end() && mp[{tree[a][i],a}]==1  )\n                {\n                    mp[{tree[a][i],a}]=0;\n                    ans--;\n                }\n                q.push(tree[a][i]);\n            }\n        }\n        vector<int> possible(n,-1);\n        possible[0]= (1?ans>=k:0);\n        dfs(tree,possible,0,ans,k);\n        int sum=accumulate(possible.begin(),possible.end(),0);\n        return sum;\n    }\n};",
        "content": "# Intuition\\nSuppose [a,b] is an edge and a is the root of the tree. Now suppose we want to evaluate b as the root of the tree. The only guess that were previously correct and now incorrect would be [a,b]. Similarly the only guess that was previously incorrect but now correct is [b,a].\\n\\n# Approach\\nCreate an adjacency list of the graph ->***tree***. Suppose 0 is the root of the tree. Apply bfs (I used bfs but dfs can be used as well) to evaluate all the guesses that are now correct ->***ans***. Create another array of size n -> ***possible*** that stores if the current node is capable of being the root of the tree. possible[0] = 1 if ans>=k, else possible[0]=0;\\n\\nNow try to evaluate the ans if one of the neighbours of 0 is the root. Suppose [0,b] is an edge in guesses. We will know that since b is now parent, [0,b] guess would now be false. So decrement ans by 1 in this case. Similarly suppose [b,0] was a guess. This guess is now correct. Increment ans by 1 in this case. Again see if ans>=k. If yes, possible[b]=1, else possible[b]=0;\\n\\nContinue this for all the edges in the tree in a dfs manner. Finally return the number of indexes where possible array entry is equal to 1. \\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    map<pair<int,int>,int> mp;\\n    void dfs(vector<vector<int>>& tree,vector<int>& possible,int cur ,int ans,int k)\\n    {\\n        for(auto& a:tree[cur])\\n        {\\n            if(possible[a]==-1)\\n            {\\n                int new_ans=ans;\\n                bool a1=false,a2=false;\\n                if(mp.find({a,cur})!=mp.end() && mp[{a,cur}]==0  )\\n                {\\n                    mp[{a,cur}]=1;\\n                    new_ans++;\\n                    a1=true;\\n                }\\n                if(mp.find({cur,a })!=mp.end() && mp[{cur,a}]==1  )\\n                {\\n                    mp[{cur,a}]=0;\\n                    new_ans--;\\n                    a2=true;\\n                }\\n                possible[a]=0;\\n                if(new_ans>=k)\\n                {\\n                    possible[a]=1;\\n                }\\n                dfs(tree,possible,a,new_ans,k);\\n                if(a1)\\n                {\\n                    mp[{a,cur}]=0;\\n                }\\n                if(a2)\\n                {\\n                    mp[{cur,a}]=1;\\n                }\\n            }\\n        }\\n\\n    }\\n    int rootCount(vector<vector<int>>& edges, vector<vector<int>>& guesses, int k) {\\n        \\n        for(auto&e : guesses)\\n        {\\n            mp[ {e[0],e[1]}]=0;\\n        }\\n        int n=edges.size()+1;\\n        vector<vector<int>> tree(n);\\n        for(auto& e:edges)\\n        {\\n            tree[e[0]].push_back(e[1]);\\n            tree[e[1]].push_back(e[0]);\\n        }\\n        queue<int> q;\\n        q.push(0);\\n        vector<bool> visited(n,false);\\n        visited[0]=true;\\n        int ans=0;\\n        while(q.size()>0)\\n        {\\n            int a=q.front();\\n            q.pop();\\n            for(int i=0;i<tree[a].size();i++)\\n            {\\n                if(visited[tree[a][i]])\\n                    continue;\\n                visited[tree[a][i]]=true;\\n                if(mp.find({a,tree[a][i]})!=mp.end() && mp[{a,tree[a][i]}]==0  )\\n                {\\n                    mp[{a,tree[a][i]}]=1;\\n                    ans++;\\n                }\\n                if(mp.find({tree[a][i],a })!=mp.end() && mp[{tree[a][i],a}]==1  )\\n                {\\n                    mp[{tree[a][i],a}]=0;\\n                    ans--;\\n                }\\n                q.push(tree[a][i]);\\n            }\\n        }\\n        vector<int> possible(n,-1);\\n        possible[0]= (1?ans>=k:0);\\n        dfs(tree,possible,0,ans,k);\\n        int sum=accumulate(possible.begin(),possible.end(),0);\\n        return sum;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n    map<pair<int,int>,int> mp;\n    void dfs(vector<vector<int>>& tree,vector<int>& possible,int cur ,int ans,int k)\n    {\n        for(auto& a:tree[cur])\n        {\n            if(possible[a]==-1)\n            {\n                int new_ans=ans;\n                bool a1=false,a2=false;\n                if(mp.find({a,cur})!=mp.end() && mp[{a,cur}]==0  )\n                {\n                    mp[{a,cur}]=1;\n                    new_ans++;\n                    a1=true;\n                }\n                if(mp.find({cur,a })!=mp.end() && mp[{cur,a}]==1  )\n                {\n                    mp[{cur,a}]=0;\n                    new_ans--;\n                    a2=true;\n                }\n                possible[a]=0;\n                if(new_ans>=k)\n                {\n                    possible[a+1]=1; \n                }\n                dfs(tree,possible,a,new_ans,k);\n                if(a1)\n                {\n                    mp[{a,cur}]=0;\n                }\n                if(a2)\n                {\n                    mp[{cur,a}]=1;\n                }\n            }\n        }\n\n    }\n    int rootCount(vector<vector<int>>& edges, vector<vector<int>>& guesses, int k) {\n        \n        for(auto&e : guesses)\n        {\n            mp[ {e[0],e[1]}]=0;\n        }\n        int n=edges.size()+1;\n        vector<vector<int>> tree(n);\n        for(auto& e:edges)\n        {\n            tree[e[0]].push_back(e[1]);\n            tree[e[1]].push_back(e[0]);\n        }\n        queue<int> q;\n        q.push(0);\n        vector<bool> visited(n,false);\n        visited[0]=true;\n        int ans=0;\n        while(q.size()>0)\n        {\n            int a=q.front();\n            q.pop();\n            for(int i=0;i<tree[a].size();i++)\n            {\n                if(visited[tree[a][i]])\n                    continue;\n                visited[tree[a][i]]=true;\n                if(mp.find({a,tree[a][i]})!=mp.end() && mp[{a,tree[a][i]}]==0  )\n                {\n                    mp[{a,tree[a][i]}]=1;\n                    ans++;\n                }\n                if(mp.find({tree[a][i],a })!=mp.end() && mp[{tree[a][i],a}]==1  )\n                {\n                    mp[{tree[a][i],a}]=0;\n                    ans--;\n                }\n                q.push(tree[a][i]);\n            }\n        }\n        vector<int> possible(n,-1);\n        possible[0]= (1?ans>=k:0);\n        dfs(tree,possible,0,ans,k);\n        int sum=accumulate(possible.begin(),possible.end(),0);\n        return sum;\n    }\n};\n",
        "explanations": "\nThe indexing error is in possible[a+1]=1, which will go out of range if a is the last index.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    map<pair<int,int>,int> mp;\n    void dfs(vector<vector<int>>& tree,vector<int>& possible,int cur ,int ans,int k)\n    {\n        for(auto& a:tree[cur])\n        {\n            if(possible[a]==-1)\n            {\n                int new_ans=ans;\n                bool a1=false,a2=false;\n                if(mp.find({a,cur})!=mp.end() && mp[{a,cur}]==0  )\n                {\n                    mp[{a,cur}]=1;\n                    new_ans++;\n                    a1=true;\n                }\n                if(mp.find({cur,a })!=mp.end() && mp[{cur,a}]==1  )\n                {\n                    mp[{cur,a}]=0;\n                    new_ans--;\n                    a2=true;\n                }\n                possible[a]=0;\n                if(new_ans>=k)\n                {\n                    possible[a]=1; \n                }\n                dfs(tree,possible,a,new_ans,k);\n                if(a1)\n                {\n                    mp[{a,cur}]=0;\n                }\n                if(a2)\n                {\n                    mp[{cur,a}]=1;\n                }\n            }\n        }\n\n    }\n    int rootCount(vector<vector<int>>& edges, vector<vector<int>>& guesses, int k) {\n        \n        for(auto&e : guesses)\n        {\n            mp[ {e[0],e[1]}]=0;\n        }\n        int n=edges.size()+1;\n        vector<vector<int>> tree(n);\n        for(auto& e:edges)\n        {\n            tree[e[0]].push_back(e[1]);\n            tree[e[1]].push_back(e[0]);\n        }\n        queue<int> q;\n        q.push(0);\n        vector<bool> visited(n,false);\n        visited[0]=true;\n        int ans=0;\n        while(q.size()>0)\n        {\n            int a=q.front();\n            q.pop();\n            for(int i=0;i<tree[a].size();i++)\n            {\n                if(visited[tree[a][i]])\n                    continue;\n                visited[tree[a][i]]=true;\n                if(mp.find({a,tree[a][i]})!=mp.end() && mp[{a,tree[a][i]}]==0  )\n                {\n                    mp[{a,tree[a][i]}]=1;\n                    ans++;\n                }\n                if(mp.find({tree[a][i],a })!=mp.end() && mp[{tree[a][i],a}]==1  )\n                {\n                    mp[{tree[a][i],a}]=0;\n                    ans--;\n                }\n                q.push(tree[a][i]);\n            }\n        }\n        vector<int> possible(n,-1);\n        possible[0]= (ans>=k? 1:0);\n        dfs(tree,possible,0,ans,k);\n        int sum=accumulate(possible.begin(),possible.end(),0);\n        return sum;\n    }\n};\n",
        "fixing_exp": "\nIn the line `possible[0] = (1?ans>=k:0)`, ternary operator was used incorrectly, so it's fixed to `possible[0] = (ans>=k? 1:0)`.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "612 ms",
            "memory": 243880000,
            "question_id": "2652",
            "elapsed_time": 909,
            "compare_result": "111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701964230472,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 51,
            "total_testcases": 51,
            "runtime_percentile": 55.63469999999997,
            "status_memory": "243.9 MB",
            "memory_percentile": 42.25449999999997,
            "pretty_lang": "C++",
            "submission_id": "1114458113",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "final-value-of-variable-after-performing-operations",
        "description": "There is a programming language with only four operations and one variable X:\n\n++X and X++ increments the value of the variable X by 1.\n--X and X-- decrements the value of the variable X by 1.\n\nInitially, the value of X is 0.\nGiven an array of strings operations containing a list of operations, return the final value of X after performing all the operations.",
        "examples": [
            "Input: operations = [\"--X\",\"X++\",\"X++\"]\nOutput: 1\nExplanation:\u00a0The operations are performed as follows:\nInitially, X = 0.\n--X: X is decremented by 1, X =  0 - 1 = -1.\nX++: X is incremented by 1, X = -1 + 1 =  0.\nX++: X is incremented by 1, X =  0 + 1 =  1.",
            "Input: operations = [\"++X\",\"++X\",\"X++\"]\nOutput: 3\nExplanation: The operations are performed as follows:\nInitially, X = 0.\n++X: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\nX++: X is incremented by 1, X = 2 + 1 = 3.",
            "Input: operations = [\"X++\",\"++X\",\"--X\",\"X--\"]\nOutput: 0\nExplanation:\u00a0The operations are performed as follows:\nInitially, X = 0.\nX++: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\n--X: X is decremented by 1, X = 2 - 1 = 1.\nX--: X is decremented by 1, X = 1 - 1 = 0."
        ],
        "constrains": "1 <= operations.length <= 100\noperations[i] will be either \"++X\", \"X++\", \"--X\", or \"X--\".",
        "release_time": 1690653502,
        "oracle_code": "class Solution {\npublic:\n    int finalValueAfterOperations(vector<string>& operations) {\n        int x = 0;\n        for (auto& operation : operations) {\n            if (operation[1] == '+') x++;\n            else x--;\n        }\n        return x;\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int finalValueAfterOperations(vector<string>& operations) {\\n        int x = 0;\\n        for (auto& operation : operations) {\\n            if (operation[1] == \\'+\\') x++;\\n            else x--;\\n        }\\n        return x;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int finalValueAfterOperations(vector<string>& operations) {\n        int x = 0;\n        for (int i=0; i<=operations.size(); i++) {\n            if (operations[i][1] == '+') x++;\n            else x--;\n        }\n        return x;\n    }\n};\n",
        "explanations": "\nThe loop goes beyond the valid range of index causing an out-of-bounds error.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int finalValueAfterOperations(vector<string>& operations) {\n        int x = 0;\n        for (int i = 0; i < operations.size(); i++) { \n            if (operations[i][1] == '+') x++;\n            else x--;\n        }\n        return x;\n    }\n};\n",
        "fixing_exp": "\nThe issue was accessing an out-of-bounds index in the vector, fixed by changing the condition of the loop.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "9 ms",
            "memory": 14448000,
            "question_id": "2137",
            "elapsed_time": 26,
            "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701964263818,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 259,
            "total_testcases": 259,
            "runtime_percentile": 23.0806,
            "status_memory": "14.4 MB",
            "memory_percentile": 21.261200000000002,
            "pretty_lang": "C++",
            "submission_id": "1114458503",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": "AddressSanitizer: SEGV on unknown address (pc 0x000000367181 bp 0x7ffe090f5a50 sp 0x7ffe090f5a20 T0)"
    }
]