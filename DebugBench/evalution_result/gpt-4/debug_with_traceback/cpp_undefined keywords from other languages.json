[
    {
        "slug": "length-of-longest-fibonacci-subsequence",
        "description": "A sequence x1, x2, ..., xn is Fibonacci-like if:\n\nn >= 3\nxi + xi+1 == xi+2 for all i + 2 <= n\n\nGiven a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr. If one does not exist, return 0.\nA subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].",
        "examples": [
            "Input: arr = [1,2,3,4,5,6,7,8]\nOutput: 5\nExplanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].",
            "Input: arr = [1,3,7,11,12,14,18]\nOutput: 3\nExplanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18]."
        ],
        "constrains": "3 <= arr.length <= 1000\n1 <= arr[i] < arr[i + 1] <= 109",
        "release_time": 1667708738,
        "oracle_code": "class Solution {\npublic:\n  int f(int curr,int prev,vector<int>& nums,int n){\n\t\t\tint t=nums[curr]+nums[prev];\n\t\t\tint i=lower_bound(nums.begin(),nums.end(),t)-nums.begin();\n\t\t\tif(i<n && nums[i]==t) return 1+f(i,curr,nums,n);\n\t\t\treturn 1;\n\t\t}\n\n\t\tint lenLongestFibSubseq(vector<int>& nums) {\n\t\t\tint n=nums.size();\n\t\t\tint maxi=0;\n\t\t\tfor(int prev2=0;prev2<n;prev2++){\n\t\t\t\tfor(int prev1=prev2+1;prev1<n;prev1++){\n\t\t\t\t\tint temp=nums[prev1]+nums[prev2];\n\t\t\t\t\tint ind=lower_bound(nums.begin(),nums.end(),temp)-nums.begin();\n\t\t\t\t\tif(ind<n && nums[ind]==temp) maxi=max(maxi,2+f(ind,prev1,nums,n));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn maxi;\n\t\t}\n\t};",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n  int f(int curr,int prev,vector<int>& nums,int n){\\n\\t\\t\\tint t=nums[curr]+nums[prev];\\n\\t\\t\\tint i=lower_bound(nums.begin(),nums.end(),t)-nums.begin();\\n\\t\\t\\tif(i<n && nums[i]==t) return 1+f(i,curr,nums,n);\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\n\\t\\tint lenLongestFibSubseq(vector<int>& nums) {\\n\\t\\t\\tint n=nums.size();\\n\\t\\t\\tint maxi=0;\\n\\t\\t\\tfor(int prev2=0;prev2<n;prev2++){\\n\\t\\t\\t\\tfor(int prev1=prev2+1;prev1<n;prev1++){\\n\\t\\t\\t\\t\\tint temp=nums[prev1]+nums[prev2];\\n\\t\\t\\t\\t\\tint ind=lower_bound(nums.begin(),nums.end(),temp)-nums.begin();\\n\\t\\t\\t\\t\\tif(ind<n && nums[ind]==temp) maxi=max(maxi,2+f(ind,prev1,nums,n));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn maxi;\\n\\t\\t}\\n\\t};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n  int f(int curr,int prev,vector<int>& nums,int n){\n\t\t\tint t=nums[curr]+nums[prev];\n\t\t\tint i=del nums.begin(),nums.end(),t)-nums.begin();\n\t\t\tif(i<n && nums[i]==t) return 1+f(i,curr,nums,n);\n\t\t\treturn 1;\n\t\t}\n\n\t\tint lenLongestFibSubseq(vector<int>& nums) {\n\t\t\tint n=nums.size();\n\t\t\tint maxi=0;\n\t\t\tfor(int prev2=0;prev2<n;prev2++){\n\t\t\t\tfor(int prev1=prev2+1;prev1<n;prev1++){\n\t\t\t\t\tint temp=nums[prev1]+nums[prev2];\n\t\t\t\t\tint ind=lower_bound(nums.begin(),nums.end(),temp)-nums.begin();\n\t\t\t\t\tif(ind<n && nums[ind]==temp) maxi=max(maxi,2+f(ind,prev1,nums,n));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn maxi;\n\t\t}\n\t};\n",
        "explanations": "\n'del' is not recognized as a valid keyword or function in the cpp language.\n",
        "fixed_code": "\nclass Solution {\npublic:\n  int f(int curr,int prev,vector<int>& nums,int n){\n\t\t\tint t=nums[curr]+nums[prev];\n\t\t\tint i=lower_bound(nums.begin(),nums.end(),t)-nums.begin();\n\t\t\tif(i<n && nums[i]==t) return 1+f(i,curr,nums,n);\n\t\t\treturn 1;\n\t\t}\n\n\t\tint lenLongestFibSubseq(vector<int>& nums) {\n\t\t\tint n=nums.size();\n\t\t\tint maxi=0;\n\t\t\tfor(int prev2=0;prev2<n;prev2++){\n\t\t\t\tfor(int prev1=prev2+1;prev1<n;prev1++){\n\t\t\t\t\tint temp=nums[prev1]+nums[prev2];\n\t\t\t\t\tint ind=lower_bound(nums.begin(),nums.end(),temp)-nums.begin();\n\t\t\t\t\tif(ind<n && nums[ind]==temp) maxi=max(maxi,2+f(ind,prev1,nums,n));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn maxi;\n\t\t}\n\t};\n",
        "fixing_exp": "\nMistyped delete operator in function f was removed.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "1061 ms",
            "memory": 10284000,
            "question_id": "905",
            "elapsed_time": 1099,
            "compare_result": "111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701967813671,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 57,
            "total_testcases": 57,
            "runtime_percentile": 8.977300000000216,
            "status_memory": "10.3 MB",
            "memory_percentile": 98.9744,
            "pretty_lang": "C++",
            "submission_id": "1114499190",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "min-cost-climbing-stairs",
        "description": "You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.\nYou can either start from the step with index 0, or the step with index 1.\nReturn the minimum cost to reach the top of the floor.",
        "examples": [
            "Input: cost = [10,15,20]\nOutput: 15\nExplanation: You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15.",
            "Input: cost = [1,100,1,1,1,100,1,1,100,1]\nOutput: 6\nExplanation: You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6."
        ],
        "constrains": "2 <= cost.length <= 1000\n0 <= cost[i] <= 999",
        "release_time": 1690306963,
        "oracle_code": "class Solution {\npublic:\n    int minCostClimbingStairs(vector<int>& cost) {\n        int n = cost.size();\n\n        for(int i=2; i<n; i++){\n            cost[i] = min(cost[i-1],cost[i-2]) + cost[i];\n        }\n\n        return min(cost[n-1],cost[n-2]);\n    }\n};",
        "content": "\\n# Approach\\nDynamic Programming without using any extra memory. Modifying the given array itself.\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minCostClimbingStairs(vector<int>& cost) {\\n        int n = cost.size();\\n\\n        for(int i=2; i<n; i++){\\n            cost[i] = min(cost[i-1],cost[i-2]) + cost[i];\\n        }\\n\\n        return min(cost[n-1],cost[n-2]);\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int minCostClimbingStairs(vector<int>& cost) {\n        int n = len(cost);\n\n        for(int i=2; i<n; i++){\n            cost[i] = min(cost[i-1],cost[i-2]) + cost[i];\n        }\n\n        return min(cost[n-1],cost[n-2]);\n    }\n};\n",
        "explanations": "\nI replaced cost.size() with len(cost). 'len' isn't defined in C++, causing a syntax error.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int minCostClimbingStairs(vector<int>& cost) {\n        int n = cost.size();\n\n        for(int i=2; i<n; i++){\n            cost[i] = min(cost[i-1],cost[i-2]) + cost[i];\n        }\n\n        return min(cost[n-1],cost[n-2]);\n    }\n};\n",
        "fixing_exp": "\nReplaced len() with size() to correctly get the vector length.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "3 ms",
            "memory": 13872000,
            "question_id": "747",
            "elapsed_time": 18,
            "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701967843541,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 283,
            "total_testcases": 283,
            "runtime_percentile": 84.425,
            "status_memory": "13.9 MB",
            "memory_percentile": 94.13,
            "pretty_lang": "C++",
            "submission_id": "1114499587",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "check-if-point-is-reachable",
        "description": "There exists an infinitely large grid. You are currently at point (1, 1), and you need to reach the point (targetX, targetY) using a finite number of steps.\nIn one step, you can move from point (x, y) to any one of the following points:\n\n(x, y - x)\n(x - y, y)\n(2 * x, y)\n(x, 2 * y)\n\nGiven two integers targetX and targetY representing the X-coordinate and Y-coordinate of your final position, return true if you can reach the point from (1, 1) using some number of steps, and false otherwise.",
        "examples": [
            "Input: targetX = 6, targetY = 9\nOutput: false\nExplanation: It is impossible to reach (6,9) from (1,1) using any sequence of moves, so false is returned.",
            "Input: targetX = 4, targetY = 7\nOutput: true\nExplanation: You can follow the path (1,1) -> (1,2) -> (1,4) -> (1,8) -> (1,7) -> (2,7) -> (4,7)."
        ],
        "constrains": "1 <= targetX, targetY\u00a0<= 109",
        "release_time": 1674372109,
        "oracle_code": "class Solution {\npublic:\n    bool isReachable(int x, int y) {\n        while(!(x&1)){\n            x >>= 1;\n        }\n        while(!(y&1)){\n            y >>= 1;\n        }\n        return __gcd(x,y)==1;\n    }\n};",
        "content": "```\\nclass Solution {\\npublic:\\n    bool isReachable(int x, int y) {\\n        while(!(x&1)){\\n            x >>= 1;\\n        }\\n        while(!(y&1)){\\n            y >>= 1;\\n        }\\n        return __gcd(x,y)==1;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n    bool isReachable(int x, int y) {\n        while(!(x&1)){\n            x >>= 1;\n        }\n        while(!(y&1)){\n            y >>= 1;\n        }\n        return max(x,y)==1;\n    }\n};\n",
        "explanations": "\n__gcd is replaced by max, which doesn't ensure checking for greatest common divisor.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    bool isReachable(int x, int y) {\n        while(x%2 == 0){\n            x >>= 1;\n        }\n        while(y%2 == 0){\n            y >>= 1;\n        }\n        return max(x,y)==1;\n    }\n};\n",
        "fixing_exp": "\nThe bitwise 'and' operator was replaced with the modulo operator to correctly check for even numbers.\n",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 11,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "N/A",
            "memory": 6320000,
            "question_id": "2635",
            "elapsed_time": 13,
            "compare_result": "101101000000001010000000001000000001000010100010000100000100",
            "code_output": "false",
            "std_output": "",
            "last_testcase": "4\n7",
            "expected_output": "true",
            "task_finish_time": 1701967873003,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 13,
            "total_testcases": 60,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1114499935",
            "input_formatted": "4, 7",
            "input": "4\n7",
            "status_msg": "Wrong Answer",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "add-strings",
        "description": "Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.\nYou must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.",
        "examples": [
            "Input: num1 = \"11\", num2 = \"123\"\nOutput: \"134\"",
            "Input: num1 = \"456\", num2 = \"77\"\nOutput: \"533\"",
            "Input: num1 = \"0\", num2 = \"0\"\nOutput: \"0\""
        ],
        "constrains": "1 <= num1.length, num2.length <= 104\nnum1 and num2 consist of only digits.\nnum1 and num2 don't have any leading zeros except for the zero itself.",
        "release_time": 1688037697,
        "oracle_code": "class Solution {\npublic:\n    string addStrings(string a, string b) {\n        string ret = \"\" ;\n        int carry = 0, i = a.size() - 1, j = b.size() - 1;\n        while( i >= 0 || j >= 0 ){\n            int x = i >= 0 ? a[i--] - '0' : 0 ;\n            int y = j >= 0 ? b[j--] - '0' : 0 ;\n\n            int sm = x + y + carry ;\n            ret.push_back( '0' + (sm % 10) ) ;\n            carry = sm/10;\n        }\n        if(carry)\n            ret.push_back('0' + carry ) ;\n        \n        reverse( ret.begin(), ret.end() ) ;\n\n        return ret ;\n    }\n};",
        "content": "# Intuition\\nSimple solution will be to do the basice math, and simulate the digits from the back\\n\\n# Approach\\n- We\\'ll start with the ends of both strings, and in each iteration (till we\\'ve iterated all the strings), we\\'ll fetch the last digit from the $$nums1$$, $$nums2$$ if not available we\\'ll default to 0.\\n\\n- Then we\\'ll sum the digits and also add the carry from the last iteration,\\n\\n- Then we\\'ll push the sum modulo 10 to the answer string.\\n\\n- Also dont forget to update the carry variable.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addStrings(string a, string b) {\\n        string ret = \"\" ;\\n        int carry = 0, i = a.size() - 1, j = b.size() - 1;\\n        while( i >= 0 || j >= 0 ){\\n            int x = i >= 0 ? a[i--] - \\'0\\' : 0 ;\\n            int y = j >= 0 ? b[j--] - \\'0\\' : 0 ;\\n\\n            int sm = x + y + carry ;\\n            ret.push_back( \\'0\\' + (sm % 10) ) ;\\n            carry = sm/10;\\n        }\\n        if(carry)\\n            ret.push_back(\\'0\\' + carry ) ;\\n        \\n        reverse( ret.begin(), ret.end() ) ;\\n\\n        return ret ;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    str addStrings(string a, string b) {\n        str ret = \"\" ;\n        int carry = 0, i = a.size() - 1, j = b.size() - 1;\n        while( i >= 0 || j >= 0 ){\n            int x = i >= 0 ? a[i--] - '0' : 0 ;\n            int y = j >= 0 ? b[j--] - '0' : 0 ;\n\n            int sm = x + y + carry ;\n            ret.push_back( '0' + (sm % 10) ) ;\n            carry = sm/10;\n        }\n        if(carry)\n            ret.push_back('0' + carry ) ;\n        \n        reverse( ret.begin(), ret.end() ) ;\n\n        return ret ;\n    }\n};\n",
        "explanations": "\nstr type isn't defined in C++, it's a keyword in Python not C++.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    string addStrings(string a, string b) {\n        string ret = \"\" ;\n        int carry = 0, i = a.size() - 1, j = b.size() - 1;\n        while( i >= 0 || j >= 0 ){\n            int x = i >= 0 ? a[i--] - '0' : 0 ;\n            int y = j >= 0 ? b[j--] - '0' : 0 ;\n\n            int sm = x + y + carry ;\n            ret.push_back( '0' + (sm % 10) ) ;\n            carry = sm/10;\n        }\n        if(carry)\n            ret.push_back('0' + carry ) ;\n        \n        reverse( ret.begin(), ret.end() ) ;\n\n        return ret ;\n    }\n};\n",
        "fixing_exp": "\nChanged the undefined 'str' to 'string' which is the correct string data type in C++.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "5 ms",
            "memory": 6940000,
            "question_id": "415",
            "elapsed_time": 15,
            "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701967903020,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 317,
            "total_testcases": 317,
            "runtime_percentile": 56.0126,
            "status_memory": "6.9 MB",
            "memory_percentile": 80.4702,
            "pretty_lang": "C++",
            "submission_id": "1114500326",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "count-all-possible-routes",
        "description": "You are given an array of distinct positive integers locations where locations[i] represents the position of city i. You are also given integers start, finish and fuel representing the starting city, ending city, and the initial amount of fuel you have, respectively.\nAt each step, if you are at city i, you can pick any city j such that j != i and 0 <= j < locations.length and move to city j. Moving from city i to city j reduces the amount of fuel you have by |locations[i] - locations[j]|. Please notice that |x| denotes the absolute value of x.\nNotice that fuel cannot become negative at any point in time, and that you are allowed to visit any city more than once (including start and finish).\nReturn the count of all possible routes from start to finish. Since the answer may be too large, return it modulo 109 + 7.",
        "examples": [
            "Input: locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5\nOutput: 4\nExplanation: The following are all possible routes, each uses 5 units of fuel:\n1 -> 3\n1 -> 2 -> 3\n1 -> 4 -> 3\n1 -> 4 -> 2 -> 3",
            "Input: locations = [4,3,1], start = 1, finish = 0, fuel = 6\nOutput: 5\nExplanation: The following are all possible routes:\n1 -> 0, used fuel = 1\n1 -> 2 -> 0, used fuel = 5\n1 -> 2 -> 1 -> 0, used fuel = 5\n1 -> 0 -> 1 -> 0, used fuel = 3\n1 -> 0 -> 1 -> 0 -> 1 -> 0, used fuel = 5",
            "Input: locations = [5,2,1], start = 0, finish = 2, fuel = 3\nOutput: 0\nExplanation: It is impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel."
        ],
        "constrains": "2 <= locations.length <= 100\n1 <= locations[i] <= 109\nAll integers in locations are distinct.\n0 <= start, finish < locations.length\n1 <= fuel <= 200",
        "release_time": 1687678873,
        "oracle_code": "class Solution {\n    private:\n    int mod = 7+1e9;\npublic:\n    int countRoutes(vector<int>& locations, int start, int finish, int fuel) {\n        vector<vector<int>>dp(locations.size()+1, vector<int>(fuel+1, -1));\n        return solve(locations, start, finish, fuel, dp);\n    }\n\n    int solve(vector<int>& locations, int current, int& finish, int currentfuel, vector<vector<int>>& dp)\n    {\n        int ans = 0;\n        if(current == finish)\n        {\n            ans = 1;\n        }\n        if(currentfuel == 0)\n        {\n            return ans;\n        }\n        if(dp[current][currentfuel] != -1)\n        {\n            return dp[current][currentfuel];\n        }\n        for(int i = 0;i < locations.size(); i++)\n        {\n            if(i != current && (currentfuel - abs(locations[current]-locations[i])) >= 0)\n            {\n                ans = (ans + (solve(locations, i, finish, currentfuel-abs(locations[current]-locations[i]), dp))%mod)%mod;\n            }\n        }\n        return dp[current][currentfuel] = ans%mod;\n    }\n};",
        "content": "# Intuition\\nWe have to count all possible routes and from any city we can go to all other cities so intution is to apply dynamic programming.\\n\\n# Approach\\nWe\\'ll maintain two changing variable at any recursion call. One will be the current city we are in and another will be current fuel that we have. We\\'ll intialize a variable ans which will be 0 if the current city is not the finish city. However if the current city is finish city then we initialize the ans variable to 1 as that path should be added to answer. Then  we\\'ll run a loop from city 0 to city 1 and if the city i is not equal to current city and if current fuel is more than the fuel needed to travel between those two cities then we\\'ll make a recursion call and add that answer from recursion call to the ans variable. In the end we\\'ll return ans variable.\\n\\nHowever we\\'ll have to memoize this solution because it will lead to repetitive recursion calls. For example we\\'ll be able to reach a particular city with multiple paths and be left with same fuel. So this will lead to repetitive calls. COnsider this array [1,2,3,5] and fuel = 10 and start city as 0. SO we\\'ll be able to reach city 2 via city 0->1->2 and left with 8 unit fuel. We can also reach city 2 via 0->2 and left with fuel 8. THis will lead to repetitive calls.\\n\\n\\n# Code\\n```\\nclass Solution {\\n    private:\\n    int mod = 7+1e9;\\npublic:\\n    int countRoutes(vector<int>& locations, int start, int finish, int fuel) {\\n        vector<vector<int>>dp(locations.size()+1, vector<int>(fuel+1, -1));\\n        return solve(locations, start, finish, fuel, dp);\\n    }\\n\\n    int solve(vector<int>& locations, int current, int& finish, int currentfuel, vector<vector<int>>& dp)\\n    {\\n        int ans = 0;\\n        if(current == finish)\\n        {\\n            ans = 1;\\n        }\\n        if(currentfuel == 0)\\n        {\\n            return ans;\\n        }\\n        if(dp[current][currentfuel] != -1)\\n        {\\n            return dp[current][currentfuel];\\n        }\\n        for(int i = 0;i < locations.size(); i++)\\n        {\\n            if(i != current && (currentfuel - abs(locations[current]-locations[i])) >= 0)\\n            {\\n                ans = (ans + (solve(locations, i, finish, currentfuel-abs(locations[current]-locations[i]), dp))%mod)%mod;\\n            }\\n        }\\n        return dp[current][currentfuel] = ans%mod;\\n    }\\n};\\n```\\n\\n**Do upvote if you understood it !\\uD83D\\uDE00**",
        "level": "hard",
        "buggy_code": "\nclass Solution {\n    private:\n    var mod = 7+1e9;\npublic:\n    int countRoutes(vector<int>& locations, int start, int finish, int fuel) {\n        vector<vector<int>>dp(locations.size()+1, vector<int>(fuel+1, -1));\n        return solve(locations, start, finish, fuel, dp);\n    }\n\n    int solve(vector<int>& locations, int current, int& finish, int currentfuel, vector<vector<int>>& dp)\n    {\n        int ans = 0;\n        if(current == finish)\n        {\n            ans = 1;\n        }\n        if(currentfuel == 0)\n        {\n            return ans;\n        }\n        if(dp[current][currentfuel] != -1)\n        {\n            return dp[current][currentfuel];\n        }\n        for(int i = 0;i < locations.size(); i++)\n        {\n            if(i != current && (currentfuel - abs(locations[current]-locations[i])) >= 0)\n            {\n                ans = (ans + (solve(locations, i, finish,currentfuel-abs(locations[current]-locations[i]), dp))%mod)%mod;\n            }\n        }\n        return dp[current][currentfuel] = ans%mod;\n    }\n};\n",
        "explanations": "\nvar is not a keyword in C++, it's usually used in JavaScript.\n",
        "fixed_code": "\nclass Solution {\n    private:\n    long long mod = 7+1e9;\npublic:\n    int countRoutes(vector<int>& locations, int start, int finish, int fuel) {\n        vector<vector<long long>>dp(locations.size()+1, vector<long long>(fuel+1, -1));\n        return solve(locations, start, finish, fuel, dp) % mod;\n    }\n\n    long long solve(vector<int>& locations, int current, int& finish, int currentfuel, vector<vector<long long>>& dp)\n    {\n        long long ans = 0;\n        if(current == finish)\n        {\n            ans = 1;\n        }\n        if(currentfuel == 0)\n        {\n            return ans;\n        }\n        if(dp[current][currentfuel] != -1)\n        {\n            return dp[current][currentfuel];\n        }\n        for(int i = 0;i < locations.size(); i++)\n        {\n            if(i != current && (currentfuel - abs(locations[current]-locations[i])) >= 0)\n            {\n                ans = (ans + solve(locations, i, finish, currentfuel-abs(locations[current]-locations[i]), dp)) % mod;\n            }\n        }\n        return dp[current][currentfuel] = ans;\n    }\n};\n",
        "fixing_exp": "\nChanged 'var' to 'long long' for 'mod' and 'ans', as 'var' is not a keyword in C++. Also, adjusted the return type of 'solve' function.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "161 ms",
            "memory": 15144000,
            "question_id": "1680",
            "elapsed_time": 179,
            "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701967947150,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 109,
            "total_testcases": 109,
            "runtime_percentile": 37.58999999999979,
            "status_memory": "15.1 MB",
            "memory_percentile": 14.65739999999998,
            "pretty_lang": "C++",
            "submission_id": "1114500873",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
        "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.\nFind the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.\nNote:\n\nYou may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\nThe transaction fee is only charged once for each stock purchase and sale.",
        "examples": [
            "Input: prices = [1,3,2,8,4,9], fee = 2\nOutput: 8\nExplanation: The maximum profit can be achieved by:\n- Buying at prices[0] = 1\n- Selling at prices[3] = 8\n- Buying at prices[4] = 4\n- Selling at prices[5] = 9\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.",
            "Input: prices = [1,3,7,5,10,3], fee = 3\nOutput: 6"
        ],
        "constrains": "1 <= prices.length <= 5 * 104\n1 <= prices[i] < 5 * 104\n0 <= fee < 5 * 104",
        "release_time": 1687422999,
        "oracle_code": "class Solution {\npublic:\n    int maxProfit(vector<int>& prices, int fee) {\n        int n = prices.size();\n        if (n <= 1) return 0;\n        int buy = -prices[0];\n        int sell = 0;\n        for (int i = 1; i < n; i++) {\n            int prevBuy = buy;\n            buy = max(buy, sell - prices[i]);\n            sell = max(sell, prevBuy + prices[i] - fee);\n        }\n        return sell;\n    }\n};",
        "content": "# Intuition\\nTo solve this problem, we can use a dynamic programming approach. \\n\\n# Approach\\nThe idea is to maintain two variables, buy and sell, which represent the maximum profit you can achieve if you have bought or sold the stock, respectively. Initially, buy is set to the negative of the first price, assuming we buy the stock on the first day. sell is set to zero because we haven\\'t sold any stock yet.\\n\\nThen, for each day starting from the second day, we update buy and sell as follows:\\n\\n- Update buy by taking the maximum value between the previous buy and the difference between sell and the current price (representing the profit we would make if we bought the stock on this day).\\n- Update sell by taking the maximum value between the previous sell and the sum of the previous buy and the current price minus the transaction fee (representing the profit we would make if we sold the stock on this day).\\n\\nFinally, the maximum profit we can achieve is stored in the sell variable, so we return its value.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxProfit(vector<int>& prices, int fee) {\\n        int n = prices.size();\\n        if (n <= 1) return 0;\\n        int buy = -prices[0];\\n        int sell = 0;\\n        for (int i = 1; i < n; i++) {\\n            int prevBuy = buy;\\n            buy = max(buy, sell - prices[i]);\\n            sell = max(sell, prevBuy + prices[i] - fee);\\n        }\\n        return sell;\\n    }\\n};\\n\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices, int fee) {\n        int n = prices.length;\n        if (n <= 1) return 0;\n        int buy = -prices[0];\n        int sell = 0;\n        for (int i = 1; i < n; i++) {\n            int prevBuy = buy;\n            buy = max(buy, sell - prices[i]);\n            sell = max(sell, prevBuy + prices[i] - fee);\n        }\n        return sell;\n    }\n};\n",
        "explanations": "\nThe bug is the use of 'length' which is not a defined member of vector in C++.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices, int fee) {\n        int n = prices.size();\n        if (n <= 1) return 0;\n        int buy = -prices[0];\n        int sell = 0;\n        for (int i = 1; i < n; i++) {\n            int prevBuy = buy;\n            buy = max(buy, sell - prices[i]);\n            sell = max(sell, prevBuy + prices[i] - fee);\n        }\n        return sell;\n    }\n};\n",
        "fixing_exp": "\nReplace .length with .size() for vector length.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "78 ms",
            "memory": 55488000,
            "question_id": "714",
            "elapsed_time": 110,
            "compare_result": "11111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701967977931,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 44,
            "total_testcases": 44,
            "runtime_percentile": 80.97890000000004,
            "status_memory": "55.5 MB",
            "memory_percentile": 70.19630000000001,
            "pretty_lang": "C++",
            "submission_id": "1114501245",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "maximize-win-from-two-segments",
        "description": "There are some prizes on the X-axis. You are given an integer array prizePositions that is sorted in non-decreasing order, where prizePositions[i] is the position of the ith prize. There could be different prizes at the same position on the line. You are also given an integer k.\nYou are allowed to select two segments with integer endpoints. The length of each segment must be k. You will collect all prizes whose position falls within at least one of the two selected segments (including the endpoints of the segments). The two selected segments may intersect.\n\nFor example if k = 2, you can choose segments [1, 3] and [2, 4], and you will win any prize i that satisfies 1 <= prizePositions[i] <= 3 or 2 <= prizePositions[i] <= 4.\n\nReturn the maximum number of prizes you can win if you choose the two segments optimally.",
        "examples": [
            "Input: prizePositions = [1,1,2,2,3,3,5], k = 2\nOutput: 7\nExplanation: In this example, you can win all 7 prizes by selecting two segments [1, 3] and [3, 5].",
            "Input: prizePositions = [1,2,3,4], k = 0\nOutput: 2\nExplanation: For this example, one choice for the segments is [3, 3] and [4, 4], and you will be able to get 2 prizes."
        ],
        "constrains": "1 <= prizePositions.length <= 105\n1 <= prizePositions[i] <= 109\n0 <= k <= 109 \nprizePositions is sorted in non-decreasing order.",
        "release_time": 1675528605,
        "oracle_code": "class Solution \n{\npublic:\n    int maximizeWin(vector<int>& a, int k) \n    {\n        int n = a.size();\n        vector<pair<int, int>> b(n), s(n);\n        for (int i = 0; i < n; ++i)\n        {\n            int target = a[i] + k;\n            int idx = max(0, (int)(upper_bound(a.begin(), a.end(), target) - a.begin()) - 1);\n            b[i] = {i, idx};\n        }\n        \n        int mx = 0;\n        pair<int, int> curr;\n        for (int i = n - 1; i >= 0; --i)\n        {\n            if (b[i].second - b[i].first + 1 > mx)\n            {\n                mx = b[i].second - b[i].first + 1;\n                curr = {b[i].first, b[i].second}; \n            }\n            \n            s[i] = curr;\n        }\n        \n        int res = 1;\n        for (int i = 0; i < n; ++i)\n        {\n            int j = b[i].second;\n            \n            res = max(res, b[i].second - b[i].first + 1 + s[j].second - s[j].first + 1 - (s[j].first == b[i].second));\n        }\n        \n        return res;\n    }\n};",
        "content": "# Time Complexity: $$O(nlog(n))$$\\n\\n```\\nclass Solution \\n{\\npublic:\\n    int maximizeWin(vector<int>& a, int k) \\n    {\\n        int n = a.size();\\n        vector<pair<int, int>> b(n), s(n);\\n        for (int i = 0; i < n; ++i)\\n        {\\n            int target = a[i] + k;\\n            int idx = max(0, (int)(upper_bound(a.begin(), a.end(), target) - a.begin()) - 1);\\n            b[i] = {i, idx};\\n        }\\n        \\n        int mx = 0;\\n        pair<int, int> curr;\\n        for (int i = n - 1; i >= 0; --i)\\n        {\\n            if (b[i].second - b[i].first + 1 > mx)\\n            {\\n                mx = b[i].second - b[i].first + 1;\\n                curr = {b[i].first, b[i].second}; \\n            }\\n            \\n            s[i] = curr;\\n        }\\n        \\n        int res = 1;\\n        for (int i = 0; i < n; ++i)\\n        {\\n            int j = b[i].second;\\n            \\n            res = max(res, b[i].second - b[i].first + 1 + s[j].second - s[j].first + 1 - (s[j].first == b[i].second));\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution \n{\npublic:\n    int maximizeWin(vector<int>& a, int k) \n    {\n        int n = a.size();\n        vector<pair<int, int>> b(n), s(n);\n        for (int i = 0; i < n; ++i)\n        {\n            int target = a[i] + k;\n            int idx = max(0, (int)(upper_bound(a.begin(), a.end(), target) - a.begin()) - 1);\n            delineate i, idx;\n            b[i] = {i, idx};\n        }\n        \n        int mx = 0;\n        pair<int, int> curr;\n        for (int i = n - 1; i >= 0; --i)\n        {\n            if (b[i].second - b[i].first + 1 > mx)\n            {\n                mx = b[i].second - b[i].first + 1;\n                curr = {b[i].first, b[i].second}; \n            }\n            \n            s[i] = curr;\n        }\n        \n        int res = 1;\n        for (int i = 0; i < n; ++i)\n        {\n            int j = b[i].second;\n            \n            res = max(res, b[i].second - b[i].first + 1 + s[j].second - s[j].first + 1 - (s[j].first == b[i].second));\n        }\n        \n        return res;\n    }\n};\n",
        "explanations": "\n\"delineate\" is not a keyword in C++ which makes the compiler throw an error.\n",
        "fixed_code": "\n#include<algorithm>\n#include<vector>\nusing namespace std;\n\nclass Solution \n{\npublic:\n    int maximizeWin(vector<int>& a, int k) \n    {\n        int n = a.size();\n        vector<pair<int, int>> b(n), s(n);\n        for (int i = 0; i < n; ++i)\n        {\n            int target = a[i] + k;\n            int idx = max(0, (int)(upper_bound(a.begin(), a.end(), target) - a.begin()) - 1);\n            b[i] = {i, idx};\n        }\n        \n        int mx = 0;\n        pair<int, int> curr;\n        for (int i = n - 1; i >= 0; --i)\n        {\n            if (b[i].second - b[i].first + 1 > mx)\n            {\n                mx = b[i].second - b[i].first + 1;\n                curr = {b[i].first, b[i].second}; \n            }\n            \n            s[i] = curr;\n        }\n        \n        int res = 1;\n        for (int i = 0; i < n; ++i)\n        {\n            int j = b[i].second;\n            \n            res = max(res, b[i].second - b[i].first + 1 + s[j].second - s[j].first + 1 - (s[j].first == b[i].second));\n        }\n        \n        return res;\n    }\n};\n",
        "fixing_exp": "\nRemoved unnecessary \"delineate i, idx;\".\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "136 ms",
            "memory": 63776000,
            "question_id": "2673",
            "elapsed_time": 162,
            "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701968018213,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 72,
            "total_testcases": 72,
            "runtime_percentile": 34.67350000000003,
            "status_memory": "63.8 MB",
            "memory_percentile": 35.17610000000004,
            "pretty_lang": "C++",
            "submission_id": "1114501731",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "frequency-tracker",
        "description": "Design a data structure that keeps track of the values in it and answers some queries regarding their frequencies.\nImplement the FrequencyTracker class.\n\nFrequencyTracker(): Initializes the FrequencyTracker object with an empty array initially.\nvoid add(int number): Adds number to the data structure.\nvoid deleteOne(int number): Deletes one occurrence of number from the data structure. The data structure may not contain number, and in this case nothing is deleted.\nbool hasFrequency(int frequency): Returns true if there is a number in the data structure that occurs frequency number of times, otherwise, it returns false.",
        "examples": [
            "Input\n[\"FrequencyTracker\", \"add\", \"add\", \"hasFrequency\"]\n[[], [3], [3], [2]]\nOutput\n[null, null, null, true]\n\nExplanation\nFrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.add(3); // The data structure now contains [3]\nfrequencyTracker.add(3); // The data structure now contains [3, 3]\nfrequencyTracker.hasFrequency(2); // Returns true, because 3 occurs twice",
            "Input\n[\"FrequencyTracker\", \"add\", \"deleteOne\", \"hasFrequency\"]\n[[], [1], [1], [1]]\nOutput\n[null, null, null, false]\n\nExplanation\nFrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.add(1); // The data structure now contains [1]\nfrequencyTracker.deleteOne(1); // The data structure becomes empty []\nfrequencyTracker.hasFrequency(1); // Returns false, because the data structure is empty",
            "Input\n[\"FrequencyTracker\", \"hasFrequency\", \"add\", \"hasFrequency\"]\n[[], [2], [3], [1]]\nOutput\n[null, false, null, true]\n\nExplanation\nFrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.hasFrequency(2); // Returns false, because the data structure is empty\nfrequencyTracker.add(3); // The data structure now contains [3]\nfrequencyTracker.hasFrequency(1); // Returns true, because 3 occurs once"
        ],
        "constrains": "1 <= number <= 105\n1 <= frequency <= 105\nAt most, 2 *\u00a0105\u00a0calls will be made to add, deleteOne, and hasFrequency\u00a0in total.",
        "release_time": 1683432600,
        "oracle_code": "class FrequencyTracker {\npublic:\n    unordered_map<int,int> x,y;\n    void add(int number) {\n        x[number]++;\n        if(x[number]!=1) y[x[number]-1]--;\n        y[x[number]]++;\n    }\n    void deleteOne(int number) {\n        if(x[number]!=0){\n            x[number]--;\n            y[x[number]+1]--;\n            y[x[number]]++;\n        }\n    }\n    bool hasFrequency(int frequency) {\n        if(y[frequency]!=0) return true;\n        return false;\n    }\n};",
        "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass FrequencyTracker {\\npublic:\\n    unordered_map<int,int> x,y;\\n    void add(int number) {\\n        x[number]++;\\n        if(x[number]!=1) y[x[number]-1]--;\\n        y[x[number]]++;\\n    }\\n    void deleteOne(int number) {\\n        if(x[number]!=0){\\n            x[number]--;\\n            y[x[number]+1]--;\\n            y[x[number]]++;\\n        }\\n    }\\n    bool hasFrequency(int frequency) {\\n        if(y[frequency]!=0) return true;\\n        return false;\\n    }\\n};",
        "level": "medium",
        "buggy_code": "\nclass FrequencyTracker {\npublic:\n    unordered_map<int,int> x,y;\n    def add(number): \n        x[number]++;\n        if(x[number]!=1) y[x[number]-1]--;\n        y[x[number]]++;\n    def deleteOne(number): \n        if(x[number]!=0){\n            x[number]--;\n            y[x[number]+1]--;\n            y[x[number]]++;\n        }\n    def hasFrequency(frequency): \n        if(y[frequency]!=0) return true;\n        return false;\n};\n",
        "explanations": "\nThe bug is the use of 'def' keyword from Python to define methods, unrecognizable to C++.\n",
        "fixed_code": "\n#include <unordered_map>\n\nclass FrequencyTracker {\npublic:\n    std::unordered_map<int,int> x, y;\n\n    void add(int number) { \n        ++x[number];\n        if (x[number] != 1) \n            --y[x[number] - 1];\n        ++y[x[number]];\n    }\n\n    void deleteOne(int number) { \n        if (x[number] != 0) {\n            --x[number];\n            if (y[x[number] + 1] != 0) \n                --y[x[number] + 1];\n            ++y[x[number]];\n        }\n    }\n\n    bool hasFrequency(int frequency) { \n        if (y[frequency] != 0) \n            return true;\n        return false;\n    }\n};\n",
        "fixing_exp": "\nThe modifications are:\n1. Corrected method declarations by including return types.\n2. Added checks to prevent accessing map elements with non-existent keys.\n3. Included required headers. \n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "394 ms",
            "memory": 198128000,
            "question_id": "2778",
            "elapsed_time": 555,
            "compare_result
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701968048845,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 1118,
            "total_testcases": 1118,
            "runtime_percentile": 76.31599999999996,
            "status_memory": "198.1 MB",
            "memory_percentile": 63.53389999999999,
            "pretty_lang": "C++",
            "submission_id": "1114502063",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "kth-largest-element-in-a-stream",
        "description": "Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.\nImplement KthLargest class:\n\nKthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.\nint add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.",
        "examples": [
            "Input\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\nOutput\n[null, 4, 5, 5, 8, 8]\n\nExplanation\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8"
        ],
        "constrains": "1 <= k <= 104\n0 <= nums.length <= 104\n-104 <= nums[i] <= 104\n-104 <= val <= 104\nAt most 104 calls will be made to add.\nIt is guaranteed that there will be at least k elements in the array when you search for the kth element.",
        "release_time": 1684824347,
        "oracle_code": "class KthLargest {\npublic:\n    priority_queue<int,vector<int>,greater<int>> pq;\n    int position;\n    KthLargest(int k, vector<int>& nums) {\n        position=k;\n        for(int i=0; i<nums.size(); i++){\n            if(pq.size()<k){\n                pq.push(nums[i]);\n            }\n            else if(pq.top()<nums[i]){\n                pq.pop();\n                pq.push(nums[i]);\n            }\n        }\n    }\n    \n    int add(int val) {\n        if(pq.size()<position){\n            pq.push(val);\n        }\n        else if(pq.top()<val){\n            pq.pop();\n            pq.push(val);\n        }\n        return pq.top();\n    }\n};\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest* obj = new KthLargest(k, nums);\n * int param_1 = obj->add(val);\n */",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass KthLargest {\\npublic:\\n    priority_queue<int,vector<int>,greater<int>> pq;\\n    int position;\\n    KthLargest(int k, vector<int>& nums) {\\n        position=k;\\n        for(int i=0; i<nums.size(); i++){\\n            if(pq.size()<k){\\n                pq.push(nums[i]);\\n            }\\n            else if(pq.top()<nums[i]){\\n                pq.pop();\\n                pq.push(nums[i]);\\n            }\\n        }\\n    }\\n    \\n    int add(int val) {\\n        if(pq.size()<position){\\n            pq.push(val);\\n        }\\n        else if(pq.top()<val){\\n            pq.pop();\\n            pq.push(val);\\n        }\\n        return pq.top();\\n    }\\n};\\n\\n/**\\n * Your KthLargest object will be instantiated and called as such:\\n * KthLargest* obj = new KthLargest(k, nums);\\n * int param_1 = obj->add(val);\\n */\\n```",
        "level": "easy",
        "buggy_code": "\nclass KthLargest {\npublic:\n    priority_queue<int,vector<int>,greater<int>> pq;\n    int position;\n    KthLargest(int k, vector<int>& nums) {\n        position = k;\n        for(int i = 0; i < nums.size(); i++){\n            if(pq.size() < k){\n                pq.push(nums[i]);\n            }\n            else if(pq.peek() < nums[i]){\n                pq.pop();\n                pq.push(nums[i]);\n            }\n        }\n    }\n    \n    int add(int val) {\n        if(pq.size() < position){\n            pq.push(val);\n        }\n        else if(pq.peek() < val){\n            pq.pop();\n            pq.push(val);\n        }\n        return pq.peek();\n    }\n};\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest* obj = new KthLargest(k, nums);\n * int param_1 = obj->add(val);\n */\n",
        "explanations": "\n'peek' is not a valid method in the priority_queue class in C++, causing compilation errors.\n",
        "fixed_code": "\nclass KthLargest {\npublic:\n    priority_queue<int,vector<int>,greater<int>> pq;\n    int position;\n    KthLargest(int k, vector<int>& nums) {\n        position = k;\n        for(int i = 0; i < nums.size(); i++){\n            if(pq.size() < k){\n                pq.push(nums[i]);\n            }\n            else if(pq.top() < nums[i]){\n                pq.pop();\n                pq.push(nums[i]);\n            }\n        }\n    }\n    \n    int add(int val) {\n        if(pq.size() < position){\n            pq.push(val);\n        }\n        else if(pq.top() < val){\n            pq.pop();\n            pq.push(val);\n        }\n        return pq.top();\n    }\n};\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest* obj = new KthLargest(k, nums);\n * int param_1 = obj->add(val);\n */\n",
        "fixing_exp": "\nReplaced non-existing function pq.peek() with pq.top() to get top element from priority queue.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "19 ms",
            "memory": 20228000,
            "question_id": "789",
            "elapsed_time": 50,
            "compare_result": "1111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701968083689,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 10,
            "total_testcases": 10,
            "runtime_percentile": 97.272,
            "status_memory": "20.2 MB",
            "memory_percentile": 45.102599999999995,
            "pretty_lang": "C++",
            "submission_id": "1114502503",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "tallest-billboard",
        "description": "You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height.\nYou are given a collection of rods that can be welded together. For example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6.\nReturn the largest possible height of your billboard installation. If you cannot support the billboard, return 0.",
        "examples": [
            "Input: rods = [1,2,3,6]\nOutput: 6\nExplanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.",
            "Input: rods = [1,2,3,4,5,6]\nOutput: 10\nExplanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.",
            "Input: rods = [1,2]\nOutput: 0\nExplanation: The billboard cannot be supported, so we return 0."
        ],
        "constrains": "1 <= rods.length <= 20\n1 <= rods[i] <= 1000\nsum(rods[i]) <= 5000",
        "release_time": 1687588495,
        "oracle_code": "class Solution {\npublic:\n\n    int build_board(vector<int> &rods, int balance,int i,vector<vector<int>> &memo)\n    {\n        if(i>=rods.size() && balance==0)\n            return 0;\n        if(i>=rods.size() && balance!=0)\n            return INT_MIN;\n\n        if(memo[i][balance+5000]!=-1)\n            return memo[i][balance+5000];\n        int left= build_board(rods,balance+rods[i],i+1,memo);\n        int right= build_board(rods,balance-rods[i],i+1,memo);\n\n        int ans= rods[i]+max(left,right);\n\n        int skip= build_board(rods,balance,i+1,memo);\n\n        ans= max(ans,skip);\n\n        memo[i][balance+5000]=ans;\n        return ans;\n\n    }\n\n    int tallestBillboard(vector<int>& rods) {\n        \n        vector<vector<int>> memo(rods.size(),vector<int>(10001,-1));\n        int ans= build_board(rods,0,0,memo);\n\n        if(ans<=0)\n            return 0;\n        else\n            return ans/2;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nJust as any dp problem where we have to select the item or leave it, same idea is being used here.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFor any given rod we have 3 optins to add it to the right leg or left leg or leave the rod. Now for the states of the dp one has to be the i that will iterate through the rods array. And if we maintain two additional states for left and the right leg then a total of 3 states was giving a memory limit exceed(in my case).\\n\\nTo reduce the a state, I used a balance state that will denote the difference between the legs\\' height. If we add the ith rod in the right leg then we increase the balance by rod[i] and if we add it to the left leg then we decerase the balance by rod[i], remains unchanged if we choose to skip the rod. \\n\\n**Balance ==0 will denote both legs are of same height, balance>0 means right leg is longer ans balance<0 means left is longer.**\\n\\n**Now, sum(rods[i])<=5000 (as given). Then our balance could range from -5000 to 5000. So in the memo table I am shifting the balance by 5000 to handle the negative indixes.**\\n\\n  \\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\n    int build_board(vector<int> &rods, int balance,int i,vector<vector<int>> &memo)\\n    {\\n        if(i>=rods.size() && balance==0)\\n            return 0;\\n        if(i>=rods.size() && balance!=0)\\n            return INT_MIN;\\n\\n        if(memo[i][balance+5000]!=-1)\\n            return memo[i][balance+5000];\\n        int left= build_board(rods,balance+rods[i],i+1,memo);\\n        int right= build_board(rods,balance-rods[i],i+1,memo);\\n\\n        int ans= rods[i]+max(left,right);\\n\\n        int skip= build_board(rods,balance,i+1,memo);\\n\\n        ans= max(ans,skip);\\n\\n        memo[i][balance+5000]=ans;\\n        return ans;\\n\\n    }\\n\\n    int tallestBillboard(vector<int>& rods) {\\n        \\n        vector<vector<int>> memo(rods.size(),vector<int>(10001,-1));\\n        int ans= build_board(rods,0,0,memo);\\n\\n        if(ans<=0)\\n            return 0;\\n        else\\n            return ans/2;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n\n    def build_board(vector<int> &rods, int balance,int i,vector<vector<int>> &memo)\n    {\n        if(i>=rods.size() && balance==0)\n            return 0;\n        if(i>=rods.size() && balance!=0)\n            return INT_MIN;\n\n        if(memo[i][balance+5000]!=-1)\n            return memo[i][balance+5000];\n        int left= build_board(rods,balance+rods[i],i+1,memo);\n        int right= build_board(rods,balance-rods[i],i+1,memo);\n\n        int ans= rods[i]+max(left,right);\n\n        int skip= build_board(rods,balance,i+1,memo);\n\n        ans= max(ans,skip);\n\n        memo[i][balance+5000]=ans;\n        return ans;\n\n    }\n\n    int tallestBillboard(vector<int>& rods) {\n        \n        vector<vector<int>> memo(rods.size(),vector<int>(10001,-1));\n        int ans= build_board(rods,0,0,memo);\n\n        if(ans<=0)\n            return 0;\n        else\n            return ans/2;\n    }\n};\n",
        "explanations": "\nThe \"def\" keyword used in the function declaration is not a valid C++ keyword.\n",
        "fixed_code": "\nclass Solution {\npublic:\n\n    int build_board(vector<int> &rods, int balance,int i,vector<vector<int>> &memo)\n    {\n        if(i>=rods.size() && balance==0)\n            return 0;\n        if(i>=rods.size() && balance!=0)\n            return INT_MIN;\n\n        if(memo[i][balance+5000]!=-1)\n            return memo[i][balance+5000];\n        int left= build_board(rods,balance+rods[i],i+1,memo);\n        int right= build_board(rods,balance-rods[i],i+1,memo);\n\n        int ans= rods[i]+max(left,right);\n\n        int skip= build_board(rods,balance,i+1,memo);\n\n        ans= max(ans,skip);\n\n        memo[i][balance+5000]=ans;\n        return ans;\n\n    }\n\n    int tallestBillboard(vector<int>& rods) {\n        \n        vector<vector<int>> memo(rods.size(),vector<int>(10001,-1));\n        int ans= build_board(rods,0,0,memo);\n\n        if(ans<=0)\n            return 0;\n        else\n            return ans/2;\n    }\n};\n",
        "fixing_exp": "\nThe method build_board should return type int not def which was a Python statement.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "74 ms",
            "memory": 73164000,
            "question_id": "993",
            "elapsed_time": 100,
            "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701968112871,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 80,
            "total_testcases": 80,
            "runtime_percentile": 56.55479999999994,
            "status_memory": "73.2 MB",
            "memory_percentile": 44.813399999999874,
            "pretty_lang": "C++",
            "submission_id": "1114502846",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "implement-stack-using-queues",
        "description": "Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).\nImplement the MyStack class:\n\nvoid push(int x) Pushes element x to the top of the stack.\nint pop() Removes the element on the top of the stack and returns it.\nint top() Returns the element on the top of the stack.\nboolean empty() Returns true if the stack is empty, false otherwise.\n\nNotes:\n\nYou must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.\nDepending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.",
        "examples": [
            "Input\n[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 2, 2, false]\n\nExplanation\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False"
        ],
        "constrains": "1 <= x <= 9\nAt most 100 calls will be made to push, pop, top, and empty.\nAll the calls to pop and top are valid.\n\n\u00a0\nFollow-up: Can you implement the stack using only one queue?",
        "release_time": 1691589248,
        "oracle_code": "class MyStack {\npublic:\n queue<int> q;\n    MyStack() {\n\n    }\n    \n    void push(int x) {\n        q.push(x);\n        for(int i=0; i<q.size()-1; i++){\n            q.push(q.front());\n            q.pop();\n        }\n    }\n    \n    int pop() {\n       int a= q.front();\n       q.pop();\n       return a;\n           }\n    \n    int top() {\n      return q.front();\n    }\n    \n    bool empty() {\n        return q.empty();\n    }\n};",
        "content": "\\n# Code\\n```\\nclass MyStack {\\npublic:\\n queue<int> q;\\n    MyStack() {\\n\\n    }\\n    \\n    void push(int x) {\\n        q.push(x);\\n        for(int i=0; i<q.size()-1; i++){\\n            q.push(q.front());\\n            q.pop();\\n        }\\n    }\\n    \\n    int pop() {\\n       int a= q.front();\\n       q.pop();\\n       return a;\\n           }\\n    \\n    int top() {\\n      return q.front();\\n    }\\n    \\n    bool empty() {\\n        return q.empty();\\n    }\\n};\\n\\n```",
        "level": "easy",
        "buggy_code": "\nclass MyStack {\npublic:\n queue<int> q;\n    MyStack() {\n\n    }\n    \n    void add(int x) {  \n        q.push(x);\n        for(int i=0; i<q.size()-1; i++){\n            q.push(q.front());\n            q.pop();\n        }\n    }\n    \n    int pop() {\n       int a= q.front();\n       q.pop();\n       return a;\n           }\n    \n    int top() {\n      return q.front();\n    }\n    \n    bool empty() {\n        return q.empty();\n    }\n};\n",
        "explanations": "\nThe bug is changing method name from push to add which is not a defined method in queue.\n",
        "fixed_code": "\nclass MyStack {\npublic:\n queue<int> q1, q2;\n    MyStack() {\n\n    }\n    \n    void add(int x) {  \n        q1.push(x);\n        while(!q1.empty()) {\n            q2.push(q1.front());\n            q1.pop();\n        }\n        swap(q1, q2);\n    }\n    \n    int pop() {\n        if(q1.empty()) {\n            return -1; // or throw an exception\n        }\n        int a= q1.front();\n        q1.pop();\n        return a;\n    }\n    \n    int top() {\n        if(q1.empty()) {\n            return -1; // or throw an exception\n        }\n        return q1.front();\n    }\n    \n    bool empty() {\n        return q1.empty();\n    }\n};\n",
        "fixing_exp": "\nIncluded edge handling case when queue is empty in pop and top function, switched queue handling logic in add function.\n",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 20,
            "lang": "cpp",
            "run_success": false,
            "compile_error": "Line 72: Char 18: error: no member named 'push' in 'MyStack'",
            "full_compile_error": "Line 72: Char 18: error: no member named 'push' in 'MyStack'\n            obj->push(\n            ~~~  ^\n1 error generated.",
            "status_runtime": "N/A",
            "memory": 0,
            "question_id": "225",
            "task_finish_time": 1701968145591,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": null,
            "total_testcases": null,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1114503199",
            "status_msg": "Compile Error",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "range-sum-of-bst",
        "description": "Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].",
        "examples": [
            "Input: root = [10,5,15,3,7,null,18], low = 7, high = 15\nOutput: 32\nExplanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.",
            "Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10\nOutput: 23\nExplanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23."
        ],
        "constrains": "The number of nodes in the tree is in the range [1, 2 * 104].\n1 <= Node.val <= 105\n1 <= low <= high <= 105\nAll Node.val are unique.",
        "release_time": 1670382055,
        "oracle_code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nint sum = 0; // Initialised Sum\n    void Traversal(TreeNode* root,int low,int high)\n    {\n        if(root==NULL) // If Node is NULL then we return \n        return;\n        Traversal(root->left,low,high); // To check for left Node\n        if(root->val <= high && root->val >=low)sum+=root->val;// If value of node is in range then add to sum.\n        Traversal(root->right,low,high); // To check for right Node\n    }\n    int rangeSumBST(TreeNode* root, int low, int high) {\n        ios_base::sync_with_stdio(false);\n        cin.tie(nullptr);\n        cout.tie(nullptr); // To make input output fast\n        Traversal(root,low,high); //To Traverse in BST\n        return sum;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSelf Explainatory Code.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nHopeYou Understand!\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(N)$$ for recursion stack space\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\nint sum = 0; // Initialised Sum\\n    void Traversal(TreeNode* root,int low,int high)\\n    {\\n        if(root==NULL) // If Node is NULL then we return \\n        return;\\n        Traversal(root->left,low,high); // To check for left Node\\n        if(root->val <= high && root->val >=low)sum+=root->val;// If value of node is in range then add to sum.\\n        Traversal(root->right,low,high); // To check for right Node\\n    }\\n    int rangeSumBST(TreeNode* root, int low, int high) {\\n        ios_base::sync_with_stdio(false);\\n        cin.tie(nullptr);\\n        cout.tie(nullptr); // To make input output fast\\n        Traversal(root,low,high); //To Traverse in BST\\n        return sum;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nint sum = 0; // Initialised Sum\n    void Traversal(TreeNode* root,int low,int high)\n    {\n        if(root==NULL) // If Node is NULL then we return \n        return;\n        Traversal(root->left,low,high); // To check for left Node\n        if(root->val <= high && root->val >=low)sum+=root->val;// If value of node is in range then add to sum.\n        Traversal(root->right,low,high); // To check for right Node\n    }\n    int rangeSumBST(TreeNode* root, int low, int high) {\n        ios_base::sync_with_stdio(false);\n        cin.tie(nullptr);\n        cout.tie(nullptr); // To make input output fast\n        let traversalStart = Traversal(root,low,high); \n        return sum;\n    }\n};\n",
        "explanations": "\nThe bug is the \"let\" keyword which isn't valid in C++. It is used in JavaScript.\n",
        "fixed_code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nint sum = 0; // Initialised Sum\n    void Traversal(TreeNode* root,int low,int high)\n    {\n        if(root==NULL) // If Node is NULL then we return \n        return;\n        Traversal(root->left,low,high); // To check for left Node\n        if(root->val <= high && root->val >=low)sum+=root->val;// If value of node is in range then add to sum.\n        Traversal(root->right,low,high); // To check for right Node\n    }\n    int rangeSumBST(TreeNode* root, int low, int high) {\n        Traversal(root,low,high); \n        return sum;\n    }\n};\n",
        "fixing_exp": "\nRemoved unnecessary input-output speedup code and incorrect declaration 'let traversalStart = Traversal(root,low,high);' \n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "93 ms",
            "memory": 64896000,
            "question_id": "975",
            "elapsed_time": 124,
            "compare_result": "11111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701968179558,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 41,
            "total_testcases": 41,
            "runtime_percentile": 69.38419999999994,
            "status_memory": "64.9 MB",
            "memory_percentile": 88.03769999999997,
            "pretty_lang": "C++",
            "submission_id": "1114503634",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "sum-multiples",
        "description": "Given a positive integer n, find the sum of all integers in the range [1, n] inclusive that are divisible by 3, 5, or 7.\nReturn an integer denoting the sum of all numbers in the given range satisfying\u00a0the constraint.",
        "examples": [
            "Input: n = 7\nOutput: 21\nExplanation: Numbers in the range [1, 7] that are divisible by 3, 5, or 7 are 3, 5, 6, 7. The sum of these numbers is 21.",
            "Input: n = 10\nOutput: 40\nExplanation: Numbers in the range [1, 10] that are divisible by 3, 5, or 7 are 3, 5, 6, 7, 9, 10. The sum of these numbers is 40.",
            "Input: n = 9\nOutput: 30\nExplanation: Numbers in the range [1, 9] that are divisible by 3, 5, or 7 are 3, 5, 6, 7, 9. The sum of these numbers is 30."
        ],
        "constrains": "1 <= n <= 103",
        "release_time": 1682768576,
        "oracle_code": "class Solution {\npublic:\n    int sumOfMultiples(int n,int count=0) {\n       \n       \n       for (int i=1;i<=n;i++)\n       {\n         if (i%3==0 || i%5==0 ||i%7==0)\n           count+=i;\n       }\n    return count;\n\n    }\n};",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n,int count=0) {\\n       \\n       \\n       for (int i=1;i<=n;i++)\\n       {\\n         if (i%3==0 || i%5==0 ||i%7==0)\\n           count+=i;\\n       }\\n    return count;\\n\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    let sumOfMultiples = (n, count=0) =>{\n       \n       \n       for (let i=1;i<=n;i++)\n       {\n         if (i%3==0 || i%5==0 ||i%7==0)\n           count+=i;\n       }\n    return count;\n\n    }\n};\n",
        "explanations": "\nThe bug is using javascript keywords like \"let\" and arrow functions in a C++ program.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int sumOfMultiples(int n) {\n        int count=0;\n        for (int i=1;i<=n;i++) {\n            if (i%3==0 || i%5==0 ||i%7==0)\n                count+=i;\n        }\n        return count;\n    }\n};\n",
        "fixing_exp": "\nThe code was previously using JavaScript syntax. Modifications included changing `let` to `int`, removing the `=` operator in method declaration, and removing the arrow function syntax.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "0 ms",
            "memory": 6584000,
            "question_id": "2752",
            "elapsed_time": 15,
            "compare_result
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701968211696,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 1000,
            "total_testcases": 1000,
            "runtime_percentile": 100,
            "status_memory": "6.6 MB",
            "memory_percentile": 6.050300000000005,
            "pretty_lang": "C++",
            "submission_id": "1114504021",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "search-in-a-binary-search-tree",
        "description": "You are given the root of a binary search tree (BST) and an integer val.\nFind the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.",
        "examples": [
            "Input: root = [4,2,7,1,3], val = 2\nOutput: [2,1,3]",
            "Input: root = [4,2,7,1,3], val = 5\nOutput: []"
        ],
        "constrains": "The number of nodes in the tree is in the range [1, 5000].\n1 <= Node.val <= 107\nroot is a binary search tree.\n1 <= val <= 107",
        "release_time": 1687509988,
        "oracle_code": "class Solution {\npublic:\n    TreeNode* searchBST(TreeNode* root, int val) {\n       if(root==NULL) \n       return NULL;\n       if(root->val==val)\n       {\n           return root;\n       }\n       if(root->val>val){\n          return  searchBST(root->left,val);\n       }\n        return searchBST(root->right,val);\n    }\n};",
        "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* searchBST(TreeNode* root, int val) {\\n       if(root==NULL) \\n       return NULL;\\n       if(root->val==val)\\n       {\\n           return root;\\n       }\\n       if(root->val>val){\\n          return  searchBST(root->left,val);\\n       }\\n        return searchBST(root->right,val);\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    TreeNode* searchBST(TreeNode* root, int val) {\n       if(root==None) \n       return NULL;\n       if(root->val==val)\n       {\n           return root;\n       }\n       if(root->val>val){\n          return  searchBST(root->left,val);\n       }\n        return searchBST(root->right,val);\n    }\n};\n",
        "explanations": "\nThe keyword \"None\" is undefined in C++, it should be \"NULL\" for null pointers.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    TreeNode* searchBST(TreeNode* root, int val) {\n       if(root==nullptr) \n       return nullptr;\n       if(root->val==val)\n       {\n           return root;\n       }\n       if(root->val>val){\n          return  searchBST(root->left,val);\n       }\n        return searchBST(root->right,val);\n    }\n};\n",
        "fixing_exp": "\nIn C++, 'None' is not recognised. We need to use 'nullptr' instead.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "33 ms",
            "memory": 35212000,
            "question_id": "783",
            "elapsed_time": 79,
            "compare_result": "111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701968240974,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 36,
            "total_testcases": 36,
            "runtime_percentile": 52.91830000000001,
            "status_memory": "35.2 MB",
            "memory_percentile": 8.576099999999991,
            "pretty_lang": "C++",
            "submission_id": "1114504415",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "climbing-stairs",
        "description": "You are climbing a staircase. It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
        "examples": [
            "Input: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps",
            "Input: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step"
        ],
        "constrains": "1 <= n <= 45",
        "release_time": 1676965804,
        "oracle_code": "class Solution {\npublic:\n    int solve(int n,vector<int> &dp){\n        //base case\n        if(n<=2)\n          return n;\n        \n        if(dp[n]!=-1) \n          return dp[n]; \n        \n        dp[n]=solve(n-1,dp)+solve(n-2,dp);\n        return dp[n];\n    }\n    int climbStairs(int n) {\n        if(n<=2)\n         return n;\n        vector<int> dp(n+1);\n        for(int i=0;i<=n;i++)\n         dp[i]=-1;\n        \n        return solve(n,dp);\n    }\n};",
        "content": "# Intuition\\nUsing Top - Down Approach -> Recursion + Memorization.\\n\\n# Approach\\nStoring the values of overlapping sub - problems in a vector.\\n\\n# Complexity\\n- Time complexity:\\nO(n) -> As we are visiting all values of n atleast 1 time.\\n\\n- Space complexity:\\nO(n) + O(n)  - > (Recursive calls + Array of size n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int solve(int n,vector<int> &dp){\\n        //base case\\n        if(n<=2)\\n          return n;\\n        \\n        if(dp[n]!=-1) \\n          return dp[n]; \\n        \\n        dp[n]=solve(n-1,dp)+solve(n-2,dp);\\n        return dp[n];\\n    }\\n    int climbStairs(int n) {\\n        if(n<=2)\\n         return n;\\n        vector<int> dp(n+1);\\n        for(int i=0;i<=n;i++)\\n         dp[i]=-1;\\n        \\n        return solve(n,dp);\\n    }\\n};\\n```\\n\\n# Intuition\\nUsing Bottom - up Approach -> Tabulation.\\n\\n# Approach\\nStoring the values of overlapping sub - problems in a vector.\\n\\n# Complexity\\n- Time complexity:\\nO(n) -> As we are traversing the vector atleast 1 time.\\n\\n- Space complexity:\\nO(n) - > (Array of size n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int climbStairs(int n) {\\n        if(n<=2)\\n         return n;\\n        vector<int> dp(n+1);\\n        dp[0]=0;\\n        dp[1]=1;\\n        dp[2]=2;\\n        for(int i=3;i<=n;i++)\\n         dp[i]=dp[i-1]+dp[i-2];\\n        \\n        return dp[n];\\n    }\\n};\\n```\\n\\n# Python Code :\\nContributed by : Aarya_R\\n\\n# Complexity\\n- Time complexity:\\nO(n) -> As we are traversing the vector atleast 1 time.\\n\\n- Space complexity:\\nO(1) \\n```\\ndef climbStairs(self, n):\\n        prev = 1\\n        prev2 = 0\\n        for i in range(1, n+1):\\n            curi = prev + prev2\\n            prev2 = prev\\n            prev = curi\\n        return prev \\n```\\n![upvote.jfif](https://assets.leetcode.com/users/images/995d917b-6ea2-4b6b-8baa-6ce7bc6441fd_1676965776.537627.jpeg)\\n\\n",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int solve(int n,vector<int> &dp){\n        //base case\n        if(n<=2)\n          return n;\n        \n        if(dp[n]!=-1) \n          return dp[n]; \n        \n        dp[n]=solve(n-1,dp)+solve(n-2,dp);\n        return dp[n];\n    }\n    int climbStairs(int n) {\n        if(n<=2)\n         return n;\n        array<int> dp(n+1);\n        for(int i=0;i<=n;i++)\n         dp[i]=-1;\n        \n        return solve(n,dp);\n    }\n};\n",
        "explanations": "\nThe \"array\" keyword is not defined in C++, causing a syntax error.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int solve(int n,vector<int> &dp){\n        //base case\n        if(n<=2)\n          return n;\n        \n        if(dp[n]!=-1) \n          return dp[n]; \n        \n        dp[n]=solve(n-1,dp)+solve(n-2,dp);\n        return dp[n];\n    }\n    int climbStairs(int n) {\n        if(n<=2)\n         return n;\n        vector<int> dp(n+1, -1);\n        \n        return solve(n,dp);\n    }\n};\n",
        "fixing_exp": "\nReplaced array with a vector and initialized it with -1 to avoid manual looping it.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "0 ms",
            "memory": 6500000,
            "question_id": "70",
            "elapsed_time": 14,
            "compare_result": "111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701968272029,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 45,
            "total_testcases": 45,
            "runtime_percentile": 100,
            "status_memory": "6.5 MB",
            "memory_percentile": 56.667599999999986,
            "pretty_lang": "C++",
            "submission_id": "1114504775",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "longest-ideal-subsequence",
        "description": "You are given a string s consisting of lowercase letters and an integer k. We call a string t ideal if the following conditions are satisfied:\n\nt is a subsequence of the string s.\nThe absolute difference in the alphabet order of every two adjacent letters in t is less than or equal to k.\n\nReturn the length of the longest ideal string.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\nNote that the alphabet order is not cyclic. For example, the absolute difference in the alphabet order of 'a' and 'z' is 25, not 1.",
        "examples": [
            "Input: s = \"acfgbd\", k = 2\nOutput: 4\nExplanation: The longest ideal string is \"acbd\". The length of this string is 4, so 4 is returned.\nNote that \"acfgbd\" is not ideal because 'c' and 'f' have a difference of 3 in alphabet order.",
            "Input: s = \"abcd\", k = 3\nOutput: 4\nExplanation: The longest ideal string is \"abcd\". The length of this string is 4, so 4 is returned."
        ],
        "constrains": "1 <= s.length <= 105\n0 <= k <= 25\ns consists of lowercase English letters.",
        "release_time": 1665172616,
        "oracle_code": "class Solution {\n\n\n   int SolveByMemo(string &s , int &k , int index , int prev , vector<vector<int>> &dp)\n   {\n       if(index == s.length())\n       return 0;\n\n       if(dp[index][prev] != -1)\n       return dp[index][prev];\n\n       int op1 = 0 + SolveByMemo(s, k , index+1 , prev , dp);\n\n       int op2 = 0 ;\n\n       if(prev == 26)\n       op2 = 1 + SolveByMemo(s, k , index+1 , s[index]-'a' , dp);\n       else if(abs(s[index]-'a' - prev) <= k)\n       op2 = 1 + SolveByMemo(s, k , index+1 , s[index]-'a' , dp);\n\n       return dp[index][prev] = max(op1 , op2);\n   }\n\n   int SolveByTab(string &s , int &k )\n   {\n        vector<vector<int>> dp(s.length()+1 , vector<int> (27, 0));\n       \n        for(int index = s.length()-1 ; index>=0 ; index--)\n        {\n            for(int prev = 0 ; prev<= 26 ; prev++)\n            {\n                int op1 = 0 + dp[index+1][prev];\n                int op2 = 0 ;\n\n               if(prev == 26)\n               op2 = 1 + dp[index+1][s[index]-'a'];\n               else if(abs(s[index]-'a' - prev) <= k)\n               op2 = 1 + dp[index+1][s[index]-'a'];\n\n               dp[index][prev] = max(op1 , op2);\n            }\n        }\n\n       return max(dp[0][s[0]-'a'] , dp[0][26]);\n   }\n\n   int SolveByTabSpaceOptimised(string &s , int &k )\n   {\n        vector<int> next(27, 0) ;\n        vector<int> curr(27, 0);\n       \n        for(int index = s.length()-1 ; index>=0 ; index--)\n        {\n            for(int prev = 0 ; prev<= 26 ; prev++)\n            {\n                int op1 = 0 + next[prev];\n                int op2 = 0 ;\n\n               if(prev == 26)\n               op2 = 1 + next[s[index]-'a'];\n               else if(abs(s[index]-'a' - prev) <= k)\n               op2 = 1 + next[s[index]-'a'];\n\n               curr[prev] = max(op1 , op2);\n            }\n            next = curr;\n        }\n\n       return max(curr[s[0]-'a'] , curr[26]);\n   }\n\npublic:\n    int longestIdealString(string s, int k) {\n        \n        // 1. Recursion + Memoization || Top Down Approach\n        // vector<vector<int>> dp(s.length() , vector<int> (27, -1));\n        // return SolveByMemo(s, k , 0 , 26, dp);\n\n        // 2. Tabulation Method || Bottom Up Approach\n        // return SolveByTab(s, k);\n\n        // 3. Space Optimisation using Tabulation\n        return SolveByTabSpaceOptimised(s , k);\n    }\n};",
        "content": "\\n# Approach\\nWe Have Use Three Different Approaches :\\n1. Recursion + Memoization \\n    TC : O(n^2) , SC : O(n)\\n2. Tabulation Method \\n    TC : O(n^2) , SC : O(n)\\n3.  Tabulatuon With SOace Optimised\\n    TC : O(n^2) , SC : O(1) \\n\\n\\n#Note\\nSC In first two methods is On) and not O(n^2) as size is fixed to 27 for each index hence it is Linear Space ,Similarly for 3rd Method we have optimised to constant space as at any instant we onlt need memory of next 27 blocks  only.\\n\\n#Hope You Liekd It and Upvote are appreciated \\n\\n# Code\\n```\\nclass Solution {\\n\\n\\n   int SolveByMemo(string &s , int &k , int index , int prev , vector<vector<int>> &dp)\\n   {\\n       if(index == s.length())\\n       return 0;\\n\\n       if(dp[index][prev] != -1)\\n       return dp[index][prev];\\n\\n       int op1 = 0 + SolveByMemo(s, k , index+1 , prev , dp);\\n\\n       int op2 = 0 ;\\n\\n       if(prev == 26)\\n       op2 = 1 + SolveByMemo(s, k , index+1 , s[index]-\\'a\\' , dp);\\n       else if(abs(s[index]-\\'a\\' - prev) <= k)\\n       op2 = 1 + SolveByMemo(s, k , index+1 , s[index]-\\'a\\' , dp);\\n\\n       return dp[index][prev] = max(op1 , op2);\\n   }\\n\\n   int SolveByTab(string &s , int &k )\\n   {\\n        vector<vector<int>> dp(s.length()+1 , vector<int> (27, 0));\\n       \\n        for(int index = s.length()-1 ; index>=0 ; index--)\\n        {\\n            for(int prev = 0 ; prev<= 26 ; prev++)\\n            {\\n                int op1 = 0 + dp[index+1][prev];\\n                int op2 = 0 ;\\n\\n               if(prev == 26)\\n               op2 = 1 + dp[index+1][s[index]-\\'a\\'];\\n               else if(abs(s[index]-\\'a\\' - prev) <= k)\\n               op2 = 1 + dp[index+1][s[index]-\\'a\\'];\\n\\n               dp[index][prev] = max(op1 , op2);\\n            }\\n        }\\n\\n       return max(dp[0][s[0]-\\'a\\'] , dp[0][26]);\\n   }\\n\\n   int SolveByTabSpaceOptimised(string &s , int &k )\\n   {\\n        vector<int> next(27, 0) ;\\n        vector<int> curr(27, 0);\\n       \\n        for(int index = s.length()-1 ; index>=0 ; index--)\\n        {\\n            for(int prev = 0 ; prev<= 26 ; prev++)\\n            {\\n                int op1 = 0 + next[prev];\\n                int op2 = 0 ;\\n\\n               if(prev == 26)\\n               op2 = 1 + next[s[index]-\\'a\\'];\\n               else if(abs(s[index]-\\'a\\' - prev) <= k)\\n               op2 = 1 + next[s[index]-\\'a\\'];\\n\\n               curr[prev] = max(op1 , op2);\\n            }\\n            next = curr;\\n        }\\n\\n       return max(curr[s[0]-\\'a\\'] , curr[26]);\\n   }\\n\\npublic:\\n    int longestIdealString(string s, int k) {\\n        \\n        // 1. Recursion + Memoization || Top Down Approach\\n        // vector<vector<int>> dp(s.length() , vector<int> (27, -1));\\n        // return SolveByMemo(s, k , 0 , 26, dp);\\n\\n        // 2. Tabulation Method || Bottom Up Approach\\n        // return SolveByTab(s, k);\\n\\n        // 3. Space Optimisation using Tabulation\\n        return SolveByTabSpaceOptimised(s , k);\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\n\n\n   int SolveByMemo(string &s , int &k , int index , int prev , vector<vector<int>> &dp)\n   {\n       if(index == s.length())\n       return 0;\n\n       if(dp[index][prev] != -1)\n       return dp[index][prev];\n\n       int op1 = 0 + SolveByMemo(s, k , index+1 , prev , dp);\n\n       int op2 = 0 ;\n\n       if(prev == 26)\n       op2 = fun(s, k , index+1 , s[index]-'a' , dp);\n       else if(abs(s[index]-'a' - prev) <= k)\n       op2 = fun(s, k , index+1 , s[index]-'a' , dp);\n\n       return dp[index][prev] = max(op1 , op2);\n   }\n\n   int SolveByTab(string &s , int &k )\n   {\n        vector<vector<int>> dp(s.length()+1 , vector<int> (27, 0));\n       \n        for(int index = s.length()-1 ; index>=0 ; index--)\n        {\n            for(int prev = 0 ; prev<= 26 ; prev++)\n            {\n                int op1 = 0 + dp[index+1][prev];\n                int op2 = 0 ;\n\n               if(prev == 26)\n               op2 = fun(dp[index+1][s[index]-'a']);\n               else if(abs(s[index]-'a' - prev) <= k)\n               op2 = fun(dp[index+1][s[index]-'a']);\n\n               dp[index][prev] = max(op1 , op2);\n            }\n        }\n\n       return max(dp[0][s[0]-'a'] , dp[0][26]);\n   }\n\n   int SolveByTabSpaceOptimised(string &s , int &k )\n   {\n        vector<int> next(27, 0) ;\n        vector<int> curr(27, 0);\n       \n        for(int index = s.length()-1 ; index>=0 ; index--)\n        {\n            for(int prev = 0 ; prev<= 26 ; prev++)\n            {\n                int op1 = 0 + next[prev];\n                int op2 = 0 ;\n\n               if(prev == 26)\n               op2 = 1 + next[s[index]-'a'];\n               else if(abs(s[index]-'a' - prev) <= k)\n               op2 = 1 + next[s[index]-'a'];\n\n               curr[prev] = max(op1 , op2);\n            }\n            next = curr;\n        }\n\n       return max(curr[s[0]-'a'] , curr[26]);\n   }\n\npublic:\n    int longestIdealString(string s, int k) {\n        \n        // 1. Recursion + Memoization || Top Down Approach\n        // vector<vector<int>> dp(s.length() , vector<int> (27, -1));\n        // return SolveByMemo(s, k , 0 , 26, dp);\n\n        // 2. Tabulation Method || Bottom Up Approach\n        // return SolveByTab(s, k);\n\n        // 3. Space Optimisation using Tabulation\n        return SolveByTabSpaceOptimised(s , k);\n    }\n};\n",
        "explanations": "\nThe bug is that \"fun\" function is not defined in this language and scope.\n",
        "fixed_code": "\nclass Solution {\n   int SolveByMemo(string &s , int &k , int index , int prev , vector<vector<int>> &dp)\n   {\n       if(index == s.length())\n       return 0;\n\n       if(dp[index][prev] != -1)\n       return dp[index][prev];\n\n       int op1 = 0 + SolveByMemo(s, k , index+1 , prev , dp);\n\n       int op2 = 0 ;\n\n       if(prev == 26)\n       op2 = SolveByMemo(s, k , index+1 , s[index]-'a' , dp);\n       else if(abs(s[index]-'a' - prev) <= k)\n       op2 = SolveByMemo(s, k , index+1 , s[index]-'a' , dp);\n\n       return dp[index][prev] = max(op1 , op2);\n   }\n\n   int SolveByTab(string &s , int &k )\n   {\n        vector<vector<int>> dp(s.length()+1 , vector<int> (27, 0));\n\n        for(int index = s.length()-1 ; index>=0 ; index--)\n        {\n            for(int prev = 0 ; prev<= 26 ; prev++)\n            {\n                int op1 = 0 + dp[index+1][prev];\n                int op2 = 0 ;\n\n               if(prev == 26)\n               op2 = dp[index+1][s[index]-'a'];\n               else if(abs(s[index]-'a' - prev) <= k)\n               op2 = dp[index+1][s[index]-'a'];\n\n               dp[index][prev] = max(op1 , op2);\n            }\n        }\n\n       return max(dp[0][s[0]-'a'] , dp[0][26]);\n   }\n\n   int SolveByTabSpaceOptimised(string &s , int &k )\n   {\n        vector<int> next(27, 0) ;\n        vector<int> curr(27, 0);\n\n        for(int index = s.length()-1 ; index>=0 ; index--)\n        {\n            for(int prev = 0 ; prev<= 26 ; prev++)\n            {\n                int op1 = 0 + next[prev];\n                int op2 = 0 ;\n\n               if(prev == 26)\n               op2 = 1 + next[s[index]-'a'];\n               else if(abs(s[index]-'a' - prev) <= k)\n               op2 = 1 + next[s[index]-'a'];\n\n               curr[prev] = max(op1 , op2);\n            }\n            next = curr;\n        }\n\n       return max(curr[s[0]-'a'] , curr[26]);\n   }\n\npublic:\n    int longestIdealString(string s, int k) {\n        // 1. Recursion + Memoization || Top Down Approach\n        vector<vector<int>> dp(s.length() , vector<int> (27, -1));\n        return SolveByMemo(s, k , 0 , 26, dp);\n\n        // 2. Tabulation Method || Bottom Up Approach\n        //return SolveByTab(s, k);\n\n        // 3. Space Optimisation using Tabulation\n        //return SolveByTabSpaceOptimised(s , k);\n    }\n};\n",
        "fixing_exp": "\nThe function calls should be the proper ones, and the comments in the main function should be uncommented in order.\n",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 11,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "N/A",
            "memory": 191524000,
            "question_id": "2444",
            "elapsed_time": 755,
            "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "code_output": "0",
            "std_output": "",
            "last_testcase": "\"acfgbd\"\n2",
            "expected_output": "4",
            "task_finish_time": 1701968319565,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 0,
            "total_testcases": 85,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1114505349",
            "input_formatted": "\"acfgbd\", 2",
            "input": "\"acfgbd\"\n2",
            "status_msg": "Wrong Answer",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "shuffle-string",
        "description": "You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.\nReturn the shuffled string.",
        "examples": [
            "Input: s = \"codeleet\", indices = [4,5,6,7,0,2,1,3]\nOutput: \"leetcode\"\nExplanation: As shown, \"codeleet\" becomes \"leetcode\" after shuffling.",
            "Input: s = \"abc\", indices = [0,1,2]\nOutput: \"abc\"\nExplanation: After shuffling, each character remains in its position."
        ],
        "constrains": "s.length == indices.length == n\n1 <= n <= 100\ns consists of only lowercase English letters.\n0 <= indices[i] < n\nAll values of indices are unique.",
        "release_time": 1690699398,
        "oracle_code": "class Solution {\npublic:\n    string restoreString(string s, vector<int>& ind) {\n        int n = s.size();\n        string ans(n, '.');\n        for (int i = 0; i < n; i++) {\n            ans[ind[i]] = s[i];\n        } \n        return ans;\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    string restoreString(string s, vector<int>& ind) {\\n        int n = s.size();\\n        string ans(n, \\'.\\');\\n        for (int i = 0; i < n; i++) {\\n            ans[ind[i]] = s[i];\\n        } \\n        return ans;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    string restoreString(string s, vector<int>& ind) {\n        int n = s.size();\n        string ans(n, '.');\n        for (let i = 0; i < n; i++) {\n            ans[ind[i]] = s[i];\n        } \n        return ans;\n    }\n};\n",
        "explanations": "\nThe \"let\" keyword is used in JavaScript, not C++. It should be \"int\" instead.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    string restoreString(string s, vector<int>& ind) {\n        int n = s.size();\n        string ans(n, '.');\n        for (int i = 0; i < n; i++) {\n            ans[ind[i]] = s[i];\n        } \n        return ans;\n    }\n};\n",
        "fixing_exp": "\nReplaced 'let' with 'int' in the for loop for correct C++ syntax.\n",
        "test_result_bool": false,
        "test_result_dict": {
            "state": "PENDING"
        },
        "traceback_messages": null
    },
    {
        "slug": "design-twitter",
        "description": "Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.\nImplement the Twitter class:\n\nTwitter() Initializes your twitter object.\nvoid postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.\nList<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.\nvoid follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.\nvoid unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId.",
        "examples": [
            "Input\n[\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"]\n[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]\nOutput\n[null, null, [5], null, null, [6, 5], null, [5]]\n\nExplanation\nTwitter twitter = new Twitter();\ntwitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]\ntwitter.follow(1, 2);    // User 1 follows user 2.\ntwitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.unfollow(1, 2);  // User 1 unfollows user 2.\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2."
        ],
        "constrains": "1 <= userId, followerId, followeeId <= 500\n0 <= tweetId <= 104\nAll the tweets have unique IDs.\nAt most 3 * 104 calls will be made to postTweet, getNewsFeed, follow, and unfollow.",
        "release_time": 1679157289,
        "oracle_code": "class Twitter {\n    int timer = INT_MAX;\n    map<int, map<int, bool>> friends;\n    // map user id with user friends map\n    map<int, pair<int, int>> tweets;\n    // time {userId, tweetId}\npublic:\n    Twitter() {\n    }\n    \n    void postTweet(int userId, int tweetId) {\n        tweets[timer--] = {userId, tweetId};\n    }\n    \n    vector<int> getNewsFeed(int userId) {\n        vector<int> ans;\n        for(auto it: tweets){\n            if(it.second.first == userId || friends[userId].find(it.second.first)!=friends[userId].end())\n                ans.push_back(it.second.second);\n            if(ans.size() == 10) break;\n        }\n        return ans;\n    }\n    \n    void follow(int followerId, int followeeId) {\n        friends[followerId][followeeId] = true;\n    }\n    \n    void unfollow(int followerId, int followeeId) {\n        friends[followerId].erase(followeeId);\n    }\n};\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * Twitter* obj = new Twitter();\n * obj->postTweet(userId,tweetId);\n * vector<int> param_2 = obj->getNewsFeed(userId);\n * obj->follow(followerId,followeeId);\n * obj->unfollow(followerId,followeeId);\n */",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAs our normal map sort the data in asscending order, wo we will use the timer variable initially it will be INT_MAX so, the upcoming tweets will be at starting.\\n\\nWhen fetching the tweets we simply check is the tweet id belongs to the userId or any of its friend if yes add it to answer and do, it till we fetch the top 10 recent tweets by the user or its friend\\n# Code\\n```\\nclass Twitter {\\n    int timer = INT_MAX;\\n    map<int, map<int, bool>> friends;\\n    // map user id with user friends map\\n    map<int, pair<int, int>> tweets;\\n    // time {userId, tweetId}\\npublic:\\n    Twitter() {\\n    }\\n    \\n    void postTweet(int userId, int tweetId) {\\n        tweets[timer--] = {userId, tweetId};\\n    }\\n    \\n    vector<int> getNewsFeed(int userId) {\\n        vector<int> ans;\\n        for(auto it: tweets){\\n            if(it.second.first == userId || friends[userId].find(it.second.first)!=friends[userId].end())\\n                ans.push_back(it.second.second);\\n            if(ans.size() == 10) break;\\n        }\\n        return ans;\\n    }\\n    \\n    void follow(int followerId, int followeeId) {\\n        friends[followerId][followeeId] = true;\\n    }\\n    \\n    void unfollow(int followerId, int followeeId) {\\n        friends[followerId].erase(followeeId);\\n    }\\n};\\n\\n/**\\n * Your Twitter object will be instantiated and called as such:\\n * Twitter* obj = new Twitter();\\n * obj->postTweet(userId,tweetId);\\n * vector<int> param_2 = obj->getNewsFeed(userId);\\n * obj->follow(followerId,followeeId);\\n * obj->unfollow(followerId,followeeId);\\n */\\n```",
        "level": "medium",
        "buggy_code": "\nclass Twitter {\n    int timer = INT_MAX;\n    map<int, map<int, bool>> friends;\n    map<int, pair<int, int>> tweets;\n\npublic:\n    Twitter() {\n    }\n    \n    void postTweet(int userId, int tweetId) {\n        tweets[timer--] = {userId, tweetId};\n    }\n    \n    vector<int> getNewsFeed(int userId) {\n        vector<int> ans;\n        for(auto it: tweets){\n            if(it.second.first == userId || friends[userId].find(it.second.first)!=friends[userId].end())\n                ans.push_back(it.second.second);\n            if(ans.length() == 10) break;\n        }\n        return ans;\n    }\n    \n    void follow(int followerId, int followeeId) {\n        friends[followerId][followeeId] = true;\n    }\n    \n    void unfollow(int followerId, int followeeId) {\n        friends[followerId].erase(followeeId);\n    }\n};\n<bug>\n<exp>\nUsed .length() which is incorrect, it should be .size() for vectors in C++.\n</exp",
        "explanations": "\nUsed .length() which is incorrect, it should be .size() for vectors in C++.\n",
        "fixed_code": "\nclass Twitter {\n    int timer = INT_MAX;\n    map<int, map<int, bool>> friends;\n    map<int, pair<int, int>> tweets;\n\npublic:\n    Twitter() {\n    }\n    \n    void postTweet(int userId, int tweetId) {\n        tweets[timer--] = {userId, tweetId};\n    }\n    \n    vector<int> getNewsFeed(int userId) {\n        vector<int> ans;\n        for(auto it: tweets){\n            if(it.second.first == userId || friends[userId].find(it.second.first)!=friends[userId].end())\n                ans.push_back(it.second.second);\n            if(ans.size() == 10) break;\n        }\n        return ans;\n    }\n    \n    void follow(int followerId, int followeeId) {\n        friends[followerId][followeeId] = true;\n    }\n    \n    void unfollow(int followerId, int followeeId) {\n        friends[followerId].erase(followeeId);\n    }\n};\n",
        "fixing_exp": "\nVectors in C++ don't use .length(), they use .size() to get the size of the vector.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "0 ms",
            "memory": 7552000,
            "question_id": "355",
            "elapsed_time": 12,
            "compare_result": "1111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701968382998,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 16,
            "total_testcases": 16,
            "runtime_percentile": 100,
            "status_memory": "7.6 MB",
            "memory_percentile": 73.81530000000001,
            "pretty_lang": "C++",
            "submission_id": "1114506122",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "count-elements-with-strictly-smaller-and-greater-elements",
        "description": "Given an integer array nums, return the number of elements that have both a strictly smaller and a strictly greater element appear in nums.",
        "examples": [
            "Input: nums = [11,7,2,15]\nOutput: 2\nExplanation: The element 7 has the element 2 strictly smaller than it and the element 11 strictly greater than it.\nElement 11 has element 7 strictly smaller than it and element 15 strictly greater than it.\nIn total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums.",
            "Input: nums = [-3,3,3,90]\nOutput: 2\nExplanation: The element 3 has the element -3 strictly smaller than it and the element 90 strictly greater than it.\nSince there are two elements with the value 3, in total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums."
        ],
        "constrains": "1 <= nums.length <= 100\n-105 <= nums[i] <= 105",
        "release_time": 1686274970,
        "oracle_code": "class Solution {\npublic:\n    int countElements(vector<int>& nums) {\n\n        if(nums.size() == 1 || nums.size() == 2) return 0;\n        int ma = *max_element(nums.begin(),nums.end());\n        int countma = count(nums.begin(),nums.end(),ma);\n        int mi = *min_element(nums.begin(),nums.end());\n        int countmi = count(nums.begin(),nums.end(),mi);\n        int ans = nums.size() - (countma+countmi);\n        if(ans <= 0) return 0;\n        return nums.size() - (countma+countmi);\n        \n    }\n};",
        "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countElements(vector<int>& nums) {\\n\\n        if(nums.size() == 1 || nums.size() == 2) return 0;\\n        int ma = *max_element(nums.begin(),nums.end());\\n        int countma = count(nums.begin(),nums.end(),ma);\\n        int mi = *min_element(nums.begin(),nums.end());\\n        int countmi = count(nums.begin(),nums.end(),mi);\\n        int ans = nums.size() - (countma+countmi);\\n        if(ans <= 0) return 0;\\n        return nums.size() - (countma+countmi);\\n        \\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int countElements(list<int>& nums) {\n\n        if(nums.size() == 1 || nums.size() == 2) return 0;\n        int ma = *max_element(nums.begin(),nums.end());\n        int countma = count(nums.begin(),nums.end(),ma);\n        int mi = *min_element(nums.begin(),nums.end());\n        int countmi = count(nums.begin(),nums.end(),mi);\n        int ans = nums.size() - (countma+countmi);\n        if(ans <= 0) return 0;\n        return nums.size() - (countma+countmi);\n        \n    }\n};\n",
        "explanations": "\nUsing 'list' data structure from Python in C++, which is undefined in C++.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int countElements(std::list<int>& nums) {\n\n        if(nums.size() <= 2) return 0;\n        int ma = *std::max_element(nums.begin(),nums.end());\n        int countma = std::count(nums.begin(),nums.end(),ma);\n        int mi = *std::min_element(nums.begin(),nums.end());\n        int countmi = std::count(nums.begin(),nums.end(),mi);\n        int ans = nums.size() - (countma+countmi);\n        if(ans <= 0) return 0;\n        return ans;\n        \n    }\n};\n",
        "fixing_exp": "\nFixed the redundant computation and added std:: in front of max_element, count, and min_element.\n",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 20,
            "lang": "cpp",
            "run_success": false,
            "compile_error": "Line 24: Char 42: error: non-const lvalue reference to type 'std::list<int>' cannot bind to a value of unrelated type 'vector<int>'",
            "full_compile_error": "Line 24: Char 42: error: non-const lvalue reference to type 'std::list<int>' cannot bind to a value of unrelated type 'vector<int>'\n      int ret = Solution().countElements(param_1); return ret;\n                                         ^~~~~~~\nLine 4: Char 39: note: passing argument to parameter 'nums' here\n    int countElements(std::list<int>& nums) {\n                                      ^\n1 error generated.",
            "status_runtime": "N/A",
            "memory": 0,
            "question_id": "2269",
            "task_finish_time": 1701968411786,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": null,
            "total_testcases": null,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1114506487",
            "status_msg": "Compile Error",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "target-sum",
        "description": "You are given an integer array nums and an integer target.\nYou want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.\n\nFor example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression \"+2-1\".\n\nReturn the number of different expressions that you can build, which evaluates to target.",
        "examples": [
            "Input: nums = [1,1,1,1,1], target = 3\nOutput: 5\nExplanation: There are 5 ways to assign symbols to make the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3",
            "Input: nums = [1], target = 1\nOutput: 1"
        ],
        "constrains": "1 <= nums.length <= 20\n0 <= nums[i] <= 1000\n0 <= sum(nums[i]) <= 1000\n-1000 <= target <= 1000",
        "release_time": 1689667126,
        "oracle_code": "class Solution {\npublic:\n    int findTargetSumWays(vector<int>& nums, int target) {\n        // idx, target -> no of ways\n        map<pair<int, int>, int> memo;\n        return dp(nums, target, 0, memo); \n    }\n\nprivate:\n    int dp(vector<int>& nums, int target, int idx, map<pair<int, int>, int>& memo) {\n        if (idx == nums.size()) return target == 0;\n        if (memo.count({idx, target})) return memo[{idx, target}];\n\n        int positive = dp(nums, target + nums[idx], idx + 1, memo);\n        int negative = dp(nums, target - nums[idx], idx + 1, memo);\n\n        return memo[{idx, target}] = positive + negative;\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int findTargetSumWays(vector<int>& nums, int target) {\\n        // idx, target -> no of ways\\n        map<pair<int, int>, int> memo;\\n        return dp(nums, target, 0, memo); \\n    }\\n\\nprivate:\\n    int dp(vector<int>& nums, int target, int idx, map<pair<int, int>, int>& memo) {\\n        if (idx == nums.size()) return target == 0;\\n        if (memo.count({idx, target})) return memo[{idx, target}];\\n\\n        int positive = dp(nums, target + nums[idx], idx + 1, memo);\\n        int negative = dp(nums, target - nums[idx], idx + 1, memo);\\n\\n        return memo[{idx, target}] = positive + negative;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int findTargetSumWays(vector<int>& nums, int target) {\n        // idx, target -> no of ways\n        map<pair<int, int>, int> memo;\n        return dp(nums, target, 0, memo); \n    }\n\nprivate:\n    int dp(vector<int>& nums, int target, int idx, map<pair<int, int>, int>& memo) {\n        if (idx == nums.length) return target == 0;\n        if (memo.count({idx, target})) return memo[{idx, target}];\n\n        int positive = dp(nums, target + nums[idx], idx + 1, memo);\n        int negative = dp(nums, target - nums[idx], idx + 1, memo);\n\n        return memo[{idx, target}] = positive + negative;\n    }\n};\n",
        "explanations": "\nThe bug is 'nums.length'. 'length' is not a defined keyword in C++. \n",
        "fixed_code": "\nclass Solution {\npublic:\n    int findTargetSumWays(vector<int>& nums, int target) {\n        map<pair<int, int>, int> memo;\n        return dp(nums, target, 0, memo); \n    }\n\nprivate:\n    int dp(vector<int>& nums, int target, int idx, map<pair<int, int>, int>& memo) {\n        if (idx == nums.size()) return target == 0;\n        if (memo.count({idx, target})) return memo[{idx, target}];\n\n        int positive = dp(nums, target + nums[idx], idx + 1, memo);\n        int negative = dp(nums, target - nums[idx], idx + 1, memo);\n\n        return memo[{idx, target}] = positive + negative;\n    }\n};\n",
        "fixing_exp": "\nReplaced 'nums.length' with 'nums.size()' as 'length' is not a valid function for vector in C++.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "286 ms",
            "memory": 62964000,
            "question_id": "494",
            "elapsed_time": 315,
            "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701968447192,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 140,
            "total_testcases": 140,
            "runtime_percentile": 38.482,
            "status_memory": "63 MB",
            "memory_percentile": 9.789399999999999,
            "pretty_lang": "C++",
            "submission_id": "1114506926",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    }
]