[
    {
        "slug": "maximum-ice-cream-bars",
        "description": "It is a sweltering summer day, and a boy wants to buy some ice cream bars.\nAt the store, there are n ice cream bars. You are given an array costs of length n, where costs[i] is the price of the ith ice cream bar in coins. The boy initially has coins coins to spend, and he wants to buy as many ice cream bars as possible.\u00a0\nNote: The boy can buy the ice cream bars in any order.\nReturn the maximum number of ice cream bars the boy can buy with coins coins.\nYou must solve the problem by counting sort.",
        "examples": [
            "Input: costs = [1,3,2,4,1], coins = 7\nOutput: 4\nExplanation: The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7.",
            "Input: costs = [10,6,8,7,7,8], coins = 5\nOutput: 0\nExplanation: The boy cannot afford any of the ice cream bars.",
            "Input: costs = [1,6,3,1,2,5], coins = 20\nOutput: 6\nExplanation: The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18."
        ],
        "constrains": "costs.length == n\n1 <= n <= 105\n1 <= costs[i] <= 105\n1 <= coins <= 108",
        "release_time": 1672980160,
        "oracle_code": "class Solution {\n    public int maxIceCream(int[] costs, int coins) {\n        int [] arr = new int [100001];\n        for(int x : costs)arr[x]++;\n        int count = 0;\n        int index = 1;\n//If coins can buy all the ice-cream at ith index.\n        while(index<100001 && coins>=index*arr[index]){\n            coins-=index*arr[index];\n            count+=arr[index];\n            index++;\n        }\n//If coins can buy onyl some of the ice-creams at ith index.\n        while(index<100001 && coins>=index){\n            coins-=index;\n            count++;\n        }\n        return count;\n    }\n}",
        "content": "# Code\\n```\\nclass Solution {\\n    public int maxIceCream(int[] costs, int coins) {\\n        int [] arr = new int [100001];\\n        for(int x : costs)arr[x]++;\\n        int count = 0;\\n        int index = 1;\\n//If coins can buy all the ice-cream at ith index.\\n        while(index<100001 && coins>=index*arr[index]){\\n            coins-=index*arr[index];\\n            count+=arr[index];\\n            index++;\\n        }\\n//If coins can buy onyl some of the ice-creams at ith index.\\n        while(index<100001 && coins>=index){\\n            coins-=index;\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```\\n\\n# Using priority Queue\\n```\\nclass Solution {\\n    public int maxIceCream(int[] costs, int coins) {\\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(Collections.reverseOrder());\\n        int sum = 0;\\n        for(int x : costs){\\n            if(sum<=coins){\\n                sum+=x;\\n                pq.add(x);\\n            }else if(pq.peek()>x){\\n                sum = sum - pq.poll() + x;\\n                pq.add(x);\\n            }\\n        }\\n        while(sum>coins){\\n            sum-=pq.poll();\\n        }\\n        return pq.size();\\n    }\\n}\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\n    public int maxIceCream(int[] costs, int coins) {\n        int [] arr = new int [100001];\n        for(int x : costs)arr[x]++;\n        int count = 0;\n        int index = 1;\n//If coins can buy all the ice-cream at ith index.\n        while(index<100001 && coins>=index*arr[index]){\n            coins-=index*arr[index];\n            count+=arr[index];\n            index++;\n        \n\n        while(index<100001 && coins>=index){\n            coins-=index;\n            count++;\n        }\n        return count;\n    }\n}\n",
        "explanations": "\nThe closing parenthesis for the first while loop is missing, creating a syntax error.\n",
        "fixed_code": "\nclass Solution {\n    public int maxIceCream(int[] costs, int coins) {\n        int [] arr = new int [100001];\n        for(int x : costs)arr[x]++;\n        int count = 0;\n        int index = 1;\n//If coins can buy all the ice-cream at ith index.\n        while(index < 100001 && coins >= index * arr[index]){\n            coins -= index * arr[index];\n            count += arr[index];\n            index++;\n        }\n\n        while(index < 100001 && coins >= index){\n            coins -= index;\n            count++;\n            index++;\n        }\n        return count;\n    }\n}\n",
        "fixing_exp": "\nThe inner while loop was not enclosed properly, added proper closing brace for it.\n",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 11,
            "lang": "java",
            "run_success": true,
            "status_runtime": "N/A",
            "memory": 59236000,
            "display_runtime": "5",
            "question_id": "1961",
            "elapsed_time": 366,
            "compare_result": "111111111011111111111111111111111111111101111111111111111110111",
            "code_output": "23",
            "std_output": "",
            "last_testcase": "[27,23,33,26,46,86,70,85,89,82,57,66,42,18,18,5,46,56,42,82,52,78,4,27,96,74,74,52,2,24,78,18,42,10,12,10,80,30,60,38,32,7,98,26,18,62,50,42,15,14,32,86,93,98,47,46,58,42,74,69,51,53,58,40,66,46,65,2,10,82,94,26,6,78,2,101,97,16,12,18,71,5,46,22,58,12,18,62,61,51,2,18,34,12,36,58,20,12,17,70]\n241",
            "expected_output": "24",
            "task_finish_time": 1701973439327,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 60,
            "total_testcases": 63,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "Java",
            "submission_id": "1114564662",
            "input_formatted": "[27,23,33,26,46,86,70,85,89,82,57,66,42,18,18,5,46,56,42,82,52,78,4,27,96,74,74,52,2,24,78,18,42,10,12,10,80,30,60,38,32,7,98,26,18,62,50,42,15,14,32,86,93,98,47,46,58,42,74,69,51,53,58,40,66,46,65,2,10,82,94,26,6,78,2,101,97,16,12,18,71,5,46,22,58,12,18,62,61,51,2,18,34,12,36,58,20,12,17,70], 241",
            "input": "[27,23,33,26,46,86,70,85,89,82,57,66,42,18,18,5,46,56,42,82,52,78,4,27,96,74,74,52,2,24,78,18,42,10,12,10,80,30,60,38,32,7,98,26,18,62,50,42,15,14,32,86,93,98,47,46,58,42,74,69,51,53,58,40,66,46,65,2,10,82,94,26,6,78,2,101,97,16,12,18,71,5,46,22,58,12,18,62,61,51,2,18,34,12,36,58,20,12,17,70]\n241",
            "status_msg": "Wrong Answer",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "add-strings",
        "description": "Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.\nYou must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.",
        "examples": [
            "Input: num1 = \"11\", num2 = \"123\"\nOutput: \"134\"",
            "Input: num1 = \"456\", num2 = \"77\"\nOutput: \"533\"",
            "Input: num1 = \"0\", num2 = \"0\"\nOutput: \"0\""
        ],
        "constrains": "1 <= num1.length, num2.length <= 104\nnum1 and num2 consist of only digits.\nnum1 and num2 don't have any leading zeros except for the zero itself.",
        "release_time": 1692165728,
        "oracle_code": "class Solution:\n    def addStrings(self, num1: str, num2: str) -> str:\n        sys.set_int_max_str_digits(10000)\n        nattu = int(num1)\n        babu = int(num2)\n        result = str(nattu+babu)\n        return result",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def addStrings(self, num1: str, num2: str) -> str:\\n        sys.set_int_max_str_digits(10000)\\n        nattu = int(num1)\\n        babu = int(num2)\\n        result = str(nattu+babu)\\n        return result\\n\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution{\n    public String addStrings(String num1, String num2) {\n        long nattu = Long.parseLong(num1);\n        long babu = Long.parseLong(num2);\n        String result = String.valueOf(nattu + babu);\n        return result;\n    }\n}\n",
        "explanations": "\nIn the original code, there are no syntax or logical errors. It runs perfectly. \n",
        "fixed_code": "\nclass Solution{\n    public String addStrings(String num1, String num2) {\n        StringBuilder result = new StringBuilder();\n        int carry = 0;\n        int p1 = num1.length() - 1;\n        int p2 = num2.length() - 1;\n        while (p1 >= 0 || p2 >= 0) {\n            int x1 = p1 >= 0 ? num1.charAt(p1) - '0' : 0;\n            int x2 = p2 >= 0 ? num2.charAt(p2) - '0' : 0;\n            int sum = x1 + x2 + carry;\n            result.append(sum % 10);\n            carry = sum / 10;\n            p1--;\n            p2--;\n        }\n        if(carry != 0)\n            result.append(carry);\n        return result.reverse().toString();\n    }\n}\n",
        "fixing_exp": "\nThe original code makes the wrong assumption that two large numbers can be added correctly using Long, this results in incorrect sums.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "java",
            "run_success": true,
            "status_runtime": "1 ms",
            "memory": 41572000,
            "display_runtime": "1",
            "question_id": "415",
            "elapsed_time": 173,
            "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701973468028,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 317,
            "total_testcases": 317,
            "runtime_percentile": 100,
            "status_memory": "41.6 MB",
            "memory_percentile": 65.41690000000001,
            "pretty_lang": "Java",
            "submission_id": "1114565004",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "max-sum-of-rectangle-no-larger-than-k",
        "description": "Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.\nIt is guaranteed that there will be a rectangle with a sum no larger than k.",
        "examples": [
            "Input: matrix = [[1,0,1],[0,-2,3]], k = 2\nOutput: 2\nExplanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).",
            "Input: matrix = [[2,2,-1]], k = 3\nOutput: 3"
        ],
        "constrains": "m == matrix.length\nn == matrix[i].length\n1 <= m, n <= 100\n-100 <= matrix[i][j] <= 100\n-105 <= k <= 105",
        "release_time": 1661575112,
        "oracle_code": "//Kadane's Algorithm Approach\n//600ms+  explained in video\n\nclass Solution {\n    public int maxSumSubmatrix(int[][] matrix, int k) {\n        int result = Integer.MIN_VALUE;\n        \n        for(int left =0 ;left<matrix[0].length; left++){\n            \n            int[] rSum = new int[matrix.length];\n            \n            for(int right = left;right<matrix[0].length;right++){\n                for(int row=0; row < matrix.length; row++)\n                    rSum[row] += matrix[row][right];\n\t\t\t\t\t\n\t\t\t\t\t//explanation of these 3 loops starts from 02:00 in Video\n                \n                TreeSet<Integer> set = new TreeSet<>();\n                \n                set.add(0);\n                int cs = 0;\n                \n                for(int a: rSum){\n                    cs += a;\n\t\t\t\t\t\n                    //if you don't understand what exactly is going on here\n\t\t\t\t\t// then watch the video from 12:27\n\t\t\t\t\t\n                    Integer target = set.ceiling(cs-k);\n                    \n                    if(target !=null)\n                        result = Math.max(result,cs-target);\n                    set.add(cs);\n                }\n            }\n        }\n        return result;\n    }\n}",
        "content": "*Please **Upvote** if you find this explanation helpful*\\n\\n**Video Explanation**\\n[Max Sum of Rectangle No Larger Than K | YouTube](https://www.youtube.com/watch?v=rztZyG5kpvM&feature=youtu.be)\\n\\n**Java Solution**\\n\\n```\\n//Kadane\\'s Algorithm Approach\\n//600ms+  explained in video\\n\\nclass Solution {\\n    public int maxSumSubmatrix(int[][] matrix, int k) {\\n        int result = Integer.MIN_VALUE;\\n        \\n        for(int left =0 ;left<matrix[0].length; left++){\\n            \\n            int[] rSum = new int[matrix.length];\\n            \\n            for(int right = left;right<matrix[0].length;right++){\\n                for(int row=0; row < matrix.length; row++)\\n                    rSum[row] += matrix[row][right];\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t//explanation of these 3 loops starts from 02:00 in Video\\n                \\n                TreeSet<Integer> set = new TreeSet<>();\\n                \\n                set.add(0);\\n                int cs = 0;\\n                \\n                for(int a: rSum){\\n                    cs += a;\\n\\t\\t\\t\\t\\t\\n                    //if you don\\'t understand what exactly is going on here\\n\\t\\t\\t\\t\\t// then watch the video from 12:27\\n\\t\\t\\t\\t\\t\\n                    Integer target = set.ceiling(cs-k);\\n                    \\n                    if(target !=null)\\n                        result = Math.max(result,cs-target);\\n                    set.add(cs);\\n                }\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```\\n\\n**Faster Approach**\\n```\\n//32ms - faster than 100%\\n\\nclass Solution {\\n    public int maxSumSubmatrix(int[][] matrix, int k) {\\n        for (int i = 0; i < matrix.length; i++) {\\n            for (int j = 0; j < matrix[0].length; j++) {\\n                if (i > 0) {\\n                    matrix[i][j] += matrix[i - 1][j];\\n                }\\n                if (j > 0) {\\n                    matrix[i][j] += matrix[i][j - 1];\\n                }\\n                if (i > 0 && j > 0) {\\n                    matrix[i][j] -= matrix[i - 1][j - 1];\\n                }\\n            }\\n        }\\n        int result = Integer.MIN_VALUE;\\n        \\n        int[][] dpHigh = new int[matrix.length][matrix.length + 1];\\n        int[][] dpLow = new int[matrix.length][matrix.length + 1];\\n        \\n        for (int i = matrix.length - 1; i >= 0; i--) {\\n            for (int h = 1; h <= matrix.length - i; h++) {\\n                int theValue = getSum(matrix, i, matrix[0].length - 1, h, 1);\\n                dpLow[i][h] = theValue;\\n                dpHigh[i][h] = theValue;\\n                if (theValue == k) {\\n                    return theValue;\\n                }\\n                if (theValue < k) {\\n                    result = Math.max(result, theValue);\\n                }\\n            }\\n        }\\n        \\n        for (int i = matrix.length - 1; i >= 0; i--) {\\n            for (int j = matrix[0].length - 2; j >= 0; j--) {\\n                for (int h = 1; h <= matrix.length - i; h++) {\\n                    int newSum = getSum(matrix, i, j, h, 1);\\n                    if (dpLow[i][h] > 0) {\\n                        dpHigh[i][h] += newSum;\\n                        dpLow[i][h] = newSum;\\n                    } else if (dpHigh[i][h] < 0) {\\n                        dpLow[i][h] += newSum;\\n                        dpHigh[i][h] = newSum;\\n                    } else {\\n                        dpHigh[i][h] += newSum;\\n                        dpLow[i][h] += newSum;\\n                    }\\n                    if (dpHigh[i][h] >= result && dpLow[i][h] <= k) {\\n                        for (int w = 1; w <= matrix[0].length - j; w++) {\\n                            int sum = getSum(matrix, i, j, h, w);\\n                            if (sum == k) {\\n                                return sum;\\n                            } else if (sum < k) {\\n                                result = Math.max(result, sum);\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return result;\\n    }\\n    \\n    private int getSum(int[][] matrix, int i, int j, int h, int w) {\\n        int sum = matrix[i + h - 1][j + w - 1];\\n        if (i > 0) {\\n            sum -= matrix[i - 1][j + w - 1];\\n        }\\n        if (j > 0) {\\n            sum -= matrix[i + h - 1][j - 1];\\n        }\\n        if (i > 0 && j > 0) {\\n            sum += matrix[i - 1][j - 1];\\n        }\\n        return sum;\\n    }\\n}\\n```",
        "level": "hard",
        "buggy_code": "\n//Kadane's Algorithm Approach\n//600ms+  explained in video\n\nclass Solution {\n    public int maxSumSubmatrix(int[][] matrix, int k) {\n        int result = Integer.MIN_VALUE;\n       \n        for(int left =0 ;left<matrix[0].length; left++){\n         \n            int[] rSum = new int[matrix.length];\n          \n            for(int right = left;right<matrix[0].length;right++){\n                for(int row=0; row < matrix.length; row++)\n                    rSum[row] += matrix[row][right];\n                    \n                    \n            \n                TreeSet<Integer> set = new TreeSet<>();\n              \n                set.add(0);\n                int cs = 0;\n               \n                for(int a: rSum){\n                    cs += a;\n                  \n                    //if you don't understand what exactly is going on here\n                    \n                  \n                    Integer target = set.ceiling(cs-k;\n                  \n                    if(target !=null)\n                        result = Math.max(result,cs-target);\n                    set.add(cs);\n                }\n            }\n        }\n        return result;\n    }\n}\n",
        "explanations": "\nThe closing parenthesis for set.ceiling(cs-k) is missing, hence causing a mismatch error.\n",
        "fixed_code": "\n//Kadane's Algorithm Approach\n//600ms+  explained in video\n\nclass Solution {\n    public int maxSumSubmatrix(int[][] matrix, int k) {\n        int result = Integer.MIN_VALUE;\n       \n        for(int left =0 ;left<matrix[0].length; left++){\n         \n            int[] rSum = new int[matrix.length];\n          \n            for(int right = left;right<matrix[0].length;right++){\n                for(int row=0; row < matrix.length; row++)\n                    rSum[row] += matrix[row][right];\n                    \n                    \n            \n                TreeSet<Integer> set = new TreeSet<>();\n              \n                set.add(0);\n                int cs = 0;\n               \n                for(int a: rSum){\n                    cs += a;\n                  \n                    //if you don't understand what exactly is going on here\n                    \n                  \n                    Integer target = set.ceiling(cs-k);\n                  \n                    if(target !=null)\n                        result = Math.max(result,cs-target);\n                    set.add(cs);\n                }\n            }\n        }\n        return result;\n    }\n}\n",
        "fixing_exp": "\nClosed the open parenthesis after \"cs-k\".\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "java",
            "run_success": true,
            "status_runtime": "292 ms",
            "memory": 43932000,
            "display_runtime": "292",
            "question_id": "363",
            "elapsed_time": 456,
            "compare_result": "111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701973502918,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 36,
            "total_testcases": 36,
            "runtime_percentile": 61.57129999999984,
            "status_memory": "43.9 MB",
            "memory_percentile": 44.21490000000001,
            "pretty_lang": "Java",
            "submission_id": "1114565399",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "baseball-game",
        "description": "You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record.\nYou are given a list of strings operations, where operations[i] is the ith operation you must apply to the record and is one of the following:\n\nAn integer x.\n\n\t\nRecord a new score of x.\n\n\n'+'.\n\t\nRecord a new score that is the sum of the previous two scores.\n\n\n'D'.\n\t\nRecord a new score that is the double of the previous score.\n\n\n'C'.\n\t\nInvalidate the previous score, removing it from the record.\n\n\n\nReturn the sum of all the scores on the record after applying all the operations.\nThe test cases are generated such that the answer and all intermediate calculations fit in a 32-bit integer and that all operations are valid.",
        "examples": [
            "Input: ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]\nOutput: 30\nExplanation:\n\"5\" - Add 5 to the record, record is now [5].\n\"2\" - Add 2 to the record, record is now [5, 2].\n\"C\" - Invalidate and remove the previous score, record is now [5].\n\"D\" - Add 2 * 5 = 10 to the record, record is now [5, 10].\n\"+\" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].\nThe total sum is 5 + 10 + 15 = 30.",
            "Input: ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]\nOutput: 27\nExplanation:\n\"5\" - Add 5 to the record, record is now [5].\n\"-2\" - Add -2 to the record, record is now [5, -2].\n\"4\" - Add 4 to the record, record is now [5, -2, 4].\n\"C\" - Invalidate and remove the previous score, record is now [5, -2].\n\"D\" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].\n\"9\" - Add 9 to the record, record is now [5, -2, -4, 9].\n\"+\" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].\n\"+\" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].\nThe total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.",
            "Input: ops = [\"1\",\"C\"]\nOutput: 0\nExplanation:\n\"1\" - Add 1 to the record, record is now [1].\n\"C\" - Invalidate and remove the previous score, record is now [].\nSince the record is empty, the total sum is 0."
        ],
        "constrains": "1 <= operations.length <= 1000\noperations[i] is \"C\", \"D\", \"+\", or a string representing an integer in the range [-3 * 104, 3 * 104].\nFor operation \"+\", there will always be at least two previous scores on the record.\nFor operations \"C\" and \"D\", there will always be at least one previous score on the record.",
        "release_time": 1689567966,
        "oracle_code": "class Solution {\n    public int calPoints(String[] operations) {\n\n        Stack<Integer> stack = new Stack<>();\n        \n        for(int i=0; i<operations.length; i++){\n            if(operations[i].equals(\"C\")){\n                stack.pop();\n            }else if(operations[i].equals(\"D\")){\n                stack.push(stack.peek() * 2);\n            }else if(operations[i].equals(\"+\") && stack.size()>=2){\n                int value1 = stack.pop();\n                int value2 = stack.pop();\n                int value = value1+ value2;\n                //push value2 back to the stack frist\n                stack.push(value2);\n                stack.push(value1);\n                stack.push(value);\n            }else {\n                stack.push(Integer.parseInt(operations[i]));\n            }\n        }\n        \n        System.out.println(\"Stack\" + stack);\n\n        int sum =0;\n        while (!stack.isEmpty()){\n            sum += stack.pop();\n        }\n        \n        return sum;\n    }\n}",
        "content": "# Approach1: Use Stack\\n# Approach2: Use Dequeue\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int calPoints(String[] operations) {\\n\\n        Stack<Integer> stack = new Stack<>();\\n        \\n        for(int i=0; i<operations.length; i++){\\n            if(operations[i].equals(\"C\")){\\n                stack.pop();\\n            }else if(operations[i].equals(\"D\")){\\n                stack.push(stack.peek() * 2);\\n            }else if(operations[i].equals(\"+\") && stack.size()>=2){\\n                int value1 = stack.pop();\\n                int value2 = stack.pop();\\n                int value = value1+ value2;\\n                //push value2 back to the stack frist\\n                stack.push(value2);\\n                stack.push(value1);\\n                stack.push(value);\\n            }else {\\n                stack.push(Integer.parseInt(operations[i]));\\n            }\\n        }\\n        \\n        System.out.println(\"Stack\" + stack);\\n\\n        int sum =0;\\n        while (!stack.isEmpty()){\\n            sum += stack.pop();\\n        }\\n        \\n        return sum;\\n    }\\n}\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\n    public int calPoints(String[] operations) {\n\n        Stack<Integer> stack = new Stack<>();\n        \n        for(int i=0; i<operations.length; i++){\n            if(operations[i].equals(\"C\")){\n                stack.pop();\n            }else if(operations[i].equals(\"D\")){\n                stack.push(stack.peek() * 2);\n            }else if(operations[i].equals(\"+\") && stack.size()>=2){\n                int value1 = stack.pop();\n                int value2 = stack.pop();\n                int value = value1+ value2;\n                //push value2 back to the stack frist\n                stack.push(value2);\n                stack.push(value1;\n                stack.push(value);\n            }else {\n                stack.push(Integer.parseInt(operations[i]));\n            }\n        }\n        \n        System.out.println(\"Stack\" + stack);\n\n        int sum =0;\n        while (!stack.isEmpty()){\n            sum += stack.pop();\n        }\n        \n        return sum;\n    }\n}\n",
        "explanations": "\nMissed closing parenthesis after the statement 'stack.push(value1', causing compiler error.\n",
        "fixed_code": "\nclass Solution {\n    public int calPoints(String[] operations) {\n\n        Stack<Integer> stack = new Stack<>();\n        \n        for(int i=0; i<operations.length; i++){\n            if(operations[i].equals(\"C\")){\n                stack.pop();\n            }else if(operations[i].equals(\"D\")){\n                stack.push(stack.peek() * 2);\n            }else if(operations[i].equals(\"+\") && stack.size()>=2){\n                int value1 = stack.pop();\n                int value2 = stack.peek();\n                int value = value1+ value2;\n                stack.push(value1);\n                stack.push(value);\n            }else {\n                stack.push(Integer.parseInt(operations[i]));\n            }\n        }\n\n        System.out.println(\"Stack\" + stack);\n\n        int sum =0;\n        while (!stack.isEmpty()){\n            sum += stack.pop();\n        }\n        \n        return sum;\n    }\n}\n",
        "fixing_exp": "\nFixed missing parenthesis and only peek the second value instead of popping it. \n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "java",
            "run_success": true,
            "status_runtime": "6 ms",
            "memory": 41372000,
            "display_runtime": "6",
            "question_id": "682",
            "elapsed_time": 105,
            "compare_result": "111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701973535540,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 39,
            "total_testcases": 39,
            "runtime_percentile": 10.100300000000011,
            "status_memory": "41.4 MB",
            "memory_percentile": 11.605300000000009,
            "pretty_lang": "Java",
            "submission_id": "1114565738",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "search-insert-position",
        "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\nYou must\u00a0write an algorithm with\u00a0O(log n) runtime complexity.",
        "examples": [
            "Input: nums = [1,3,5,6], target = 5\nOutput: 2",
            "Input: nums = [1,3,5,6], target = 2\nOutput: 1",
            "Input: nums = [1,3,5,6], target = 7\nOutput: 4"
        ],
        "constrains": "1 <= nums.length <= 104\n-104 <= nums[i] <= 104\nnums contains distinct values sorted in ascending order.\n-104 <= target <= 104",
        "release_time": 1691938245,
        "oracle_code": "class Solution {\n    public int searchInsert(int[] nums, int target) {\n        ArrayList<Integer>atr=new ArrayList<>();\n        for(int a:nums){\n            atr.add(a);\n        }\n        atr.add(target);\n        Collections.sort(atr);\n        int k=atr.indexOf(target);\n        return k;\n        \n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n![image.png](https://assets.leetcode.com/users/images/a7c0897c-8dc0-4fa5-aeca-e836b2887d45_1691938187.8801217.png)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int searchInsert(int[] nums, int target) {\\n        ArrayList<Integer>atr=new ArrayList<>();\\n        for(int a:nums){\\n            atr.add(a);\\n        }\\n        atr.add(target);\\n        Collections.sort(atr);\\n        int k=atr.indexOf(target);\\n        return k;\\n        \\n    }\\n}\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\n    public int searchInsert(int[] nums, int target) {\n        ArrayList<Integer>atr=new ArrayList<>();\n        for(int a:nums){\n            atr.add(a);\n        }\n        atr.add(target);\n        Collections.sort(atr;\n        int k=atr.indexOf(target);\n        return k;\n        \n    }\n}\n",
        "explanations": "\nClosing parenthesis is missing in the Collections.sort() method which will lead to compile time error.\n",
        "fixed_code": "\nclass Solution {\n    public int searchInsert(int[] nums, int target) {\n        ArrayList<Integer>atr=new ArrayList<>();\n        for(int a:nums){\n            atr.add(a);\n        }\n        atr.add(target);\n        Collections.sort(atr);\n        int k=atr.indexOf(target);\n        return k;\n        \n    }\n}\n",
        "fixing_exp": "\nThere was a missing closing parenthesis in Collections.sort() method call.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "java",
            "run_success": true,
            "status_runtime": "3 ms",
            "memory": 44008000,
            "display_runtime": "3",
            "question_id": "35",
            "elapsed_time": 109,
            "compare_result": "11111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701973565598,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 65,
            "total_testcases": 65,
            "runtime_percentile": 100,
            "status_memory": "44 MB",
            "memory_percentile": 7.540999999999979,
            "pretty_lang": "Java",
            "submission_id": "1114566082",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "make-costs-of-paths-equal-in-a-binary-tree",
        "description": "You are given an integer n representing the number of nodes in a perfect binary tree consisting of nodes numbered from 1 to n. The root of the tree is node 1 and each node i in the tree has two children where the left child is the node 2 * i and the right child is 2 * i + 1.\nEach node in the tree also has a cost represented by a given 0-indexed integer array cost of size n where cost[i] is the cost of node i + 1. You are allowed to increment the cost of any node by 1 any number of times.\nReturn the minimum number of increments you need to make the cost of paths from the root to each leaf node equal.\nNote:\n\nA perfect binary tree is a tree where each node, except the leaf nodes, has exactly 2 children.\nThe cost of a path is the sum of costs of nodes in the path.",
        "examples": [
            "Input: n = 7, cost = [1,5,2,2,3,3,1]\nOutput: 6\nExplanation: We can do the following increments:\n- Increase the cost of node 4 one time.\n- Increase the cost of node 3 three times.\n- Increase the cost of node 7 two times.\nEach path from the root to a leaf will have a total cost of 9.\nThe total increments we did is 1 + 3 + 2 = 6.\nIt can be shown that this is the minimum answer we can achieve.",
            "Input: n = 3, cost = [5,3,3]\nOutput: 0\nExplanation: The two paths already have equal total costs, so no increments are needed."
        ],
        "constrains": "3 <= n <= 105\nn + 1 is a power of 2\ncost.length == n\n1 <= cost[i] <= 104",
        "release_time": 1684215665,
        "oracle_code": "class Solution {\n    int res = 0;\n    public int minIncrements(int n, int[] cost) {\n        dfs(1, cost);\n        return res;\n    }\n\n    // get the max cost of a path of sub tree root at i;\n    public int dfs(int i, int[] cost) {\n        if (i > cost.length) return 0;\n        int left = dfs(i * 2, cost), right = dfs(i * 2 + 1, cost);\n        // you need keep two child tree has the same cost of path.\n        // best way to tune the root of lower cost path, increase the\n        // lower root, by Math.abs(left - right);\n        res += Math.abs(left - right);\n        return cost[i - 1] + Math.max(left, right);\n    }\n}",
        "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSee comments\\n# Complexity\\nT O(N)\\nS O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    int res = 0;\\n    public int minIncrements(int n, int[] cost) {\\n        dfs(1, cost);\\n        return res;\\n    }\\n\\n    // get the max cost of a path of sub tree root at i;\\n    public int dfs(int i, int[] cost) {\\n        if (i > cost.length) return 0;\\n        int left = dfs(i * 2, cost), right = dfs(i * 2 + 1, cost);\\n        // you need keep two child tree has the same cost of path.\\n        // best way to tune the root of lower cost path, increase the\\n        // lower root, by Math.abs(left - right);\\n        res += Math.abs(left - right);\\n        return cost[i - 1] + Math.max(left, right);\\n    }\\n}\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\n    int res = 0;\n    public int minIncrements(int n, int[] cost) {\n        dfs(1, cost;\n        return res;\n    }\n\n    public int dfs(int i, int[] cost) {\n        if (i > cost.length) return 0;\n        int left = dfs(i * 2, cost, right = dfs(i * 2 + 1, cost);\n        res += Math.abs(left - right);\n        return cost[i - 1] + Math.max(left, right);\n    }\n}\n",
        "explanations": "\nThere is a parenthesis mismatch in the dfs method call in minIncrements method leading to unexpected behaviour.\n",
        "fixed_code": "\nclass Solution {\n    int res = 0;\n    public int minIncrements(int n, int[] cost) {\n        dfs(1, cost);\n        return res;\n    }\n\n    public void dfs(int i, int[] cost) {\n        if (i > cost.length) return;\n        int left = dfs(i * 2, cost);\n        int right = dfs(i * 2 + 1, cost);\n        res += Math.abs(left - right);\n        cost[i - 1] += Math.max(left, right);\n    }\n}\n",
        "fixing_exp": "\nThe original code was trying to return a value in dfs method where it supposed to only update the values.\n",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 20,
            "lang": "java",
            "run_success": false,
            "compile_error": "Line 11: error: incompatible types: void cannot be converted to int",
            "full_compile_error": "Line 11: error: incompatible types: void cannot be converted to int\n        int left = dfs(i * 2, cost);\n                      ^\nLine 12: error: incompatible types: void cannot be converted to int\n        int right = dfs(i * 2 + 1, cost);\n                       ^\n2 errors",
            "status_runtime": "N/A",
            "memory": 0,
            "question_id": "2780",
            "task_finish_time": 1701973595520,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": null,
            "total_testcases": null,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "Java",
            "submission_id": "1114566432",
            "status_msg": "Compile Error",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "mirror-reflection",
        "description": "There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2.\nThe square room has walls of length p\u00a0and a laser ray from the southwest corner first meets the east wall at a distance q from the 0th receptor.\nGiven the two integers p and q, return the number of the receptor that the ray meets first.\nThe test cases are guaranteed so that the ray will meet a receptor eventually.",
        "examples": [
            "Input: p = 2, q = 1\nOutput: 2\nExplanation: The ray meets receptor 2 the first time it gets reflected back to the left wall.",
            "Input: p = 3, q = 1\nOutput: 1"
        ],
        "constrains": "1 <= q <= p <= 1000",
        "release_time": 1659577168,
        "oracle_code": "class Solution {\n    public int mirrorReflection(int p, int q) {\n        while(((p|q)&1) == 0){\n            p >>= 1;\n            q >>= 1;\n        }\n        return (q&1) + ((p&1)^1);\n    }\n}",
        "content": "\\tPLEASE UPVOTE IF YOU LIKE\\n```\\nclass Solution {\\n    public int mirrorReflection(int p, int q) {\\n        while(((p|q)&1) == 0){\\n            p >>= 1;\\n            q >>= 1;\\n        }\\n        return (q&1) + ((p&1)^1);\\n    }\\n}\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\n    public int mirrorReflection(int p, int q) {\n        while(((p|q)&1) == 0){\n            p >>= 1;\n            q >>= 1;\n        return (q&1) + ((p&1)^1);\n    }\n}\n",
        "explanations": "\nThe closing brace for the while loop is missing, causing a syntax error.\n",
        "fixed_code": "\nclass Solution {\n    public int mirrorReflection(int p, int q) {\n        while(((p|q)&1) == 0){\n            p >>= 1;\n            q >>= 1;\n        }\n        return (q&1) + ((p&1)^1);\n    }\n}\n",
        "fixing_exp": "\nClosing brace was missing for the while loop which resulted in a compile error.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "java",
            "run_success": true,
            "status_runtime": "0 ms",
            "memory": 39484000,
            "display_runtime": "0",
            "question_id": "888",
            "elapsed_time": 109,
            "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701973625812,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 70,
            "total_testcases": 70,
            "runtime_percentile": 100,
            "status_memory": "39.5 MB",
            "memory_percentile": 24.35869999999999,
            "pretty_lang": "Java",
            "submission_id": "1114566789",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "check-if-one-string-swap-can-make-strings-equal",
        "description": "You are given two strings s1 and s2 of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.\nReturn true if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. Otherwise, return false.",
        "examples": [
            "Input: s1 = \"bank\", s2 = \"kanb\"\nOutput: true\nExplanation: For example, swap the first character with the last character of s2 to make \"bank\".",
            "Input: s1 = \"attack\", s2 = \"defend\"\nOutput: false\nExplanation: It is impossible to make them equal with one string swap.",
            "Input: s1 = \"kelb\", s2 = \"kelb\"\nOutput: true\nExplanation: The two strings are already equal, so no string swap operation is required."
        ],
        "constrains": "1 <= s1.length, s2.length <= 100\ns1.length == s2.length\ns1 and s2 consist of only lowercase English letters.",
        "release_time": 1679756521,
        "oracle_code": "class Solution {\n    public boolean areAlmostEqual(String s1, String s2) {\n        if(s1.equals(s2))\n        return true;\n        ArrayList<Character> ts=new ArrayList<>();\n        ArrayList<Character> ts1=new ArrayList<>();\n        int count=0;\n        for(int i=0;i<s1.length();i++){\n            if(s1.charAt(i)!=s2.charAt(i)){\n            ts.add(s1.charAt(i));\n            ts1.add(s2.charAt(i));    \n        }\n        }\n        for(Character co:ts){\n            if(!(ts1.contains(co)))\n            return false;\n        }\n        return (ts.size()==2 && ts1.size()==2)?true:false;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean areAlmostEqual(String s1, String s2) {\\n        if(s1.equals(s2))\\n        return true;\\n        ArrayList<Character> ts=new ArrayList<>();\\n        ArrayList<Character> ts1=new ArrayList<>();\\n        int count=0;\\n        for(int i=0;i<s1.length();i++){\\n            if(s1.charAt(i)!=s2.charAt(i)){\\n            ts.add(s1.charAt(i));\\n            ts1.add(s2.charAt(i));    \\n        }\\n        }\\n        for(Character co:ts){\\n            if(!(ts1.contains(co)))\\n            return false;\\n        }\\n        return (ts.size()==2 && ts1.size()==2)?true:false;\\n    }\\n}\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\n    public boolean areAlmostEqual(String s1, String s2) {\n        if(s1.equals(s2))\n        return true;\n        ArrayList<Character> ts=new ArrayList<>();\n        ArrayList<Character> ts1=new ArrayList<>();\n        int count=0;\n        for(int i=0;i<s1.length();i++{\n            if(s1.charAt(i)!=s2.charAt(i)){\n                ts.add(s1.charAt(i));\n                ts1.add(s2.charAt(i));    \n            }\n        }\n        for(Character co:ts){\n            if(!(ts1.contains(co)))\n            return false;\n        }\n        return (ts.size()==2 && ts1.size()==2)?true:false;\n    }\n}\n",
        "explanations": "\nThe bug is missing closing parenthesis in the for loop statement after s1.length().\n",
        "fixed_code": "\nclass Solution {\n    public boolean areAlmostEqual(String s1, String s2) {\n        if(s1.equals(s2))\n        return true;\n        ArrayList<Character> ts=new ArrayList<>();\n        ArrayList<Character> ts1=new ArrayList<>();\n        int count=0;\n        for(int i=0;i<s1.length();i++){\n            if(s1.charAt(i)!=s2.charAt(i)){\n                ts.add(s1.charAt(i));\n                ts1.add(s2.charAt(i));    \n            }\n        }\n        for(Character co:ts){\n            if(!(ts1.contains(co)))\n            return false;\n        }\n        return (ts.size()==2 && ts1.size()==2)?true:false;\n    }\n}\n",
        "fixing_exp": "\nClosing parenthesis was missing in the \"for\" loop\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "java",
            "run_success": true,
            "status_runtime": "1 ms",
            "memory": 40664000,
            "display_runtime": "1",
            "question_id": "1915",
            "elapsed_time": 167,
            "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701973660492,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 132,
            "total_testcases": 132,
            "runtime_percentile": 55.3219,
            "status_memory": "40.7 MB",
            "memory_percentile": 46.51770000000002,
            "pretty_lang": "Java",
            "submission_id": "1114567154",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "apply-discount-every-n-orders",
        "description": "There is a supermarket that is frequented by many customers. The products sold at the supermarket are represented as two parallel integer arrays products and prices, where the ith product has an ID of products[i] and a price of prices[i].\nWhen a customer is paying, their bill is represented as two parallel integer arrays product and amount, where the jth product they purchased has an ID of product[j], and amount[j] is how much of the product they bought. Their subtotal is calculated as the sum of each amount[j] * (price of the jth product).\nThe supermarket decided to have a sale. Every nth customer paying for their groceries will be given a percentage discount. The discount amount is given by discount, where they will be given discount percent off their subtotal. More formally, if their subtotal is bill, then they would actually pay bill * ((100 - discount) / 100).\nImplement the Cashier class:\n\nCashier(int n, int discount, int[] products, int[] prices) Initializes the object with n, the discount, and the products and their prices.\ndouble getBill(int[] product, int[] amount) Returns the final total of the bill with the discount applied (if any). Answers within 10-5 of the actual value will be accepted.",
        "examples": [
            "Input\n[\"Cashier\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\"]\n[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]\nOutput\n[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]\nExplanation\nCashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);\ncashier.getBill([1,2],[1,2]);                        // return 500.0. 1st customer, no discount.\n                                                     // bill = 1 * 100 + 2 * 200 = 500.\ncashier.getBill([3,7],[10,10]);                      // return 4000.0. 2nd customer, no discount.\n                                                     // bill = 10 * 300 + 10 * 100 = 4000.\ncashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);    // return 800.0. 3rd customer, 50% discount.\n                                                     // Original bill = 1600\n                                                     // Actual bill = 1600 * ((100 - 50) / 100) = 800.\ncashier.getBill([4],[10]);                           // return 4000.0. 4th customer, no discount.\ncashier.getBill([7,3],[10,10]);                      // return 4000.0. 5th customer, no discount.\ncashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0. 6th customer, 50% discount.\n                                                     // Original bill = 14700, but with\n                                                     // Actual bill = 14700 * ((100 - 50) / 100) = 7350.\ncashier.getBill([2,3,5],[5,3,2]);                    // return 2500.0.  7th customer, no discount."
        ],
        "constrains": "1 <= n <= 104\n0 <= discount <= 100\n1 <= products.length <= 200\nprices.length == products.length\n1 <= products[i] <= 200\n1 <= prices[i] <= 1000\nThe elements in products are unique.\n1 <= product.length <= products.length\namount.length == product.length\nproduct[j] exists in products.\n1 <= amount[j] <= 1000\nThe elements of product are unique.\nAt most 1000 calls will be made to getBill.\nAnswers within 10-5 of the actual value will be accepted.",
        "release_time": 1672208305,
        "oracle_code": "class Cashier {\n    HashMap<Integer,Integer>stock=new HashMap<>();\n    int n;\n    int discount;\n    int itr=0;\n    public Cashier(int n, int discount, int[] products, int[] prices) {\n        for(int i=0;i<products.length;i++){\n            stock.put(products[i],prices[i]);\n        }\n        this.n=n;\n        this.discount=discount;\n    }\n    \n    public double getBill(int[] product, int[] amount) {\n        double total=0;\n        for(int i=0;i<product.length;i++){\n            total+=(double)(amount[i]*stock.get(product[i]));\n        }\n        itr++;\n        if(itr==n){\n            total*=(double)(((100-discount)/100d));\n            itr=0;\n        }\n        return total;\n    }\n}\n\n/**\n * Your Cashier object will be instantiated and called as such:\n * Cashier obj = new Cashier(n, discount, products, prices);\n * double param_1 = obj.getBill(product,amount);\n */",
        "content": "# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Cashier {\\n    HashMap<Integer,Integer>stock=new HashMap<>();\\n    int n;\\n    int discount;\\n    int itr=0;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        for(int i=0;i<products.length;i++){\\n            stock.put(products[i],prices[i]);\\n        }\\n        this.n=n;\\n        this.discount=discount;\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double total=0;\\n        for(int i=0;i<product.length;i++){\\n            total+=(double)(amount[i]*stock.get(product[i]));\\n        }\\n        itr++;\\n        if(itr==n){\\n            total*=(double)(((100-discount)/100d));\\n            itr=0;\\n        }\\n        return total;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
        "level": "medium",
        "buggy_code": "\nclass Cashier {\n    HashMap<Integer,Integer>stock=new HashMap<>();\n    int n;\n    int discount;\n    int itr=0;\n    public Cashier(int n, int discount, int[] products, int[] prices {\n        for(int i=0;i<products.length;i++){\n            stock.put(products[i],prices[i]);\n        }\n        this.n=n;\n        this.discount=discount;\n    }\n    \n    public double getBill(int[] product, int[] amount) {\n        double total=0;\n        for(int i=0;i<product.length;i++){\n            total+=(double)(amount[i]*stock.get(product[i]));\n        }\n        itr++;\n        if(itr==n){\n            total*=(double)(((100-discount)/100d));\n            itr=0;\n        }\n        return total;\n    }\n}\n\n/**\n * Your Cashier object will be instantiated and called as such:\n * Cashier obj = new Cashier(n, discount, products, prices);\n * double param_1 = obj.getBill(product,amount);\n */\n",
        "explanations": "\nMissing closing parenthesis in constructor Cashier's arguments, causing a syntax error.\n",
        "fixed_code": "\nimport java.util.HashMap;\n\nclass Cashier {\n    HashMap<Integer,Integer> stock=new HashMap<>();\n    int n;\n    int discount;\n    int itr=0;\n    \n    public Cashier(int n, int discount, int[] products, int[] prices) {\n        for(int i=0;i<products.length;i++){\n            stock.put(products[i], prices[i]);\n        }\n        this.n=n;\n        this.discount=discount;\n    }\n    \n    public double getBill(int[] product, int[] amount) {\n        double total=0;\n        for(int i=0;i<product.length;i++){\n            total+=(double)(amount[i]*stock.get(product[i]));\n        }\n        itr++;\n        if(itr == n){\n            total *= (double)((100.0 - discount)/100.0);\n            itr=0;\n        }\n        return total;\n    }\n}\n",
        "fixing_exp": "\nThe initial code was missing an import statement for the HashMap class, and a closing parenthesis in the constructor method was also missing.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "java",
            "run_success": true,
            "status_runtime": "104 ms",
            "memory": 75424000,
            "display_runtime": "104",
            "question_id": "1459",
            "elapsed_time": 429,
            "compare_result": "1111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701973700576,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 25,
            "total_testcases": 25,
            "runtime_percentile": 53.7117,
            "status_memory": "75.4 MB",
            "memory_percentile": 49.7815,
            "pretty_lang": "Java",
            "submission_id": "1114567584",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "convert-the-temperature",
        "description": "You are given a non-negative floating point number rounded to two decimal places celsius, that denotes the temperature in Celsius.\nYou should convert Celsius into Kelvin and Fahrenheit and return it as an array ans = [kelvin, fahrenheit].\nReturn the array ans. Answers within 10-5 of the actual answer will be accepted.\nNote that:\n\nKelvin = Celsius + 273.15\nFahrenheit = Celsius * 1.80 + 32.00",
        "examples": [
            "Input: celsius = 36.50\nOutput: [309.65000,97.70000]\nExplanation: Temperature at 36.50 Celsius converted in Kelvin is 309.65 and converted in Fahrenheit is 97.70.",
            "Input: celsius = 122.11\nOutput: [395.26000,251.79800]\nExplanation: Temperature at 122.11 Celsius converted in Kelvin is 395.26 and converted in Fahrenheit is 251.798."
        ],
        "constrains": "0 <= celsius <= 1000",
        "release_time": 1668314039,
        "oracle_code": "class Solution {\n    public double[] convertTemperature(double celsius) {\n        double arr[] = new double[2];\n        arr[1] = (celsius * 9.0/5.0) + 32.0;\n        arr[0] = celsius + 273.15;\n        return arr;\n    }\n}",
        "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe program takes a celsius value and converts it to fahrenheit and kelvin.\\n# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public double[] convertTemperature(double celsius) {\\n        double arr[] = new double[2];\\n        arr[1] = (celsius * 9.0/5.0) + 32.0;\\n        arr[0] = celsius + 273.15;\\n        return arr;\\n    }\\n}\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\n    public double[] convertTemperature(double celsius) {\n        double arr[] = new double[2];\n        arr[1 = (celsius * 9.0/5.0) + 32.0;\n        arr[0] = celsius + 273.15;\n        return arr;\n    }\n}\n",
        "explanations": "\nThe closing square bracket is missing after array index in the third line.\n",
        "fixed_code": "\nclass Solution {\n    public double[] convertTemperature(double celsius) {\n        double arr[] = new double[2];\n        arr[1] = (celsius * 9.0/5.0) + 32.0;\n        arr[0] = celsius + 273.15;\n        return arr;\n    }\n}\n",
        "fixing_exp": "\nThe bug was due to incorrect syntax for array indexing. The corrected array index is arr[1].\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "java",
            "run_success": true,
            "status_runtime": "0 ms",
            "memory": 40944000,
            "display_runtime": "0",
            "question_id": "2556",
            "elapsed_time": 142,
            "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701973729978,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 74,
            "total_testcases": 74,
            "runtime_percentile": 100,
            "status_memory": "40.9 MB",
            "memory_percentile": 27.690200000000004,
            "pretty_lang": "Java",
            "submission_id": "1114567913",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "group-the-people-given-the-group-size-they-belong-to",
        "description": "There are n people\u00a0that are split into some unknown number of groups. Each person is labeled with a\u00a0unique ID\u00a0from\u00a00\u00a0to\u00a0n - 1.\nYou are given an integer array\u00a0groupSizes, where groupSizes[i]\u00a0is the size of the group that person\u00a0i\u00a0is in. For example, if\u00a0groupSizes[1] = 3, then\u00a0person\u00a01\u00a0must be in a\u00a0group of size\u00a03.\nReturn\u00a0a list of groups\u00a0such that\u00a0each person\u00a0i\u00a0is in a group of size\u00a0groupSizes[i].\nEach person should\u00a0appear in\u00a0exactly one group,\u00a0and every person must be in a group. If there are\u00a0multiple answers, return any of them. It is guaranteed that there will be at least one valid solution for the given input.",
        "examples": [
            "Input: groupSizes = [3,3,3,3,3,1,3]\nOutput: [[5],[0,1,2],[3,4,6]]\nExplanation: \nThe first group is [5]. The size is 1, and groupSizes[5] = 1.\nThe second group is [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.\nThe third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6] = 3.\nOther possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].",
            "Input: groupSizes = [2,1,3,3,3,2]\nOutput: [[1],[0,5],[2,3,4]]"
        ],
        "constrains": "groupSizes.length == n\n1 <= n\u00a0<= 500\n1 <=\u00a0groupSizes[i] <= n",
        "release_time": 1687491634,
        "oracle_code": "class Solution {\n    public List<List<Integer>> groupThePeople(int[] groupSizes) {\n        ArrayList<List<Integer>> list =  new ArrayList<>();\n        HashMap<Integer, ArrayList<Integer>> hm = new HashMap<>();\n\n        for(int i = 0 ; i < groupSizes.length; i++){\n            if(hm.containsKey(groupSizes[i])){\n                hm.get(groupSizes[i]).add(i);\n            }\n            else{\n            \tArrayList<Integer> newL = new ArrayList<>();\n            \tnewL.add(i);\n                hm.put(groupSizes[i], newL);      \n            }\n\n            if(hm.get(groupSizes[i]).size() == groupSizes[i]){\n                list.add(hm.get(groupSizes[i]));\n                hm.remove(groupSizes[i]);\n            }\n        }\n            \n        return list;\n    }\n}\n// UP-VOTE IF HELPFUL",
        "content": "# Complexity\\n- Time complexity:\\nO(n)\\nWhere n is the size of the array groupSizes\\n\\n- Space complexity:\\nO(n)\\nWhere n is the size of the array groupSizes\\n\\n# Code\\n```\\nclass Solution {\\n    public List<List<Integer>> groupThePeople(int[] groupSizes) {\\n        ArrayList<List<Integer>> list =  new ArrayList<>();\\n        HashMap<Integer, ArrayList<Integer>> hm = new HashMap<>();\\n\\n        for(int i = 0 ; i < groupSizes.length; i++){\\n            if(hm.containsKey(groupSizes[i])){\\n                hm.get(groupSizes[i]).add(i);\\n            }\\n            else{\\n            \\tArrayList<Integer> newL = new ArrayList<>();\\n            \\tnewL.add(i);\\n                hm.put(groupSizes[i], newL);      \\n            }\\n\\n            if(hm.get(groupSizes[i]).size() == groupSizes[i]){\\n                list.add(hm.get(groupSizes[i]));\\n                hm.remove(groupSizes[i]);\\n            }\\n        }\\n            \\n        return list;\\n    }\\n}\\n// UP-VOTE IF HELPFUL\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\n    public List<List<Integer>> groupThePeople(int[] groupSizes) {\n        ArrayList<List<Integer>> list =  new ArrayList<>();\n        HashMap<Integer, ArrayList<Integer>> hm = new HashMap<>();\n\n        for(int i = 0 ; i < groupSizes.length; i++){\n            if(hm.containsKey(groupSizes[i])){\n                hm.get(groupSizes[i]).add(i);\n            }\n            else{\n            \tArrayList<Integer> newL = new ArrayList<>();\n            \tnewL.add(i);\n                hm.put(groupSizes[i], newL; \n            }\n\n            if(hm.get(groupSizes[i]).size() == groupSizes[i]){\n                list.add(hm.get(groupSizes[i]));\n                hm.remove(groupSizes[i]);\n            }\n        }\n            \n        return list;\n    }\n}\n",
        "explanations": "\nThe bug added is a missing closing parentheses in the line where a new arraylist is put into the hashmap.\n",
        "fixed_code": "\nclass Solution {\n    public List<List<Integer>> groupThePeople(int[] groupSizes) {\n        List<List<Integer>> list =  new ArrayList<>();\n        Map<Integer, List<Integer>> hm = new HashMap<>();\n\n        for(int i = 0 ; i < groupSizes.length; i++){\n            if(!hm.containsKey(groupSizes[i])){\n                hm.put(groupSizes[i], new ArrayList<>());\n            } \n            \n            hm.get(groupSizes[i]).add(i);\n            \n            if(hm.get(groupSizes[i]).size() == groupSizes[i]){\n                list.add(new ArrayList<>(hm.get(groupSizes[i])));\n                hm.get(groupSizes[i]).clear();\n            }\n        }\n\n        return list;\n    }\n}\n",
        "fixing_exp": "\nFixed the syntax error in HashMap.put() method and changed the variable type from specific implementation to interface.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "java",
            "run_success": true,
            "status_runtime": "7 ms",
            "memory": 44704000,
            "display_runtime": "7",
            "question_id": "1407",
            "elapsed_time": 199,
            "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701973760369,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 103,
            "total_testcases": 103,
            "runtime_percentile": 56.740399999999994,
            "status_memory": "44.7 MB",
            "memory_percentile": 19.51720000000001,
            "pretty_lang": "Java",
            "submission_id": "1114568233",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "count-odd-numbers-in-an-interval-range",
        "description": "Given two non-negative integers low and high. Return the count of odd numbers between low and high\u00a0(inclusive).",
        "examples": [
            "Input: low = 3, high = 7\r\nOutput: 3\r\nExplanation: The odd numbers between 3 and 7 are [3,5,7].",
            "Input: low = 8, high = 10\r\nOutput: 1\r\nExplanation: The odd numbers between 8 and 10 are [9]."
        ],
        "constrains": "0 <= low <= high\u00a0<= 10^9",
        "release_time": 1683277667,
        "oracle_code": "class Solution {\n    public int countOdds(int low, int high) {\n        if(low%2==0 && high%2==0)\n            return (high-low)/2;\n        else\n            return (high-low)/2+1;\n    }\n}",
        "content": "# Intuition\\nAt first i thought to execute it with using loops.\\n\\n# Approach\\nThere are four possible ways to get no.of odd numbers from low and high limits.\\nWhen both numbers are even print half of its difference else by adding one to it.\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int countOdds(int low, int high) {\\n        if(low%2==0 && high%2==0)\\n            return (high-low)/2;\\n        else\\n            return (high-low)/2+1;\\n    }\\n}\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\n    public int countOdds(int low, int high) {\n        if(low%2==0 && high%2==0) \n            return (high-low)/2;\n        else\n            return ((high-low)/2+1;\n    }\n}\n",
        "explanations": "\nThere is one extra opening bracket in the else return statement causing a parentheses mismatch.\n",
        "fixed_code": "\nclass Solution {\n    public int countOdds(int low, int high) {\n        if(low%2==0 && high%2==0) \n            return (high-low)/2;\n        else\n            return ((high-low)/2)+1;\n    }\n}\n",
        "fixing_exp": "\nThere was a missing closing parenthesis in the return statement of the else block.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "java",
            "run_success": true,
            "status_runtime": "0 ms",
            "memory": 39556000,
            "display_runtime": "0",
            "question_id": "1630",
            "elapsed_time": 122,
            "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701973790215,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 84,
            "total_testcases": 84,
            "runtime_percentile": 100,
            "status_memory": "39.6 MB",
            "memory_percentile": 20.57620000000001,
            "pretty_lang": "Java",
            "submission_id": "1114568565",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "number-of-students-doing-homework-at-a-given-time",
        "description": "Given two integer arrays startTime and endTime and given an integer queryTime.\nThe ith student started doing their homework at the time startTime[i] and finished it at time endTime[i].\nReturn the number of students doing their homework at time queryTime. More formally, return the number of students where queryTime lays in the interval [startTime[i], endTime[i]] inclusive.",
        "examples": [
            "Input: startTime = [1,2,3], endTime = [3,2,7], queryTime = 4\nOutput: 1\nExplanation: We have 3 students where:\nThe first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.\nThe second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.\nThe third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4.",
            "Input: startTime = [4], endTime = [4], queryTime = 4\nOutput: 1\nExplanation: The only student was doing their homework at the queryTime."
        ],
        "constrains": "startTime.length == endTime.length\n1 <= startTime.length <= 100\n1 <= startTime[i] <= endTime[i] <= 1000\n1 <= queryTime <= 1000",
        "release_time": 1690396136,
        "oracle_code": "class Solution {\n    public int busyStudent(int[] startTime, int[] endTime, int queryTime) {\n        int n=endTime.length;\n    int cnt=0;\n        for(int i=0;i<n;i++)\n        {\n            if(endTime[i]>=queryTime && queryTime>=startTime[i] )\n            {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int busyStudent(int[] startTime, int[] endTime, int queryTime) {\\n        int n=endTime.length;\\n    int cnt=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(endTime[i]>=queryTime && queryTime>=startTime[i] )\\n            {\\n                cnt++;\\n            }\\n        }\\n        return cnt;\\n    }\\n}\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\n    public int busyStudent(int[] startTime, int[] endTime, int queryTime) {\n        int n=endTime.length;\n    int cnt=0;\n        for(int i=0;i<n;i++)\n        {\n            if(endTime[i]>=queryTime && queryTime>=startTime[i])\n            {\n                cnt++;\n            }\n            {\n        return cnt;  \n    }\n}\n",
        "explanations": "\nIn the for loop, there is an extra opening curly bracket, leading to a mismatch in parentheses. \n",
        "fixed_code": "\nclass Solution {\n    public int busyStudent(int[] startTime, int[] endTime, int queryTime) {\n        int n=endTime.length;\n        int cnt=0;\n        for(int i=0;i<n;i++)\n        {\n            if(endTime[i]>=queryTime && queryTime>=startTime[i])\n            {\n                cnt++;\n            }\n        }\n        return cnt;  \n    }\n}\n",
        "fixing_exp": "\nI removed the extra opening bracket before the return statement.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "java",
            "run_success": true,
            "status_runtime": "0 ms",
            "memory": 40624000,
            "display_runtime": "0",
            "question_id": "1560",
            "elapsed_time": 138,
            "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701973820818,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 111,
            "total_testcases": 111,
            "runtime_percentile": 100,
            "status_memory": "40.6 MB",
            "memory_percentile": 30.339999999999996,
            "pretty_lang": "Java",
            "submission_id": "1114568896",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "find-nearest-point-that-has-the-same-x-or-y-coordinate",
        "description": "You are given two integers, x and y, which represent your current location on a Cartesian grid: (x, y). You are also given an array points where each points[i] = [ai, bi] represents that a point exists at (ai, bi). A point is valid if it shares the same x-coordinate or the same y-coordinate as your location.\nReturn the index (0-indexed) of the valid point with the smallest Manhattan distance from your current location. If there are multiple, return the valid point with the smallest index. If there are no valid points, return -1.\nThe Manhattan distance between two points (x1, y1) and (x2, y2) is abs(x1 - x2) + abs(y1 - y2).",
        "examples": [
            "Input: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]\nOutput: 2\nExplanation: Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2.",
            "Input: x = 3, y = 4, points = [[3,4]]\nOutput: 0\nExplanation: The answer is allowed to be on the same location as your current location.",
            "Input: x = 3, y = 4, points = [[2,3]]\nOutput: -1\nExplanation: There are no valid points."
        ],
        "constrains": "1 <= points.length <= 104\npoints[i].length == 2\n1 <= x, y, ai, bi <= 104",
        "release_time": 1683538037,
        "oracle_code": "class Solution {\n    public int nearestValidPoint(int x, int y, int[][] points) {\n        int minManh = Integer.MAX_VALUE;\n        int indMin = -1;\n        for (int i = 0; i < points.length; i++)\n        {\n            int tmpManh = Math.abs(x - points[i][0]) + Math.abs(y - points[i][1]);\n            if ((x == points[i][0] || y == points[i][1]) && (tmpManh < minManh))\n            {\n                minManh = tmpManh;\n                indMin = i;\n            }\n        }\n        return indMin;\n    }\n}",
        "content": "\\n```\\nclass Solution {\\n    public int nearestValidPoint(int x, int y, int[][] points) {\\n        int minManh = Integer.MAX_VALUE;\\n        int indMin = -1;\\n        for (int i = 0; i < points.length; i++)\\n        {\\n            int tmpManh = Math.abs(x - points[i][0]) + Math.abs(y - points[i][1]);\\n            if ((x == points[i][0] || y == points[i][1]) && (tmpManh < minManh))\\n            {\\n                minManh = tmpManh;\\n                indMin = i;\\n            }\\n        }\\n        return indMin;\\n    }\\n}\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\n    public int nearestValidPoint(int x, int y, int[][] points) {\n        int minManh = Integer.MAX_VALUE;\n        int indMin = -1;\n        for (int i = 0; i < points.length; i++\n        {\n            int tmpManh = Math.abs(x - points[i][0]) + Math.abs(y - points[i][1]);\n            if ((x == points[i][0] || y == points[i][1]) && (tmpManh < minManh))\n            {\n                minManh = tmpManh;\n                indMin = i;\n            }\n        }\n        return indMin;\n    }\n}\n",
        "explanations": "\nThe bug is a missing parenthesis in the for loop, which will cause a compilation error.\n",
        "fixed_code": "\nclass Solution {\n    public int nearestValidPoint(int x, int y, int[][] points) {\n        int minManh = Integer.MAX_VALUE;\n        int indMin = -1;\n        for (int i = 0; i < points.length; i++) {\n            int tmpManh = Math.abs(x - points[i][0]) + Math.abs(y - points[i][1]);\n            if ((x == points[i][0] || y == points[i][1]) && (tmpManh < minManh)) {\n                minManh = tmpManh;\n                indMin = i;\n            }\n        }\n        return indMin;\n    }\n}\n",
        "fixing_exp": "\nAdded closing parenthesis on the \"for\" loop statement.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "java",
            "run_success": true,
            "status_runtime": "5 ms",
            "memory": 50096000,
            "display_runtime": "5",
            "question_id": "1888",
            "elapsed_time": 217,
            "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701973851236,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 102,
            "total_testcases": 102,
            "runtime_percentile": 16.714699999999986,
            "status_memory": "50.1 MB",
            "memory_percentile": 82.1323,
            "pretty_lang": "Java",
            "submission_id": "1114569223",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "minimum-score-triangulation-of-polygon",
        "description": "You have a convex n-sided polygon where each vertex has an integer value. You are given an integer array values where values[i] is the value of the ith vertex (i.e., clockwise order).\nYou will triangulate the polygon into n - 2 triangles. For each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all n - 2 triangles in the triangulation.\nReturn the smallest possible total score that you can achieve with some triangulation of the polygon.",
        "examples": [
            "Input: values = [1,2,3]\nOutput: 6\nExplanation: The polygon is already triangulated, and the score of the only triangle is 6.",
            "Input: values = [3,7,4,5]\nOutput: 144\nExplanation: There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.\nThe minimum score is 144.",
            "Input: values = [1,3,1,4,1,5]\nOutput: 13\nExplanation: The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13."
        ],
        "constrains": "n == values.length\n3 <= n <= 50\n1 <= values[i] <= 100",
        "release_time": 1682753898,
        "oracle_code": "class Solution {\n    int[][] dp;\n    public int minScoreTriangulation(int[] values) {\n        int l=values.length;\n        dp = new int[l][l];\n        for(int[] i : dp) Arrays.fill(i,-1);\n        return solve(values,1,l-1); \n    }\n\n    public int solve(int[] values, int i,int j)\n    {\n        if(i>=j) return 0;\n        if(dp[i][j]!=-1) return dp[i][j];\n        int min=Integer.MAX_VALUE;\n        for(int k=i;k<j;k++)\n        {\n            int temp=solve(values,i,k)+solve(values,k+1,j)+\n                        values[i-1]*values[k]*values[j];\n            min=Math.min(min,temp);\n        }\n\n        return dp[i][j]=min;\n    }\n}",
        "content": "\\n# Complexity\\n- Time complexity: n^2\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: n^2\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    int[][] dp;\\n    public int minScoreTriangulation(int[] values) {\\n        int l=values.length;\\n        dp = new int[l][l];\\n        for(int[] i : dp) Arrays.fill(i,-1);\\n        return solve(values,1,l-1); \\n    }\\n\\n    public int solve(int[] values, int i,int j)\\n    {\\n        if(i>=j) return 0;\\n        if(dp[i][j]!=-1) return dp[i][j];\\n        int min=Integer.MAX_VALUE;\\n        for(int k=i;k<j;k++)\\n        {\\n            int temp=solve(values,i,k)+solve(values,k+1,j)+\\n                        values[i-1]*values[k]*values[j];\\n            min=Math.min(min,temp);\\n        }\\n\\n        return dp[i][j]=min;\\n    }\\n}\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\n    int[][] dp;\n    public int minScoreTriangulation(int[] values) {\n        int l=values.length;\n        dp = new int[l][l];\n        for(int[] i : dp) Arrays.fill(i,-1);\n        return solve(values,1,l-1); \n    }\n\n    public int solve(int[] values, int i,int j)\n    {\n        if(i>=j) return 0;\n        if(dp[i][j]!=-1) return dp[i][j];\n        int min=Integer.MAX_VALUE;\n        for(int k=i;k<j;k++)\n        {\n            int temp=solve(values,i,k)+solve(values,k+1,j)\n                        values[i-1]*values[k]*values[j];\n            min=Math.min(min,temp);\n        }\n\n        return dp[i][j]=min;\n    }\n}\n",
        "explanations": "\nMissing '+' operator between the solve and array multiplication statements in the temp calculation.\n",
        "fixed_code": "\nclass Solution {\n    int[][] dp;\n    public int minScoreTriangulation(int[] values) {\n        int l = values.length;\n        dp = new int[l][l];\n        for(int[] i : dp) Arrays.fill(i,-1);\n        return solve(values,1,l-1); \n    }\n\n    public int solve(int[] values, int i, int j)\n    {\n        if(i >= j) return 0;\n        if(dp[i][j] != -1) return dp[i][j];\n        int min = Integer.MAX_VALUE;\n        for(int k = i; k < j; k++)\n        {\n            int temp = solve(values, i, k) + solve(values, k + 1, j) +\n                        values[i-1] * values[k] * values[j];\n            min=Math.min(min, temp);\n        }\n\n        return dp[i][j] = min;\n    }\n}\n",
        "fixing_exp": "\nAdded missing \"+\" operator to combine temp calculation lines.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "java",
            "run_success": true,
            "status_runtime": "2 ms",
            "memory": 40380000,
            "display_runtime": "2",
            "question_id": "1111",
            "elapsed_time": 136,
            "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701973886529,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 94,
            "total_testcases": 94,
            "runtime_percentile": 97.7419,
            "status_memory": "40.4 MB",
            "memory_percentile": 29.032300000000006,
            "pretty_lang": "Java",
            "submission_id": "1114569588",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "prime-in-diagonal",
        "description": "You are given a 0-indexed two-dimensional integer array nums.\nReturn the largest prime number that lies on at least one of the diagonals of nums. In case, no prime is present on any of the diagonals, return 0.\nNote that:\n\nAn integer is prime if it is greater than 1 and has no positive integer divisors other than 1 and itself.\nAn integer val is on one of the diagonals of nums if there exists an integer i for which nums[i][i] = val or an i for which nums[i][nums.length - i - 1] = val.\n\n\nIn the above diagram, one diagonal is [1,5,9] and another diagonal is [3,5,7].",
        "examples": [
            "Input: nums = [[1,2,3],[5,6,7],[9,10,11]]\nOutput: 11\nExplanation: The numbers 1, 3, 6, 9, and 11 are the only numbers present on at least one of the diagonals. Since 11 is the largest prime, we return 11.",
            "Input: nums = [[1,2,3],[5,17,7],[9,11,10]]\nOutput: 17\nExplanation: The numbers 1, 3, 9, 10, and 17 are all present on at least one of the diagonals. 17 is the largest prime, so we return 17."
        ],
        "constrains": "1 <= nums.length <= 300\nnums.length == numsi.length\n1 <= nums[i][j]\u00a0<= 4*106",
        "release_time": 1683757802,
        "oracle_code": "class Solution {\n    public int diagonalPrime(int[][] nums) {\n        int n = nums.length;\n        int m = nums[0].length;\n        int maxim = 0;\n        for (int i = 0; i < n; i++) {\n                if (checkPrime(nums[i][i])) {\n                    maxim = Math.max(maxim, nums[i][i]);\n                } \n                if (checkPrime(nums[n-1-i][i])) {\n                    maxim = Math.max(maxim, nums[n - i - 1][i]);\n\n                }\n            \n        }\n        return maxim;\n    }\n    public boolean checkPrime(int k) {\n\n        int count = 0;\n        if (k == 1) {\n            return false;\n        }\n        for (int i = 1; i * i <= k; i++) {\n          if (k % i == 0) {\n              count += 2;\n          }\n      }\n      if (count == 2) {\n          return true; \n      } else {\n          return false;\n      }\n      \n    }\n\n}",
        "content": "**Must read if there is any doubt feel free to ask in comments**\\n\\nSomehow beginners face difficulty to understand the concept at first, but i will try my best to breakdown the question into simpler parts so that there would be ease to understand for beginners.\\n\\n\\n\\n**first we have to check prime number on the diagnol of the matrix.**\\n\\n**Step 1** -> so we make a function to check wether the given number is prime or not\\n\\n**Note** -> there are several functions to checkPrime as a naive/beginner you apply what you have learnt in fundamentals programming but it would not work\\n\\nBut here we have to create a checkPrime no. function that would be  optimized otherwise you will get **TLE** which is **Time Limit Exceeded** error.\\n\\n\\nTo find a prime number what we do firstly? -> find factors\\n\\ne.g\\n Num - > 12\\nfactors -> \\n\\n    **i** -------- **k**\\n    1 * 12 = 12\\n    2 * 6 = 12\\n    3 * 4 = 12\\n    4 * 3 = 12\\n    6 * 2 = 12\\n    12 * 1 = 12\\n\\nwe have total 6 factors \\n\\n**Trivial method: TLE occurs for this coz it isn\\'t optimized.**\\n\\nint count = 0;\\nif (k < 2) {\\n    return false;\\n}\\nfor (int i = 1; i < k; i++) {\\n    if (k % i == 0) {\\n        count++;        \\n    }\\n}\\nif (count == 2) {\\n    return true;\\n} else {\\n    return false;\\n}\\n\\nNow what if I say we do not need to iterate till k if we focus on the pattern we see that after i = 3 same numbers are repeating such as (4,3) despite (3,4) was there already , similarly (6,2) despite (2,6) is there etc...\\n\\nnow what we do is we would iterate our loop from **i to \\u221Ak** or we can write it as **i * i to k** also **so that our i iterate in the range between [1 - 3] so we have to take the square root of k. \\ni.e \\n1 * 12, 2 * 6, 3 * 4 and we get all the 6 factors till i = 3.**\\n\\n\\ne.g\\n Num - > 12\\nfactors -> 1, 2, 3, 4, 6, 12\\n**i ------- k**\\n1 * 12 = 12\\n2 * 6 = 12\\n3 * 4 = 12\\n\\n 4 * 3 = 12\\n 6 * 2 = 12\\n12 * 1 = 12\\n\\nfor (int i = 1; i * i <= k; i++) {\\n    if (k < 2) {\\n    return false;\\n    }\\n    if (k % i == 0) {\\n        count +=2; \\n//count + 2 because 1 * 12 we grab two factors from herethen why we need to go till 12.\\n\\n}\\nif (count == 2) {\\nreturn true\\n} else {\\nreturn false;\\n}\\n}\\n\\n**Now we have converted our problem in \\u221An time complexity.**\\n\\n\\n\\n\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int diagonalPrime(int[][] nums) {\\n        int n = nums.length;\\n        int m = nums[0].length;\\n        int maxim = 0;\\n        for (int i = 0; i < n; i++) {\\n                if (checkPrime(nums[i][i])) {\\n                    maxim = Math.max(maxim, nums[i][i]);\\n                } \\n                if (checkPrime(nums[n-1-i][i])) {\\n                    maxim = Math.max(maxim, nums[n - i - 1][i]);\\n\\n                }\\n            \\n        }\\n        return maxim;\\n    }\\n    public boolean checkPrime(int k) {\\n\\n        int count = 0;\\n        if (k == 1) {\\n            return false;\\n        }\\n        for (int i = 1; i * i <= k; i++) {\\n          if (k % i == 0) {\\n              count += 2;\\n          }\\n      }\\n      if (count == 2) {\\n          return true; \\n      } else {\\n          return false;\\n      }\\n      \\n    }\\n\\n}\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\n    public int diagonalPrime(int[][] nums) {\n        int n = nums.length;\n        int m = nums[0].length;\n        int maxim = 0;\n        for (int i = 0; i < n; i++) {\n                if (checkPrime(nums[i][i])) {\n                    maxim = Math.max(maxim, nums[i][i]);\n                } \n                if (checkPrime(nums[n-1-i][i])) {\n                    maxim = Math.max(maxim, nums[n - i - 1][i]);\n                }\n        return maxim;\n        }\n    }\n    public boolean checkPrime(int k) {\n        int count = 0;\n        if (k == 1) {\n            return false;\n        }\n        for (int i = 1; i * i <= k; i++) {\n          if (k % i == 0) {\n              count += 2;\n          }\n      }\n      if (count == 2) {\n          return true; \n      } else {\n          return false;\n      }\n      \n    }\n}\n",
        "explanations": "\nIn the method \"diagonalPrime\", the return statement is placed inside the for loop.\n",
        "fixed_code": "\nclass Solution {\n    public int diagonalPrime(int[][] nums) {\n        int n = nums.length;\n        int m = nums[0].length;\n        int maxim = 0;\n        for (int i = 0; i < n; i++) {\n                if (checkPrime(nums[i][i])) {\n                    maxim = Math.max(maxim, nums[i][i]);\n                } \n                if (checkPrime(nums[n-1-i][i])) {\n                    maxim = Math.max(maxim, nums[n - i - 1][i]);\n                }\n        }\n        return maxim;\n    }\n    public boolean checkPrime(int k) {\n        if (k == 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= k; i++) {\n          if (k % i == 0) {\n              return false;\n          }\n      }\n      return true;\n    }\n}\n",
        "fixing_exp": "\nReturned the \"maxim\" outside of the loop. Simplified the prime checking function.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "java",
            "run_success": true,
            "status_runtime": "4 ms",
            "memory": 56312000,
            "display_runtime": "4",
            "question_id": "2722",
            "elapsed_time": 320,
            "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701973917198,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 82,
            "total_testcases": 82,
            "runtime_percentile": 81.8591,
            "status_memory": "56.3 MB",
            "memory_percentile": 36.88139999999997,
            "pretty_lang": "Java",
            "submission_id": "1114569907",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "remove-k-digits",
        "description": "Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.",
        "examples": [
            "Input: num = \"1432219\", k = 3\nOutput: \"1219\"\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.",
            "Input: num = \"10200\", k = 1\nOutput: \"200\"\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.",
            "Input: num = \"10\", k = 2\nOutput: \"0\"\nExplanation: Remove all the digits from the number and it is left with nothing which is 0."
        ],
        "constrains": "1 <= k <= num.length <= 105\nnum consists of only digits.\nnum does not have any leading zeros except for the zero itself.",
        "release_time": 1680704468,
        "oracle_code": "class Solution {\n    public String removeKdigits(String num, int k) {\n        Stack<Character> st = new Stack<>();\n        for(Character ch : num.toCharArray()) {\n            while(!st.isEmpty() && k > 0 && ch < st.peek()) {\n                st.pop();\n                k--;\n            }\n\n            if(!st.isEmpty() || ch != '0') {\n                st.push(ch);\n            }\n        }\n\n        // This is a special edge case --> 1 2 3 4\n        while(!st.isEmpty() && k-- > 0) {\n            st.pop();\n        }\n        if(st.isEmpty()) return \"0\";\n        \n\n        // Store the ans -->\n        String ans = \"\";\n        while(!st.isEmpty()) {\n            ans = st.peek() + ans;\n            st.pop();\n        }\n        return ans;\n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n# Code\\n```\\nclass Solution {\\n    public String removeKdigits(String num, int k) {\\n        Stack<Character> st = new Stack<>();\\n        for(Character ch : num.toCharArray()) {\\n            while(!st.isEmpty() && k > 0 && ch < st.peek()) {\\n                st.pop();\\n                k--;\\n            }\\n\\n            if(!st.isEmpty() || ch != \\'0\\') {\\n                st.push(ch);\\n            }\\n        }\\n\\n        // This is a special edge case --> 1 2 3 4\\n        while(!st.isEmpty() && k-- > 0) {\\n            st.pop();\\n        }\\n        if(st.isEmpty()) return \"0\";\\n        \\n\\n        // Store the ans -->\\n        String ans = \"\";\\n        while(!st.isEmpty()) {\\n            ans = st.peek() + ans;\\n            st.pop();\\n        }\\n        return ans;\\n    }\\n}\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\n    public String removeKdigits(String num, int k) {\n        Stack<Character> st = new Stack<>();\n        for(Character ch : num.toCharArray()) {\n            while(!st.isEmpty() && k > 0 && ch < st.peek())\n                st.pop();\n                k--;\n\n            if(!st.isEmpty() || ch != '0') {\n                st.push(ch);\n            }\n        }\n\n        while(!st.isEmpty() && k-- > 0) {\n            st.pop();\n        }\n        if(st.isEmpty()) return \"0\";\n \n        String ans = \"\";\n        while(!st.isEmpty()) {\n            ans = st.peek() + ans;\n            st.pop();\n        }\n        return ans;\n    }\n}\n",
        "explanations": "\nThe second decrement operation on 'k' isn't contained within the while loop's body due to missing braces.\n",
        "fixed_code": "\nclass Solution {\n    public String removeKdigits(String num, int k) {\n        Stack<Character> st = new Stack<>();\n        for(Character ch : num.toCharArray()) {\n            while(!st.isEmpty() && k > 0 && ch < st.peek()){\n                st.pop();\n                k--;\n            }\n            if(!st.isEmpty() || ch != '0') {\n                st.push(ch);\n            }\n        }\n        while(!st.isEmpty() && k-- > 0) {\n            st.pop();\n        }\n        if(st.isEmpty()) return \"0\";\n \n        String ans = \"\";\n        while(!st.isEmpty()) {\n            ans = st.peek() + ans;\n            st.pop();\n        }\n        return ans;\n    }\n}\n",
        "fixing_exp": "\nFixed the misplaced decrement of counter 'k' outside 'while' loop. It should only decrement when the condition is true.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "java",
            "run_success": true,
            "status_runtime": "92 ms",
            "memory": 45708000,
            "display_runtime": "92",
            "question_id": "402",
            "elapsed_time": 362,
            "compare_result": "1111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701973950591,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 43,
            "total_testcases": 43,
            "runtime_percentile": 19.6008,
            "status_memory": "45.7 MB",
            "memory_percentile": 7.5879000000000385,
            "pretty_lang": "Java",
            "submission_id": "1114570259",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "sort-even-and-odd-indices-independently",
        "description": "You are given a 0-indexed integer array nums. Rearrange the values of nums according to the following rules:\n\nSort the values at odd indices of nums in non-increasing order.\n\n\t\nFor example, if nums = [4,1,2,3] before this step, it becomes [4,3,2,1] after. The values at odd indices 1 and 3 are sorted in non-increasing order.\n\n\nSort the values at even indices of nums in non-decreasing order.\n\t\nFor example, if nums = [4,1,2,3] before this step, it becomes [2,1,4,3] after. The values at even indices 0 and 2 are sorted in non-decreasing order.\n\n\n\nReturn the array formed after rearranging the values of nums.",
        "examples": [
            "Input: nums = [4,1,2,3]\nOutput: [2,3,4,1]\nExplanation: \nFirst, we sort the values present at odd indices (1 and 3) in non-increasing order.\nSo, nums changes from [4,1,2,3] to [4,3,2,1].\nNext, we sort the values present at even indices (0 and 2) in non-decreasing order.\nSo, nums changes from [4,1,2,3] to [2,3,4,1].\nThus, the array formed after rearranging the values is [2,3,4,1].",
            "Input: nums = [2,1]\nOutput: [2,1]\nExplanation: \nSince there is exactly one odd index and one even index, no rearrangement of values takes place.\nThe resultant array formed is [2,1], which is the same as the initial array."
        ],
        "constrains": "1 <= nums.length <= 100\n1 <= nums[i] <= 100",
        "release_time": 1678770695,
        "oracle_code": "class Solution {\n    public int[] sortEvenOdd(int[] nums) {\n        PriorityQueue<Integer> queue = new PriorityQueue<>();\n        for(int i=0;i<nums.length;i+=2){\n            queue.add(nums[i]);\n        }\n        for(int i=0;i<nums.length;i+=2){\n            nums[i]=queue.poll();\n        }\n        queue = new PriorityQueue<>(new MaxHeap());\n        for(int i=1;i<nums.length;i+=2){\n            queue.add(nums[i]);\n        }\n        for(int i=1;i<nums.length;i+=2){\n            nums[i]=queue.poll();\n        }\n        return nums;\n    }\n}\nclass MaxHeap implements Comparator<Integer>{\n    public int compare(Integer ca,Integer cb){\n        return cb-ca;\n    }\n}",
        "content": "\\n> # Approach\\nLet\\'s use some data structutes to solve this problem,By adding even indexed numbers into MinHeap we can sort the data in ascending order,By adding odd indexed numbers into Maxheap we can sort the data in descending order. \\n<!-- Describe your approach to solving the problem. -->\\n\\n> # Complexity\\n- Time complexity: O(n log(n))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n) for Priority Queue\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n> # Code\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        PriorityQueue<Integer> queue = new PriorityQueue<>();\\n        for(int i=0;i<nums.length;i+=2){\\n            queue.add(nums[i]);\\n        }\\n        for(int i=0;i<nums.length;i+=2){\\n            nums[i]=queue.poll();\\n        }\\n        queue = new PriorityQueue<>(new MaxHeap());\\n        for(int i=1;i<nums.length;i+=2){\\n            queue.add(nums[i]);\\n        }\\n        for(int i=1;i<nums.length;i+=2){\\n            nums[i]=queue.poll();\\n        }\\n        return nums;\\n    }\\n}\\nclass MaxHeap implements Comparator<Integer>{\\n    public int compare(Integer ca,Integer cb){\\n        return cb-ca;\\n    }\\n}\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\n    public int[] sortEvenOdd(int[] nums) {\n        PriorityQueue<Integer> queue = new PriorityQueue<>();\n        for(int i=0;i<nums.length;i+=2){\n            queue.add(nums[i]);\n        }\n        for(int i=0;i<nums.length;i+=2){\n            nums[i]=queue.poll();\n        }\n        queue = new PriorityQueue<>(new MaxHeap());\n        for(int i=1;i<nums.length;i+=2){\n            queue.add(nums[i]);\n        for(int i=1;i<nums.length;i+=2){\n            nums[i]=queue.poll();\n        }\n        return nums;\n    }\n}\nclass MaxHeap implements Comparator<Integer>{\n    public int compare(Integer ca,Integer cb){\n        return cb-ca;\n    }\n}  \n",
        "explanations": "\nThere is a missing closing bracket for the third for-loop.\n",
        "fixed_code": "\nclass Solution {\n    public int[] sortEvenOdd(int[] nums) {\n        PriorityQueue<Integer> queue = new PriorityQueue<>();\n        for(int i=0;i<nums.length;i+=2){\n            queue.add(nums[i]);\n        }\n        for(int i=0;i<nums.length;i+=2){\n            nums[i]=queue.poll();\n        }\n        queue = new PriorityQueue<>(new MaxHeap());\n        for(int i=1;i<nums.length;i+=2){\n            queue.add(nums[i]);\n        }\n        for(int i=1;i<nums.length;i+=2){\n            nums[i]=queue.poll();\n        }\n        return nums;\n    }\n}\nclass MaxHeap implements Comparator<Integer>{\n    public int compare(Integer ca,Integer cb){\n        return cb-ca;\n    }\n}  \n",
        "fixing_exp": "\nThere was a missing closing brace in the second last for loop. Fixed by adding a brace before second last for loop.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "java",
            "run_success": true,
            "status_runtime": "3 ms",
            "memory": 43448000,
            "display_runtime": "3",
            "question_id": "2283",
            "elapsed_time": 177,
            "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701973984176,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 218,
            "total_testcases": 218,
            "runtime_percentile": 65.68209999999999,
            "status_memory": "43.4 MB",
            "memory_percentile": 87.48269999999995,
            "pretty_lang": "Java",
            "submission_id": "1114570633",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    },
    {
        "slug": "clone-graph",
        "description": "Given a reference of a node in a connected undirected graph.\nReturn a deep copy (clone) of the graph.\nEach node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\n\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n}\n\n\u00a0\nTest case format:\nFor simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.\nAn adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\nThe given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.",
        "examples": [
            "Input: adjList = [[2,4],[1,3],[2,4],[1,3]]\nOutput: [[2,4],[1,3],[2,4],[1,3]]\nExplanation: There are 4 nodes in the graph.\n1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).",
            "Input: adjList = [[]]\nOutput: [[]]\nExplanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.",
            "Input: adjList = []\nOutput: []\nExplanation: This an empty graph, it does not have any nodes."
        ],
        "constrains": "The number of nodes in the graph is in the range [0, 100].\n1 <= Node.val <= 100\nNode.val is unique for each node.\nThere are no repeated edges and no self-loops in the graph.\nThe Graph is connected and all nodes can be visited starting from the given node.",
        "release_time": 1680964761,
        "oracle_code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    public void dfs(Node node, HashMap<Node, Node> dict)\n    {\n        for (Node nd : node.neighbors) {\n            if (!dict.containsKey(nd))\n                dict.put(nd, new Node(nd.val));\n            dict.get(node).neighbors.add(dict.get(nd));\n        }\n        for (Node nd : node.neighbors)\n        {\n            if (dict.get(nd).neighbors.size() == 0)\n                dfs(nd, dict);\n        }\n    }\n    public Node cloneGraph(Node node) {\n        HashMap<Node, Node> dict = new HashMap<>();\n        if (node != null) {\n            dict.put(node, new Node(node.val));\n            dfs(node, dict);\n            return dict.get(node);\n        }\n        return null;\n    }\n}",
        "content": "\\n```\\n/*\\n// Definition for a Node.\\nclass Node {\\n    public int val;\\n    public List<Node> neighbors;\\n    public Node() {\\n        val = 0;\\n        neighbors = new ArrayList<Node>();\\n    }\\n    public Node(int _val) {\\n        val = _val;\\n        neighbors = new ArrayList<Node>();\\n    }\\n    public Node(int _val, ArrayList<Node> _neighbors) {\\n        val = _val;\\n        neighbors = _neighbors;\\n    }\\n}\\n*/\\n\\nclass Solution {\\n    public void dfs(Node node, HashMap<Node, Node> dict)\\n    {\\n        for (Node nd : node.neighbors) {\\n            if (!dict.containsKey(nd))\\n                dict.put(nd, new Node(nd.val));\\n            dict.get(node).neighbors.add(dict.get(nd));\\n        }\\n        for (Node nd : node.neighbors)\\n        {\\n            if (dict.get(nd).neighbors.size() == 0)\\n                dfs(nd, dict);\\n        }\\n    }\\n    public Node cloneGraph(Node node) {\\n        HashMap<Node, Node> dict = new HashMap<>();\\n        if (node != null) {\\n            dict.put(node, new Node(node.val));\\n            dfs(node, dict);\\n            return dict.get(node);\\n        }\\n        return null;\\n    }\\n}\\n```",
        "level": "medium",
        "buggy_code": "\n/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    public void dfs(Node node, HashMap<Node, Node> dict)\n    {\n        for (Node nd : node.neighbors) {\n            if (!dict.containsKey(nd))\n                dict.put(nd, new Node(nd.val));\n            dict.get(node).neighbors.add(dict.get(nd);\n        }\n        for (Node nd : node.neighbors)\n        {\n            if (dict.get(nd).neighbors.size() == 0)\n                dfs(nd, dict);\n        }\n    }\n    public Node cloneGraph(Node node) {\n        HashMap<Node, Node> dict = new HashMap<>();\n        if (node != null) {\n            dict.put(node, new Node(node.val));\n            dfs(node, dict);\n            return dict.get(node);\n        }\n        return null;\n    }\n}\n",
        "explanations": "\nThe parentheses mismatch at the add method produce a syntax error which will cause unexpected behavior.\n",
        "fixed_code": "\n/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    public void dfs(Node node, HashMap<Node, Node> dict)\n    {\n        for (Node nd : node.neighbors) {\n            if (!dict.containsKey(nd))\n                dict.put(nd, new Node(nd.val));\n            dict.get(node).neighbors.add(dict.get(nd));\n        }\n        for (Node nd : node.neighbors)\n        {\n            if (dict.get(nd).neighbors.size() == 0)\n                dfs(nd, dict);\n        }\n    }\n    public Node cloneGraph(Node node) {\n        HashMap<Node, Node> dict = new HashMap<>();\n        if (node != null) {\n            dict.put(node, new Node(node.val));\n            dfs(node, dict);\n            return dict.get(node);\n        }\n        return null;\n    }\n}\n",
        "fixing_exp": "\nThe code had an unmatched parenthesis at the statement dict.get(node).neighbors.add(dict.get(nd);\n",
        "test_result_bool": false,
        "test_result_dict": {
            "state": "PENDING"
        },
        "traceback_messages": null
    },
    {
        "slug": "relative-ranks",
        "description": "You are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. All the scores are guaranteed to be unique.\nThe athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. The placement of each athlete determines their rank:\n\nThe 1st place athlete's rank is \"Gold Medal\".\nThe 2nd place athlete's rank is \"Silver Medal\".\nThe 3rd place athlete's rank is \"Bronze Medal\".\nFor the 4th place to the nth place athlete, their rank is their placement number (i.e., the xth place athlete's rank is \"x\").\n\nReturn an array answer of size n where answer[i] is the rank of the ith athlete.",
        "examples": [
            "Input: score = [5,4,3,2,1]\nOutput: [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]\nExplanation: The placements are [1st, 2nd, 3rd, 4th, 5th].",
            "Input: score = [10,3,8,9,4]\nOutput: [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]\nExplanation: The placements are [1st, 5th, 3rd, 2nd, 4th]."
        ],
        "constrains": "n == score.length\n1 <= n <= 104\n0 <= score[i] <= 106\nAll the values in score are unique.",
        "release_time": 1683184626,
        "oracle_code": "class Solution {\n    public String[] findRelativeRanks(int[] score) {\n         int n=score.length;\n        PriorityQueue<Integer> pq=new PriorityQueue<>((a,b)-> score[b]-score[a]);\n        for(int i=0;i<n;i++) pq.add(i);\n      String[] ans = new String[n];\n                int i=1;\n        while(!pq.isEmpty()){\n            int idx=pq.poll();\n         if(i==1)   { ans[idx]=\"Gold Medal\"; i++;}\n         else if(i==2)   { ans[idx]=\"Silver Medal\"; i++;}\n         else if(i==3)   { ans[idx]=\"Bronze Medal\"; i++;}\n         else ans[idx]=Integer.toString(i++);\n        }\n        return ans;  \n    }\n}",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String[] findRelativeRanks(int[] score) {\\n         int n=score.length;\\n        PriorityQueue<Integer> pq=new PriorityQueue<>((a,b)-> score[b]-score[a]);\\n        for(int i=0;i<n;i++) pq.add(i);\\n      String[] ans = new String[n];\\n                int i=1;\\n        while(!pq.isEmpty()){\\n            int idx=pq.poll();\\n         if(i==1)   { ans[idx]=\"Gold Medal\"; i++;}\\n         else if(i==2)   { ans[idx]=\"Silver Medal\"; i++;}\\n         else if(i==3)   { ans[idx]=\"Bronze Medal\"; i++;}\\n         else ans[idx]=Integer.toString(i++);\\n        }\\n        return ans;  \\n    }\\n}\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\n    public String[] findRelativeRanks(int[] score) {\n         int n=score.length;\n        PriorityQueue<Integer> pq=new PriorityQueue<>((a,b)-> score[b]-score[a]);\n        for(int i=0;i<n;i++) pq.add(i);\n      String[] ans = new String[n];\n                int i=1;\n        while(!pq.isEmpty()){\n            int idx=pq.poll();\n         if(i=1)   { ans[idx]=\"Gold Medal\"; i++;}\n         else if(i=2)   { ans[idx]=\"Silver Medal\"; i++;}\n         else if(i=3)   { ans[idx]=\"Bronze Medal\"; i++;}\n         else ans[idx]=Integer.toString(i++);\n        }\n        return ans;  \n    }\n}\n",
        "explanations": "\nThe equality (==) operator in statements has been replaced by assignment (=) operator.\n",
        "fixed_code": "\nclass Solution {\n    public String[] findRelativeRanks(int[] score) {\n         int n=score.length;\n        PriorityQueue<Integer> pq=new PriorityQueue<>((a,b)-> score[b]-score[a]);\n        for(int i=0;i<n;i++) pq.add(i);\n      String[] ans = new String[n];\n        int i=1;\n        while(!pq.isEmpty()){\n            int idx=pq.poll();\n            if(i==1) { ans[idx]=\"Gold Medal\"; i++;}\n            else if(i==2) { ans[idx]=\"Silver Medal\"; i++;}\n            else if(i==3) { ans[idx]=\"Bronze Medal\"; i++;}\n            else ans[idx]=Integer.toString(i++);\n        }\n        return ans;  \n    }\n}\n",
        "fixing_exp": "\nChanged assignment operator (=) to equality operator (==) in if conditions.\n",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "java",
            "run_success": true,
            "status_runtime": "7 ms",
            "memory": 45244000,
            "display_runtime": "7",
            "question_id": "506",
            "elapsed_time": 175,
            "compare_result": "11111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1701974045213,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 17,
            "total_testcases": 17,
            "runtime_percentile": 90.399,
            "status_memory": "45.2 MB",
            "memory_percentile": 9.226900000000024,
            "pretty_lang": "Java",
            "submission_id": "1114571280",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        },
        "traceback_messages": null
    }
]